{"ast":null,"code":"var _jsxFileName = \"/home/alpin/HunterDAO/projects/ethdenver-2-20-22/src/components/Navbars/DefaultNavbar/index.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-param-reassign */\n\n/**\n=========================================================\n* Material Kit 2 PRO React - v2.0.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/material-kit-pro-react\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\nimport { Fragment, useState, useEffect } from \"react\"; // react-router components\n\nimport { Link } from \"react-router-dom\"; // prop-types is a library for typechecking of props.\n\nimport PropTypes from \"prop-types\"; // @mui material components\n\nimport Container from \"@mui/material/Container\";\nimport Icon from \"@mui/material/Icon\";\nimport Popper from \"@mui/material/Popper\";\nimport Grow from \"@mui/material/Grow\";\nimport Grid from \"@mui/material/Grid\";\nimport Divider from \"@mui/material/Divider\";\nimport MuiLink from \"@mui/material/Link\"; // Material Kit 2 PRO React components\n\nimport MKBox from \"components/MKBox\";\nimport MKTypography from \"components/MKTypography\";\nimport MKButton from \"components/MKButton\"; // Material Kit 2 PRO React examples\n\nimport DefaultNavbarDropdown from \"components/Navbars/DefaultNavbar/DefaultNavbarDropdown\";\nimport DefaultNavbarMobile from \"components/Navbars/DefaultNavbar/DefaultNavbarMobile\"; // Material Kit 2 PRO React base styles\n\nimport breakpoints from \"assets/theme/base/breakpoints\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DefaultNavbar(_ref) {\n  _s();\n\n  let {\n    brand,\n    routes,\n    transparent,\n    light,\n    action,\n    sticky,\n    relative,\n    center\n  } = _ref;\n  // const [dropdown, setDropdown] = useState(\"\");\n  // const [dropdownEl, setDropdownEl] = useState(\"\");\n  // const [dropdownName, setDropdownName] = useState(\"\");\n  // const [nestedDropdown, setNestedDropdown] = useState(\"\");\n  // const [nestedDropdownEl, setNestedDropdownEl] = useState(\"\");\n  // const [nestedDropdownName, setNestedDropdownName] = useState(\"\");\n  // const [arrowRef, setArrowRef] = useState(null);\n  const [mobileNavbar, setMobileNavbar] = useState(false);\n  const [mobileView, setMobileView] = useState(false); // const openMobileNavbar = () => setMobileNavbar(!mobileNavbar);\n\n  useEffect(() => {\n    // A function that sets the display state for the DefaultNavbarMobile.\n    function displayMobileNavbar() {\n      if (window.innerWidth < breakpoints.values.lg) {\n        setMobileView(true);\n        setMobileNavbar(false);\n      } else {\n        setMobileView(false);\n        setMobileNavbar(false);\n      }\n    }\n    /** \n     The event listener that's calling the displayMobileNavbar function when \n     resizing the window.\n    */\n\n\n    window.addEventListener(\"resize\", displayMobileNavbar); // Call the displayMobileNavbar function to set the state with the initial value.\n\n    displayMobileNavbar(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"resize\", displayMobileNavbar);\n  }, []);\n  const renderNavbarItems = routes.map(_ref2 => {\n    let {\n      name,\n      icon,\n      href,\n      route,\n      collapse\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(DefaultNavbarDropdown, {\n      name: name,\n      icon: icon,\n      href: href,\n      route: route,\n      collapse: Boolean(collapse),\n      onMouseEnter: _ref3 => {\n        let {\n          currentTarget\n        } = _ref3;\n\n        if (collapse) {\n          setDropdown(currentTarget);\n          setDropdownEl(currentTarget);\n          setDropdownName(name);\n        }\n      },\n      onMouseLeave: () => collapse && setDropdown(null),\n      light: light\n    }, name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }, this);\n  }); // Render the routes on the dropdown menu\n  // const renderRoutes = routes.map(({ name, collapse, columns, rowsPerColumn }) => {\n  //   let template;\n  //   // Render the dropdown menu that should be display as columns\n  //   if (collapse && columns && name === dropdownName) {\n  //     const calculateColumns = collapse.reduce((resultArray, item, index) => {\n  //       const chunkIndex = Math.floor(index / rowsPerColumn);\n  //       if (!resultArray[chunkIndex]) {\n  //         resultArray[chunkIndex] = [];\n  //       }\n  //       resultArray[chunkIndex].push(item);\n  //       return resultArray;\n  //     }, []);\n  //     template = (\n  //       <Grid key={name} container spacing={3} py={1} px={1.5}>\n  //         {calculateColumns.map((cols, key) => {\n  //           const gridKey = `grid-${key}`;\n  //           const dividerKey = `divider-${key}`;\n  //           return (\n  //             <Grid key={gridKey} item xs={12 / columns} sx={{ position: \"relative\" }}>\n  //               {cols.map((col, index) => (\n  //                 <Fragment key={col.name}>\n  //                   <MKTypography\n  //                     display=\"block\"\n  //                     variant=\"button\"\n  //                     fontWeight=\"bold\"\n  //                     textTransform=\"capitalize\"\n  //                     py={1}\n  //                     px={0.5}\n  //                     mt={index !== 0 ? 2 : 0}\n  //                   >\n  //                     {col.name}\n  //                   </MKTypography>\n  //                   {col.collapse.map((item) => (\n  //                     <MKTypography\n  //                       key={item.name}\n  //                       component={item.route ? Link : MuiLink}\n  //                       to={item.route ? item.route : \"\"}\n  //                       href={item.href ? item.href : (e) => e.preventDefault()}\n  //                       target={item.href ? \"_blank\" : \"\"}\n  //                       rel={item.href ? \"noreferrer\" : \"noreferrer\"}\n  //                       minWidth=\"11.25rem\"\n  //                       display=\"block\"\n  //                       variant=\"button\"\n  //                       color=\"text\"\n  //                       textTransform=\"capitalize\"\n  //                       fontWeight=\"regular\"\n  //                       py={0.625}\n  //                       px={2}\n  //                       sx={({ palette: { grey, dark }, borders: { borderRadius } }) => ({\n  //                         borderRadius: borderRadius.md,\n  //                         cursor: \"pointer\",\n  //                         transition: \"all 300ms linear\",\n  //                         \"&:hover\": {\n  //                           backgroundColor: grey[200],\n  //                           color: dark.main,\n  //                         },\n  //                       })}\n  //                     >\n  //                       {item.name}\n  //                     </MKTypography>\n  //                   ))}\n  //                 </Fragment>\n  //               ))}\n  //               {key !== 0 && (\n  //                 <Divider\n  //                   key={dividerKey}\n  //                   orientation=\"vertical\"\n  //                   sx={{\n  //                     position: \"absolute\",\n  //                     top: \"50%\",\n  //                     left: \"-4px\",\n  //                     transform: \"translateY(-45%)\",\n  //                     height: \"90%\",\n  //                   }}\n  //                 />\n  //               )}\n  //             </Grid>\n  //           );\n  //         })}\n  //       </Grid>\n  //     );\n  //     // Render the dropdown menu that should be display as list items\n  //   } else if (collapse && name === dropdownName) {\n  //     template = collapse.map((item) => {\n  //       const linkComponent = {\n  //         component: MuiLink,\n  //         href: item.href,\n  //         target: \"_blank\",\n  //         rel: \"noreferrer\",\n  //       };\n  //       const routeComponent = {\n  //         component: Link,\n  //         to: item.route,\n  //       };\n  //       return (\n  //         <MKTypography\n  //           key={item.name}\n  //           {...(item.route ? routeComponent : linkComponent)}\n  //           display=\"flex\"\n  //           justifyContent=\"space-between\"\n  //           alignItems=\"center\"\n  //           variant=\"button\"\n  //           textTransform=\"capitalize\"\n  //           minWidth={item.description ? \"14rem\" : \"12rem\"}\n  //           color={item.description ? \"dark\" : \"text\"}\n  //           fontWeight={item.description ? \"bold\" : \"regular\"}\n  //           py={item.description ? 1 : 0.625}\n  //           px={2}\n  //           sx={({ palette: { grey, dark }, borders: { borderRadius } }) => ({\n  //             borderRadius: borderRadius.md,\n  //             cursor: \"pointer\",\n  //             transition: \"all 300ms linear\",\n  //             \"&:hover\": {\n  //               backgroundColor: grey[200],\n  //               color: dark.main,\n  //               \"& *\": {\n  //                 color: dark.main,\n  //               },\n  //             },\n  //           })}\n  //           onMouseEnter={({ currentTarget }) => {\n  //             if (item.dropdown) {\n  //               setNestedDropdown(currentTarget);\n  //               setNestedDropdownEl(currentTarget);\n  //               setNestedDropdownName(item.name);\n  //             }\n  //           }}\n  //           onMouseLeave={() => {\n  //             if (item.dropdown) {\n  //               setNestedDropdown(null);\n  //             }\n  //           }}\n  //         >\n  //           {item.description ? (\n  //             <MKBox>\n  //               {item.name}\n  //               <MKTypography\n  //                 display=\"block\"\n  //                 variant=\"button\"\n  //                 color=\"text\"\n  //                 fontWeight=\"regular\"\n  //                 sx={{ transition: \"all 300ms linear\" }}\n  //               >\n  //                 {item.description}\n  //               </MKTypography>\n  //             </MKBox>\n  //           ) : (\n  //             item.name\n  //           )}\n  //           {item.collapse && (\n  //             <Icon\n  //               fontSize=\"small\"\n  //               sx={{ fontWeight: \"normal\", verticalAlign: \"middle\", mr: -0.5 }}\n  //             >\n  //               keyboard_arrow_right\n  //             </Icon>\n  //           )}\n  //         </MKTypography>\n  //       );\n  //     });\n  //   }\n  //   return template;\n  // });\n  // Routes dropdown menu\n  // const dropdownMenu = (\n  //   <Popper\n  //     anchorEl={dropdown}\n  //     popperRef={null}\n  //     open={Boolean(dropdown)}\n  //     placement=\"top-start\"\n  //     transition\n  //     style={{ zIndex: 10 }}\n  //     modifiers={[\n  //       {\n  //         name: \"arrow\",\n  //         enabled: true,\n  //         options: {\n  //           element: arrowRef,\n  //         },\n  //       },\n  //     ]}\n  //     onMouseEnter={() => setDropdown(dropdownEl)}\n  //     onMouseLeave={() => {\n  //       if (!nestedDropdown) {\n  //         setDropdown(null);\n  //         setDropdownName(\"\");\n  //       }\n  //     }}\n  //   >\n  //     {({ TransitionProps }) => (\n  //       <Grow\n  //         {...TransitionProps}\n  //         sx={{\n  //           transformOrigin: \"left top\",\n  //           background: ({ palette: { white } }) => white.main,\n  //         }}\n  //       >\n  //         <MKBox borderRadius=\"lg\">\n  //           <MKTypography variant=\"h1\" color=\"white\">\n  //             <Icon ref={setArrowRef} sx={{ mt: -3 }}>\n  //               arrow_drop_up\n  //             </Icon>\n  //           </MKTypography>\n  //           <MKBox shadow=\"lg\" borderRadius=\"lg\" p={2} mt={2}>\n  //             {renderRoutes}\n  //           </MKBox>\n  //         </MKBox>\n  //       </Grow>\n  //     )}\n  //   </Popper>\n  // );\n  // Render routes that are nested inside the dropdown menu routes\n  // const renderNestedRoutes = routes.map(({ collapse, columns }) =>\n  //   collapse && !columns\n  //     ? collapse.map(({ name: parentName, collapse: nestedCollapse }) => {\n  //         let template;\n  //         if (parentName === nestedDropdownName) {\n  //           template =\n  //             nestedCollapse &&\n  //             nestedCollapse.map((item) => {\n  //               const linkComponent = {\n  //                 component: MuiLink,\n  //                 href: item.href,\n  //                 target: \"_blank\",\n  //                 rel: \"noreferrer\",\n  //               };\n  //               const routeComponent = {\n  //                 component: Link,\n  //                 to: item.route,\n  //               };\n  //               return (\n  //                 <MKTypography\n  //                   key={item.name}\n  //                   {...(item.route ? routeComponent : linkComponent)}\n  //                   display=\"flex\"\n  //                   justifyContent=\"space-between\"\n  //                   alignItems=\"center\"\n  //                   variant=\"button\"\n  //                   textTransform=\"capitalize\"\n  //                   minWidth={item.description ? \"14rem\" : \"12rem\"}\n  //                   color={item.description ? \"dark\" : \"text\"}\n  //                   fontWeight={item.description ? \"bold\" : \"regular\"}\n  //                   py={item.description ? 1 : 0.625}\n  //                   px={2}\n  //                   sx={({ palette: { grey, dark }, borders: { borderRadius } }) => ({\n  //                     borderRadius: borderRadius.md,\n  //                     cursor: \"pointer\",\n  //                     transition: \"all 300ms linear\",\n  //                     \"&:hover\": {\n  //                       backgroundColor: grey[200],\n  //                       color: dark.main,\n  //                       \"& *\": {\n  //                         color: dark.main,\n  //                       },\n  //                     },\n  //                   })}\n  //                 >\n  //                   {item.description ? (\n  //                     <MKBox>\n  //                       {item.name}\n  //                       <MKTypography\n  //                         display=\"block\"\n  //                         variant=\"button\"\n  //                         color=\"text\"\n  //                         fontWeight=\"regular\"\n  //                         sx={{ transition: \"all 300ms linear\" }}\n  //                       >\n  //                         {item.description}\n  //                       </MKTypography>\n  //                     </MKBox>\n  //                   ) : (\n  //                     item.name\n  //                   )}\n  //                   {item.collapse && (\n  //                     <Icon\n  //                       fontSize=\"small\"\n  //                       sx={{ fontWeight: \"normal\", verticalAlign: \"middle\", mr: -0.5 }}\n  //                     >\n  //                       keyboard_arrow_right\n  //                     </Icon>\n  //                   )}\n  //                 </MKTypography>\n  //               );\n  //             });\n  //         }\n  //         return template;\n  //       })\n  //     : null\n  // );\n  // Dropdown menu for the nested dropdowns\n  // const nestedDropdownMenu = (\n  //   <Popper\n  //     anchorEl={nestedDropdown}\n  //     popperRef={null}\n  //     open={Boolean(nestedDropdown)}\n  //     placement=\"right-start\"\n  //     transition\n  //     style={{ zIndex: 10 }}\n  //     onMouseEnter={() => {\n  //       setNestedDropdown(nestedDropdownEl);\n  //     }}\n  //     onMouseLeave={() => {\n  //       setNestedDropdown(null);\n  //       setNestedDropdownName(\"\");\n  //       setDropdown(null);\n  //     }}\n  //   >\n  //     {({ TransitionProps }) => (\n  //       <Grow\n  //         {...TransitionProps}\n  //         sx={{\n  //           transformOrigin: \"left top\",\n  //           background: ({ palette: { white } }) => white.main,\n  //         }}\n  //       >\n  //         <MKBox ml={2.5} mt={-2.5} borderRadius=\"lg\">\n  //           <MKBox shadow=\"lg\" borderRadius=\"lg\" py={1.5} px={1} mt={2}>\n  //             {renderNestedRoutes}\n  //           </MKBox>\n  //         </MKBox>\n  //       </Grow>\n  //     )}\n  //   </Popper>\n  // );\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    sx: sticky ? {\n      position: \"sticky\",\n      top: 0,\n      zIndex: 10\n    } : null,\n    children: /*#__PURE__*/_jsxDEV(MKBox, {\n      py: 1,\n      px: {\n        xs: 4,\n        sm: transparent ? 2 : 3,\n        lg: transparent ? 0 : 2\n      },\n      my: relative ? 0 : 2,\n      mx: relative ? 0 : 3,\n      width: relative ? \"100%\" : \"calc(100% - 48px)\",\n      borderRadius: \"xl\",\n      shadow: transparent ? \"none\" : \"md\",\n      color: light ? \"white\" : \"dark\",\n      position: relative ? \"relative\" : \"absolute\",\n      left: 0,\n      zIndex: 3,\n      sx: _ref4 => {\n        let {\n          palette: {\n            transparent: transparentColor,\n            white\n          },\n          functions: {\n            rgba\n          }\n        } = _ref4;\n        return {\n          backgroundColor: transparent ? transparentColor.main : rgba(white.main, 0.8),\n          backdropFilter: transparent ? \"none\" : `saturate(200%) blur(30px)`\n        };\n      },\n      children: [/*#__PURE__*/_jsxDEV(MKBox, {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(MKBox, {\n          component: Link,\n          to: \"/\",\n          lineHeight: 1,\n          py: transparent ? 1.5 : 0.75,\n          pl: relative || transparent ? 0 : {\n            xs: 0,\n            lg: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(MKTypography, {\n            variant: \"button\",\n            fontWeight: \"bold\",\n            color: light ? \"white\" : \"dark\",\n            children: brand\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MKBox, {\n          color: \"inherit\",\n          display: {\n            xs: \"none\",\n            lg: \"flex\"\n          },\n          ml: \"auto\",\n          mr: center ? \"auto\" : 0,\n          children: renderNavbarItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MKBox, {\n          ml: {\n            xs: \"auto\",\n            lg: 0\n          },\n          children: action && (action.type === \"internal\" ? /*#__PURE__*/_jsxDEV(MKButton, {\n            component: Link,\n            to: action.route,\n            variant: action.color === \"white\" || action.color === \"default\" ? \"contained\" : \"gradient\",\n            color: action.color ? action.color : \"info\",\n            size: \"small\",\n            children: action.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(MKButton, {\n            component: \"a\",\n            href: action.route,\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            variant: action.color === \"white\" || action.color === \"default\" ? \"contained\" : \"gradient\",\n            color: action.color ? action.color : \"info\",\n            size: \"small\",\n            children: action.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MKBox, {\n        bgColor: transparent ? \"white\" : \"transparent\",\n        shadow: transparent ? \"lg\" : \"none\",\n        borderRadius: \"xl\",\n        px: transparent ? 2 : 0,\n        children: mobileView && /*#__PURE__*/_jsxDEV(DefaultNavbarMobile, {\n          routes: routes,\n          open: mobileNavbar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 453,\n    columnNumber: 5\n  }, this);\n} // Setting default values for the props of DefaultNavbar\n\n\n_s(DefaultNavbar, \"NuH0+y4YFsEp7mvsAys96pctIc0=\");\n\n_c = DefaultNavbar;\nDefaultNavbar.defaultProps = {\n  brand: \"Material Kit 2\",\n  transparent: false,\n  light: false,\n  action: false,\n  sticky: false,\n  relative: false,\n  center: false\n}; // Typechecking props for the DefaultNavbar\n\nDefaultNavbar.propTypes = {\n  brand: PropTypes.string,\n  routes: PropTypes.arrayOf(PropTypes.object).isRequired,\n  transparent: PropTypes.bool,\n  light: PropTypes.bool,\n  action: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({\n    type: PropTypes.oneOf([\"external\", \"internal\"]).isRequired,\n    route: PropTypes.string.isRequired,\n    color: PropTypes.oneOf([\"primary\", \"secondary\", \"info\", \"success\", \"warning\", \"error\", \"dark\", \"light\", \"default\", \"white\"]),\n    label: PropTypes.string.isRequired\n  })]),\n  sticky: PropTypes.bool,\n  relative: PropTypes.bool,\n  center: PropTypes.bool\n};\nexport default DefaultNavbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"DefaultNavbar\");","map":{"version":3,"sources":["/home/alpin/HunterDAO/projects/ethdenver-2-20-22/src/components/Navbars/DefaultNavbar/index.js"],"names":["Fragment","useState","useEffect","Link","PropTypes","Container","Icon","Popper","Grow","Grid","Divider","MuiLink","MKBox","MKTypography","MKButton","DefaultNavbarDropdown","DefaultNavbarMobile","breakpoints","DefaultNavbar","brand","routes","transparent","light","action","sticky","relative","center","mobileNavbar","setMobileNavbar","mobileView","setMobileView","displayMobileNavbar","window","innerWidth","values","lg","addEventListener","removeEventListener","renderNavbarItems","map","name","icon","href","route","collapse","Boolean","currentTarget","setDropdown","setDropdownEl","setDropdownName","position","top","zIndex","xs","sm","palette","transparentColor","white","functions","rgba","backgroundColor","main","backdropFilter","type","color","label","defaultProps","propTypes","string","arrayOf","object","isRequired","bool","oneOfType","shape","oneOf"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\n/**\n=========================================================\n* Material Kit 2 PRO React - v2.0.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/material-kit-pro-react\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\n\nimport { Fragment, useState, useEffect } from \"react\";\n\n// react-router components\nimport { Link } from \"react-router-dom\";\n\n// prop-types is a library for typechecking of props.\nimport PropTypes from \"prop-types\";\n\n// @mui material components\nimport Container from \"@mui/material/Container\";\nimport Icon from \"@mui/material/Icon\";\nimport Popper from \"@mui/material/Popper\";\nimport Grow from \"@mui/material/Grow\";\nimport Grid from \"@mui/material/Grid\";\nimport Divider from \"@mui/material/Divider\";\nimport MuiLink from \"@mui/material/Link\";\n\n// Material Kit 2 PRO React components\nimport MKBox from \"components/MKBox\";\nimport MKTypography from \"components/MKTypography\";\nimport MKButton from \"components/MKButton\";\n\n// Material Kit 2 PRO React examples\nimport DefaultNavbarDropdown from \"components/Navbars/DefaultNavbar/DefaultNavbarDropdown\";\nimport DefaultNavbarMobile from \"components/Navbars/DefaultNavbar/DefaultNavbarMobile\";\n\n// Material Kit 2 PRO React base styles\nimport breakpoints from \"assets/theme/base/breakpoints\";\n\nfunction DefaultNavbar({ brand, routes, transparent, light, action, sticky, relative, center }) {\n  // const [dropdown, setDropdown] = useState(\"\");\n  // const [dropdownEl, setDropdownEl] = useState(\"\");\n  // const [dropdownName, setDropdownName] = useState(\"\");\n  // const [nestedDropdown, setNestedDropdown] = useState(\"\");\n  // const [nestedDropdownEl, setNestedDropdownEl] = useState(\"\");\n  // const [nestedDropdownName, setNestedDropdownName] = useState(\"\");\n  // const [arrowRef, setArrowRef] = useState(null);\n  const [mobileNavbar, setMobileNavbar] = useState(false);\n  const [mobileView, setMobileView] = useState(false);\n\n  // const openMobileNavbar = () => setMobileNavbar(!mobileNavbar);\n\n  useEffect(() => {\n    // A function that sets the display state for the DefaultNavbarMobile.\n    function displayMobileNavbar() {\n      if (window.innerWidth < breakpoints.values.lg) {\n        setMobileView(true);\n        setMobileNavbar(false);\n      } else {\n        setMobileView(false);\n        setMobileNavbar(false);\n      }\n    }\n\n    /** \n     The event listener that's calling the displayMobileNavbar function when \n     resizing the window.\n    */\n    window.addEventListener(\"resize\", displayMobileNavbar);\n\n    // Call the displayMobileNavbar function to set the state with the initial value.\n    displayMobileNavbar();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", displayMobileNavbar);\n  }, []);\n\n  const renderNavbarItems = routes.map(({ name, icon, href, route, collapse }) => (\n    <DefaultNavbarDropdown\n      key={name}\n      name={name}\n      icon={icon}\n      href={href}\n      route={route}\n      collapse={Boolean(collapse)}\n      onMouseEnter={({ currentTarget }) => {\n        if (collapse) {\n          setDropdown(currentTarget);\n          setDropdownEl(currentTarget);\n          setDropdownName(name);\n        }\n      }}\n      onMouseLeave={() => collapse && setDropdown(null)}\n      light={light}\n    />\n  ));\n\n  // Render the routes on the dropdown menu\n  // const renderRoutes = routes.map(({ name, collapse, columns, rowsPerColumn }) => {\n  //   let template;\n\n  //   // Render the dropdown menu that should be display as columns\n  //   if (collapse && columns && name === dropdownName) {\n  //     const calculateColumns = collapse.reduce((resultArray, item, index) => {\n  //       const chunkIndex = Math.floor(index / rowsPerColumn);\n\n  //       if (!resultArray[chunkIndex]) {\n  //         resultArray[chunkIndex] = [];\n  //       }\n\n  //       resultArray[chunkIndex].push(item);\n\n  //       return resultArray;\n  //     }, []);\n\n  //     template = (\n  //       <Grid key={name} container spacing={3} py={1} px={1.5}>\n  //         {calculateColumns.map((cols, key) => {\n  //           const gridKey = `grid-${key}`;\n  //           const dividerKey = `divider-${key}`;\n\n  //           return (\n  //             <Grid key={gridKey} item xs={12 / columns} sx={{ position: \"relative\" }}>\n  //               {cols.map((col, index) => (\n  //                 <Fragment key={col.name}>\n  //                   <MKTypography\n  //                     display=\"block\"\n  //                     variant=\"button\"\n  //                     fontWeight=\"bold\"\n  //                     textTransform=\"capitalize\"\n  //                     py={1}\n  //                     px={0.5}\n  //                     mt={index !== 0 ? 2 : 0}\n  //                   >\n  //                     {col.name}\n  //                   </MKTypography>\n  //                   {col.collapse.map((item) => (\n  //                     <MKTypography\n  //                       key={item.name}\n  //                       component={item.route ? Link : MuiLink}\n  //                       to={item.route ? item.route : \"\"}\n  //                       href={item.href ? item.href : (e) => e.preventDefault()}\n  //                       target={item.href ? \"_blank\" : \"\"}\n  //                       rel={item.href ? \"noreferrer\" : \"noreferrer\"}\n  //                       minWidth=\"11.25rem\"\n  //                       display=\"block\"\n  //                       variant=\"button\"\n  //                       color=\"text\"\n  //                       textTransform=\"capitalize\"\n  //                       fontWeight=\"regular\"\n  //                       py={0.625}\n  //                       px={2}\n  //                       sx={({ palette: { grey, dark }, borders: { borderRadius } }) => ({\n  //                         borderRadius: borderRadius.md,\n  //                         cursor: \"pointer\",\n  //                         transition: \"all 300ms linear\",\n\n  //                         \"&:hover\": {\n  //                           backgroundColor: grey[200],\n  //                           color: dark.main,\n  //                         },\n  //                       })}\n  //                     >\n  //                       {item.name}\n  //                     </MKTypography>\n  //                   ))}\n  //                 </Fragment>\n  //               ))}\n  //               {key !== 0 && (\n  //                 <Divider\n  //                   key={dividerKey}\n  //                   orientation=\"vertical\"\n  //                   sx={{\n  //                     position: \"absolute\",\n  //                     top: \"50%\",\n  //                     left: \"-4px\",\n  //                     transform: \"translateY(-45%)\",\n  //                     height: \"90%\",\n  //                   }}\n  //                 />\n  //               )}\n  //             </Grid>\n  //           );\n  //         })}\n  //       </Grid>\n  //     );\n\n  //     // Render the dropdown menu that should be display as list items\n  //   } else if (collapse && name === dropdownName) {\n  //     template = collapse.map((item) => {\n  //       const linkComponent = {\n  //         component: MuiLink,\n  //         href: item.href,\n  //         target: \"_blank\",\n  //         rel: \"noreferrer\",\n  //       };\n\n  //       const routeComponent = {\n  //         component: Link,\n  //         to: item.route,\n  //       };\n\n  //       return (\n  //         <MKTypography\n  //           key={item.name}\n  //           {...(item.route ? routeComponent : linkComponent)}\n  //           display=\"flex\"\n  //           justifyContent=\"space-between\"\n  //           alignItems=\"center\"\n  //           variant=\"button\"\n  //           textTransform=\"capitalize\"\n  //           minWidth={item.description ? \"14rem\" : \"12rem\"}\n  //           color={item.description ? \"dark\" : \"text\"}\n  //           fontWeight={item.description ? \"bold\" : \"regular\"}\n  //           py={item.description ? 1 : 0.625}\n  //           px={2}\n  //           sx={({ palette: { grey, dark }, borders: { borderRadius } }) => ({\n  //             borderRadius: borderRadius.md,\n  //             cursor: \"pointer\",\n  //             transition: \"all 300ms linear\",\n\n  //             \"&:hover\": {\n  //               backgroundColor: grey[200],\n  //               color: dark.main,\n\n  //               \"& *\": {\n  //                 color: dark.main,\n  //               },\n  //             },\n  //           })}\n  //           onMouseEnter={({ currentTarget }) => {\n  //             if (item.dropdown) {\n  //               setNestedDropdown(currentTarget);\n  //               setNestedDropdownEl(currentTarget);\n  //               setNestedDropdownName(item.name);\n  //             }\n  //           }}\n  //           onMouseLeave={() => {\n  //             if (item.dropdown) {\n  //               setNestedDropdown(null);\n  //             }\n  //           }}\n  //         >\n  //           {item.description ? (\n  //             <MKBox>\n  //               {item.name}\n  //               <MKTypography\n  //                 display=\"block\"\n  //                 variant=\"button\"\n  //                 color=\"text\"\n  //                 fontWeight=\"regular\"\n  //                 sx={{ transition: \"all 300ms linear\" }}\n  //               >\n  //                 {item.description}\n  //               </MKTypography>\n  //             </MKBox>\n  //           ) : (\n  //             item.name\n  //           )}\n  //           {item.collapse && (\n  //             <Icon\n  //               fontSize=\"small\"\n  //               sx={{ fontWeight: \"normal\", verticalAlign: \"middle\", mr: -0.5 }}\n  //             >\n  //               keyboard_arrow_right\n  //             </Icon>\n  //           )}\n  //         </MKTypography>\n  //       );\n  //     });\n  //   }\n\n  //   return template;\n  // });\n\n  // Routes dropdown menu\n  // const dropdownMenu = (\n  //   <Popper\n  //     anchorEl={dropdown}\n  //     popperRef={null}\n  //     open={Boolean(dropdown)}\n  //     placement=\"top-start\"\n  //     transition\n  //     style={{ zIndex: 10 }}\n  //     modifiers={[\n  //       {\n  //         name: \"arrow\",\n  //         enabled: true,\n  //         options: {\n  //           element: arrowRef,\n  //         },\n  //       },\n  //     ]}\n  //     onMouseEnter={() => setDropdown(dropdownEl)}\n  //     onMouseLeave={() => {\n  //       if (!nestedDropdown) {\n  //         setDropdown(null);\n  //         setDropdownName(\"\");\n  //       }\n  //     }}\n  //   >\n  //     {({ TransitionProps }) => (\n  //       <Grow\n  //         {...TransitionProps}\n  //         sx={{\n  //           transformOrigin: \"left top\",\n  //           background: ({ palette: { white } }) => white.main,\n  //         }}\n  //       >\n  //         <MKBox borderRadius=\"lg\">\n  //           <MKTypography variant=\"h1\" color=\"white\">\n  //             <Icon ref={setArrowRef} sx={{ mt: -3 }}>\n  //               arrow_drop_up\n  //             </Icon>\n  //           </MKTypography>\n  //           <MKBox shadow=\"lg\" borderRadius=\"lg\" p={2} mt={2}>\n  //             {renderRoutes}\n  //           </MKBox>\n  //         </MKBox>\n  //       </Grow>\n  //     )}\n  //   </Popper>\n  // );\n\n  // Render routes that are nested inside the dropdown menu routes\n  // const renderNestedRoutes = routes.map(({ collapse, columns }) =>\n  //   collapse && !columns\n  //     ? collapse.map(({ name: parentName, collapse: nestedCollapse }) => {\n  //         let template;\n\n  //         if (parentName === nestedDropdownName) {\n  //           template =\n  //             nestedCollapse &&\n  //             nestedCollapse.map((item) => {\n  //               const linkComponent = {\n  //                 component: MuiLink,\n  //                 href: item.href,\n  //                 target: \"_blank\",\n  //                 rel: \"noreferrer\",\n  //               };\n\n  //               const routeComponent = {\n  //                 component: Link,\n  //                 to: item.route,\n  //               };\n\n  //               return (\n  //                 <MKTypography\n  //                   key={item.name}\n  //                   {...(item.route ? routeComponent : linkComponent)}\n  //                   display=\"flex\"\n  //                   justifyContent=\"space-between\"\n  //                   alignItems=\"center\"\n  //                   variant=\"button\"\n  //                   textTransform=\"capitalize\"\n  //                   minWidth={item.description ? \"14rem\" : \"12rem\"}\n  //                   color={item.description ? \"dark\" : \"text\"}\n  //                   fontWeight={item.description ? \"bold\" : \"regular\"}\n  //                   py={item.description ? 1 : 0.625}\n  //                   px={2}\n  //                   sx={({ palette: { grey, dark }, borders: { borderRadius } }) => ({\n  //                     borderRadius: borderRadius.md,\n  //                     cursor: \"pointer\",\n  //                     transition: \"all 300ms linear\",\n\n  //                     \"&:hover\": {\n  //                       backgroundColor: grey[200],\n  //                       color: dark.main,\n\n  //                       \"& *\": {\n  //                         color: dark.main,\n  //                       },\n  //                     },\n  //                   })}\n  //                 >\n  //                   {item.description ? (\n  //                     <MKBox>\n  //                       {item.name}\n  //                       <MKTypography\n  //                         display=\"block\"\n  //                         variant=\"button\"\n  //                         color=\"text\"\n  //                         fontWeight=\"regular\"\n  //                         sx={{ transition: \"all 300ms linear\" }}\n  //                       >\n  //                         {item.description}\n  //                       </MKTypography>\n  //                     </MKBox>\n  //                   ) : (\n  //                     item.name\n  //                   )}\n  //                   {item.collapse && (\n  //                     <Icon\n  //                       fontSize=\"small\"\n  //                       sx={{ fontWeight: \"normal\", verticalAlign: \"middle\", mr: -0.5 }}\n  //                     >\n  //                       keyboard_arrow_right\n  //                     </Icon>\n  //                   )}\n  //                 </MKTypography>\n  //               );\n  //             });\n  //         }\n\n  //         return template;\n  //       })\n  //     : null\n  // );\n\n  // Dropdown menu for the nested dropdowns\n  // const nestedDropdownMenu = (\n  //   <Popper\n  //     anchorEl={nestedDropdown}\n  //     popperRef={null}\n  //     open={Boolean(nestedDropdown)}\n  //     placement=\"right-start\"\n  //     transition\n  //     style={{ zIndex: 10 }}\n  //     onMouseEnter={() => {\n  //       setNestedDropdown(nestedDropdownEl);\n  //     }}\n  //     onMouseLeave={() => {\n  //       setNestedDropdown(null);\n  //       setNestedDropdownName(\"\");\n  //       setDropdown(null);\n  //     }}\n  //   >\n  //     {({ TransitionProps }) => (\n  //       <Grow\n  //         {...TransitionProps}\n  //         sx={{\n  //           transformOrigin: \"left top\",\n  //           background: ({ palette: { white } }) => white.main,\n  //         }}\n  //       >\n  //         <MKBox ml={2.5} mt={-2.5} borderRadius=\"lg\">\n  //           <MKBox shadow=\"lg\" borderRadius=\"lg\" py={1.5} px={1} mt={2}>\n  //             {renderNestedRoutes}\n  //           </MKBox>\n  //         </MKBox>\n  //       </Grow>\n  //     )}\n  //   </Popper>\n  // );\n\n  return (\n    <Container sx={sticky ? { position: \"sticky\", top: 0, zIndex: 10 } : null}>\n      <MKBox\n        py={1}\n        px={{ xs: 4, sm: transparent ? 2 : 3, lg: transparent ? 0 : 2 }}\n        my={relative ? 0 : 2}\n        mx={relative ? 0 : 3}\n        width={relative ? \"100%\" : \"calc(100% - 48px)\"}\n        borderRadius=\"xl\"\n        shadow={transparent ? \"none\" : \"md\"}\n        color={light ? \"white\" : \"dark\"}\n        position={relative ? \"relative\" : \"absolute\"}\n        left={0}\n        zIndex={3}\n        sx={({ palette: { transparent: transparentColor, white }, functions: { rgba } }) => ({\n          backgroundColor: transparent ? transparentColor.main : rgba(white.main, 0.8),\n          backdropFilter: transparent ? \"none\" : `saturate(200%) blur(30px)`,\n        })}\n      >\n        <MKBox display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          <MKBox\n            component={Link}\n            to=\"/\"\n            lineHeight={1}\n            py={transparent ? 1.5 : 0.75}\n            pl={relative || transparent ? 0 : { xs: 0, lg: 1 }}\n          >\n            <MKTypography variant=\"button\" fontWeight=\"bold\" color={light ? \"white\" : \"dark\"}>\n              {brand}\n            </MKTypography>\n          </MKBox>\n          <MKBox\n            color=\"inherit\"\n            display={{ xs: \"none\", lg: \"flex\" }}\n            ml=\"auto\"\n            mr={center ? \"auto\" : 0}\n          >\n            {renderNavbarItems}\n          </MKBox>\n          <MKBox ml={{ xs: \"auto\", lg: 0 }}>\n            {action &&\n              (action.type === \"internal\" ? (\n                <MKButton\n                  component={Link}\n                  to={action.route}\n                  variant={\n                    action.color === \"white\" || action.color === \"default\"\n                      ? \"contained\"\n                      : \"gradient\"\n                  }\n                  color={action.color ? action.color : \"info\"}\n                  size=\"small\"\n                >\n                  {action.label}\n                </MKButton>\n              ) : (\n                <MKButton\n                  component=\"a\"\n                  href={action.route}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  variant={\n                    action.color === \"white\" || action.color === \"default\"\n                      ? \"contained\"\n                      : \"gradient\"\n                  }\n                  color={action.color ? action.color : \"info\"}\n                  size=\"small\"\n                >\n                  {action.label}\n                </MKButton>\n              ))}\n          </MKBox>\n          {/* <MKBox\n            display={{ xs: \"inline-block\", lg: \"none\" }}\n            lineHeight={0}\n            py={1.5}\n            pl={1.5}\n            color={transparent ? \"white\" : \"inherit\"}\n            sx={{ cursor: \"pointer\" }}\n            onClick={openMobileNavbar}\n          >\n            <Icon fontSize=\"default\">{mobileNavbar ? \"close\" : \"menu\"}</Icon>\n          </MKBox> */}\n        </MKBox>\n        <MKBox\n          bgColor={transparent ? \"white\" : \"transparent\"}\n          shadow={transparent ? \"lg\" : \"none\"}\n          borderRadius=\"xl\"\n          px={transparent ? 2 : 0}\n        >\n          {mobileView && <DefaultNavbarMobile routes={routes} open={mobileNavbar} />}\n        </MKBox>\n      </MKBox>\n      {/* {dropdownMenu} */}\n      {/* {nestedDropdownMenu} */}\n    </Container>\n  );\n}\n\n// Setting default values for the props of DefaultNavbar\nDefaultNavbar.defaultProps = {\n  brand: \"Material Kit 2\",\n  transparent: false,\n  light: false,\n  action: false,\n  sticky: false,\n  relative: false,\n  center: false,\n};\n\n// Typechecking props for the DefaultNavbar\nDefaultNavbar.propTypes = {\n  brand: PropTypes.string,\n  routes: PropTypes.arrayOf(PropTypes.object).isRequired,\n  transparent: PropTypes.bool,\n  light: PropTypes.bool,\n  action: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.shape({\n      type: PropTypes.oneOf([\"external\", \"internal\"]).isRequired,\n      route: PropTypes.string.isRequired,\n      color: PropTypes.oneOf([\n        \"primary\",\n        \"secondary\",\n        \"info\",\n        \"success\",\n        \"warning\",\n        \"error\",\n        \"dark\",\n        \"light\",\n        \"default\",\n        \"white\",\n      ]),\n      label: PropTypes.string.isRequired,\n    }),\n  ]),\n  sticky: PropTypes.bool,\n  relative: PropTypes.bool,\n  center: PropTypes.bool,\n};\n\nexport default DefaultNavbar;\n"]},"metadata":{},"sourceType":"module"}