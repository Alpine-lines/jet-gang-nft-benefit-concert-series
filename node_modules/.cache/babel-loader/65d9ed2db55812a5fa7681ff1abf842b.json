{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar bcUrRegistryEth = require('@keystonehq/bc-ur-registry-eth');\n\nvar sdk = require('@keystonehq/sdk');\n\nvar sdk__default = _interopDefault(sdk);\n\nvar baseEthKeyring = require('@keystonehq/base-eth-keyring');\n\nclass DefaultInteractionProvider {\n  constructor() {\n    this.keystoneSDK = undefined;\n\n    this.readCryptoHDKey = async () => {\n      const decodedResult = await this.keystoneSDK.read([sdk.SupportedResult.UR_CRYPTO_HDKEY], {\n        title: 'Sync Keystone',\n        description: 'Please scan the QR code displayed on your Keystone',\n        renderInitial: {\n          walletMode: 'Web3',\n          link: 'https://keyst.one/defi'\n        },\n        URTypeErrorMessage: 'The scanned QR code is not the sync code from the Keystone hardware wallet. Please verify the code and try again ( Keystone firmware V1.3.0 or newer required).'\n      });\n\n      if (decodedResult.status === sdk.ReadStatus.success) {\n        const {\n          result\n        } = decodedResult;\n        const cryptoHDKey = bcUrRegistryEth.CryptoHDKey.fromCBOR(result.cbor);\n        return cryptoHDKey;\n      } else {\n        throw new Error('Reading canceled');\n      }\n    };\n\n    this.requestSignature = async (ethSignRequest, requestTitle, requestDescription) => {\n      const status = await this.keystoneSDK.play(ethSignRequest.toUR(), {\n        hasNext: true,\n        title: requestTitle,\n        description: requestDescription\n      });\n      if (status === sdk.PlayStatus.canceled) throw new Error('#ktek_error[play-cancel]: play canceled');\n      const result = await this.keystoneSDK.read([sdk.SupportedResult.UR_ETH_SIGNATURE], {\n        title: 'Scan Keystone',\n        description: 'Please scan the QR code displayed on your Keystone'\n      });\n\n      if (result.status === sdk.ReadStatus.canceled) {\n        throw new Error('#ktek_error[read-cancel]: read signature canceled');\n      } else {\n        return bcUrRegistryEth.ETHSignature.fromCBOR(result.result.cbor);\n      }\n    };\n\n    if (DefaultInteractionProvider.instance) {\n      return DefaultInteractionProvider.instance;\n    }\n\n    sdk__default.bootstrap();\n    this.keystoneSDK = sdk__default.getSdk();\n    DefaultInteractionProvider.instance = this;\n  }\n\n}\n\nclass DefaultKeyring extends baseEthKeyring.BaseKeyring {\n  constructor(opts) {\n    super(opts);\n\n    this.getInteraction = () => {\n      return new DefaultInteractionProvider();\n    };\n  }\n\n  static getEmptyKeyring() {\n    return new DefaultKeyring({\n      xfp: '',\n      xpub: '',\n      hdPath: '',\n      perPage: 5,\n      page: 0,\n      accounts: [],\n      currentAccount: 0,\n      paths: {}\n    });\n  }\n\n}\n\nDefaultKeyring.type = baseEthKeyring.BaseKeyring.type;\nexports.default = DefaultKeyring;","map":{"version":3,"sources":["../src/DefaultInteractionProvider.ts","../src/DefaultKeyring.ts"],"names":["DefaultInteractionProvider","constructor","sdk","decodedResult","SupportedResult","title","description","renderInitial","walletMode","link","URTypeErrorMessage","ReadStatus","result","cryptoHDKey","CryptoHDKey","status","ethSignRequest","hasNext","requestDescription","PlayStatus","ETHSignature","DefaultKeyring","BaseKeyring","getEmptyKeyring","xfp","xpub","hdPath","perPage","page","accounts","currentAccount","paths","opts"],"mappings":"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","sourcesContent":["import { EthSignRequest, CryptoHDKey, ETHSignature } from '@keystonehq/bc-ur-registry-eth';\nimport { InteractionProvider } from '@keystonehq/base-eth-keyring';\nimport sdk, { SupportedResult, ReadStatus, PlayStatus } from '@keystonehq/sdk';\n\nexport class DefaultInteractionProvider implements InteractionProvider {\n    private static instance;\n    private keystoneSDK = undefined;\n\n    constructor() {\n        if (DefaultInteractionProvider.instance) {\n            return DefaultInteractionProvider.instance;\n        }\n        sdk.bootstrap();\n        this.keystoneSDK = sdk.getSdk();\n        DefaultInteractionProvider.instance = this;\n    }\n\n    public readCryptoHDKey = async () => {\n        const decodedResult = await this.keystoneSDK.read([SupportedResult.UR_CRYPTO_HDKEY], {\n            title: 'Sync Keystone',\n            description: 'Please scan the QR code displayed on your Keystone',\n            renderInitial: {\n                walletMode: 'Web3',\n                link: 'https://keyst.one/defi',\n            },\n            URTypeErrorMessage:\n                'The scanned QR code is not the sync code from the Keystone hardware wallet. Please verify the code and try again ( Keystone firmware V1.3.0 or newer required).',\n        });\n        if (decodedResult.status === ReadStatus.success) {\n            const { result } = decodedResult;\n            const cryptoHDKey = CryptoHDKey.fromCBOR(result.cbor);\n            return cryptoHDKey;\n        } else {\n            throw new Error('Reading canceled');\n        }\n    };\n\n    public requestSignature = async (\n        ethSignRequest: EthSignRequest,\n        requestTitle?: string,\n        requestDescription?: string,\n    ) => {\n        const status = await this.keystoneSDK.play(ethSignRequest.toUR(), {\n            hasNext: true,\n            title: requestTitle,\n            description: requestDescription,\n        });\n        if (status === PlayStatus.canceled) throw new Error('#ktek_error[play-cancel]: play canceled');\n        const result = await this.keystoneSDK.read([SupportedResult.UR_ETH_SIGNATURE], {\n            title: 'Scan Keystone',\n            description: 'Please scan the QR code displayed on your Keystone',\n        });\n        if (result.status === ReadStatus.canceled) {\n            throw new Error('#ktek_error[read-cancel]: read signature canceled');\n        } else {\n            return ETHSignature.fromCBOR(result.result.cbor);\n        }\n    };\n}\n","import { DefaultInteractionProvider } from './DefaultInteractionProvider';\nimport { BaseKeyring, StoredKeyring } from '@keystonehq/base-eth-keyring';\n\nexport class DefaultKeyring extends BaseKeyring {\n    static type = BaseKeyring.type;\n    static getEmptyKeyring(): DefaultKeyring {\n        return new DefaultKeyring({\n            xfp: '',\n            xpub: '',\n            hdPath: '',\n            perPage: 5,\n            page: 0,\n            accounts: [],\n            currentAccount: 0,\n            paths: {},\n        });\n    }\n\n    constructor(opts?: StoredKeyring) {\n        super(opts);\n    }\n\n    getInteraction = () => {\n        return new DefaultInteractionProvider();\n    };\n}\n"]},"metadata":{},"sourceType":"script"}