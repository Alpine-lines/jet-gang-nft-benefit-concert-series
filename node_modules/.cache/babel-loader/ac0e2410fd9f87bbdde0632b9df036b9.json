{"ast":null,"code":"import { createContext, useState, useReducer, useEffect, createElement, useContext } from 'react';\nimport Onboard from 'bnc-onboard';\nimport { Contract, ethers, utils, BigNumber as BigNumber$1 } from 'ethers';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nfunction __generator(thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn, basedir, module) {\n  return module = {\n    path: basedir,\n    exports: {},\n    require: function (path, base) {\n      return commonjsRequire(path, base === undefined || base === null ? module.path : base);\n    }\n  }, fn(module, module.exports), module.exports;\n}\n\nfunction getCjsExportFromNamespace(n) {\n  return n && n['default'] || n;\n}\n\nfunction commonjsRequire() {\n  throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\n}\n\nvar bignumber = createCommonjsModule(function (module) {\n  (function (globalObject) {\n    /*\r\n     *      bignumber.js v9.0.1\r\n     *      A JavaScript library for arbitrary-precision arithmetic.\r\n     *      https://github.com/MikeMcl/bignumber.js\r\n     *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n     *      MIT Licensed.\r\n     *\r\n     *      BigNumber.prototype methods     |  BigNumber methods\r\n     *                                      |\r\n     *      absoluteValue            abs    |  clone\r\n     *      comparedTo                      |  config               set\r\n     *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n     *      dividedBy                div    |      ROUNDING_MODE\r\n     *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n     *      exponentiatedBy          pow    |      RANGE\r\n     *      integerValue                    |      CRYPTO\r\n     *      isEqualTo                eq     |      MODULO_MODE\r\n     *      isFinite                        |      POW_PRECISION\r\n     *      isGreaterThan            gt     |      FORMAT\r\n     *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n     *      isInteger                       |  isBigNumber\r\n     *      isLessThan               lt     |  maximum              max\r\n     *      isLessThanOrEqualTo      lte    |  minimum              min\r\n     *      isNaN                           |  random\r\n     *      isNegative                      |  sum\r\n     *      isPositive                      |\r\n     *      isZero                          |\r\n     *      minus                           |\r\n     *      modulo                   mod    |\r\n     *      multipliedBy             times  |\r\n     *      negated                         |\r\n     *      plus                            |\r\n     *      precision                sd     |\r\n     *      shiftedBy                       |\r\n     *      squareRoot               sqrt   |\r\n     *      toExponential                   |\r\n     *      toFixed                         |\r\n     *      toFormat                        |\r\n     *      toFraction                      |\r\n     *      toJSON                          |\r\n     *      toNumber                        |\r\n     *      toPrecision                     |\r\n     *      toString                        |\r\n     *      valueOf                         |\r\n     *\r\n     */\n    var BigNumber,\n        isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n        mathceil = Math.ceil,\n        mathfloor = Math.floor,\n        bignumberError = '[BigNumber Error] ',\n        tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n        BASE = 1e14,\n        LOG_BASE = 14,\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,\n        // 2^53 - 1\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n        SQRT_BASE = 1e7,\n        // EDITABLE\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n    MAX = 1E9; // 0 to MAX_INT32\n\n    /*\r\n     * Create and return a BigNumber constructor.\r\n     */\n\n    function clone(configObject) {\n      var div,\n          convertBase,\n          parseNumeric,\n          P = BigNumber.prototype = {\n        constructor: BigNumber,\n        toString: null,\n        valueOf: null\n      },\n          ONE = new BigNumber(1),\n          //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n      // The default values below must be integers within the inclusive ranges stated.\n      // The values can also be changed at run-time using BigNumber.set.\n      // The maximum number of decimal places for operations involving division.\n      DECIMAL_PLACES = 20,\n          // 0 to MAX\n      // The rounding mode used when rounding to the above decimal places, and when using\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n      // UP         0 Away from zero.\n      // DOWN       1 Towards zero.\n      // CEIL       2 Towards +Infinity.\n      // FLOOR      3 Towards -Infinity.\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n      ROUNDING_MODE = 4,\n          // 0 to 8\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n      // The exponent value at and beneath which toString returns exponential notation.\n      // Number type: -7\n      TO_EXP_NEG = -7,\n          // 0 to -MAX\n      // The exponent value at and above which toString returns exponential notation.\n      // Number type: 21\n      TO_EXP_POS = 21,\n          // 0 to MAX\n      // RANGE : [MIN_EXP, MAX_EXP]\n      // The minimum exponent value, beneath which underflow to zero occurs.\n      // Number type: -324  (5e-324)\n      MIN_EXP = -1e7,\n          // -1 to -MAX\n      // The maximum exponent value, above which overflow to Infinity occurs.\n      // Number type:  308  (1.7976931348623157e+308)\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n      MAX_EXP = 1e7,\n          // 1 to MAX\n      // Whether to use cryptographically-secure random number generation, if available.\n      CRYPTO = false,\n          // true or false\n      // The modulo mode used when calculating the modulus: a mod n.\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n      // The remainder (r) is calculated as: r = a - n * q.\n      //\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\n      // DOWN      1 The remainder has the same sign as the dividend.\n      //             This modulo mode is commonly known as 'truncated division' and is\n      //             equivalent to (a % n) in JavaScript.\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n      //             The remainder is always positive.\n      //\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n      // modes are commonly used for the modulus operation.\n      // Although the other rounding modes can also be used, they may not give useful results.\n      MODULO_MODE = 1,\n          // 0 to 9\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\n      POW_PRECISION = 0,\n          // 0 to MAX\n      // The format specification used by the BigNumber.prototype.toFormat method.\n      FORMAT = {\n        prefix: '',\n        groupSize: 3,\n        secondaryGroupSize: 0,\n        groupSeparator: ',',\n        decimalSeparator: '.',\n        fractionGroupSize: 0,\n        fractionGroupSeparator: '\\xA0',\n        // non-breaking space\n        suffix: ''\n      },\n          // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\n      // '-', '.', whitespace, or repeated character.\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'; //------------------------------------------------------------------------------------------\n      // CONSTRUCTOR\n\n      /*\r\n       * The BigNumber constructor and exported function.\r\n       * Create and return a new instance of a BigNumber object.\r\n       *\r\n       * v {number|string|BigNumber} A numeric value.\r\n       * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n       */\n\n      function BigNumber(v, b) {\n        var alphabet,\n            c,\n            caseChanged,\n            e,\n            i,\n            isNum,\n            len,\n            str,\n            x = this; // Enable constructor call without `new`.\n\n        if (!(x instanceof BigNumber)) return new BigNumber(v, b);\n\n        if (b == null) {\n          if (v && v._isBigNumber === true) {\n            x.s = v.s;\n\n            if (!v.c || v.e > MAX_EXP) {\n              x.c = x.e = null;\n            } else if (v.e < MIN_EXP) {\n              x.c = [x.e = 0];\n            } else {\n              x.e = v.e;\n              x.c = v.c.slice();\n            }\n\n            return;\n          }\n\n          if ((isNum = typeof v == 'number') && v * 0 == 0) {\n            // Use `1 / n` to handle minus zero also.\n            x.s = 1 / v < 0 ? (v = -v, -1) : 1; // Fast path for integers, where n < 2147483648 (2**31).\n\n            if (v === ~~v) {\n              for (e = 0, i = v; i >= 10; i /= 10, e++);\n\n              if (e > MAX_EXP) {\n                x.c = x.e = null;\n              } else {\n                x.e = e;\n                x.c = [v];\n              }\n\n              return;\n            }\n\n            str = String(v);\n          } else {\n            if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\n            x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n          } // Decimal point?\n\n\n          if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?\n\n          if ((i = str.search(/e/i)) > 0) {\n            // Determine exponent.\n            if (e < 0) e = i;\n            e += +str.slice(i + 1);\n            str = str.substring(0, i);\n          } else if (e < 0) {\n            // Integer.\n            e = str.length;\n          }\n        } else {\n          // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n          intCheck(b, 2, ALPHABET.length, 'Base'); // Allow exponential notation to be used with base 10 argument, while\n          // also rounding to DECIMAL_PLACES as with other bases.\n\n          if (b == 10) {\n            x = new BigNumber(v);\n            return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n          }\n\n          str = String(v);\n\n          if (isNum = typeof v == 'number') {\n            // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n            if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\n            x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n            if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n              throw Error(tooManyDigits + v);\n            }\n          } else {\n            x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n          }\n\n          alphabet = ALPHABET.slice(0, b);\n          e = i = 0; // Check that str is a valid base b number.\n          // Don't use RegExp, so alphabet can contain special characters.\n\n          for (len = str.length; i < len; i++) {\n            if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n              if (c == '.') {\n                // If '.' is not the first character and it has not be found before.\n                if (i > e) {\n                  e = len;\n                  continue;\n                }\n              } else if (!caseChanged) {\n                // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n                if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {\n                  caseChanged = true;\n                  i = -1;\n                  e = 0;\n                  continue;\n                }\n              }\n\n              return parseNumeric(x, String(v), isNum, b);\n            }\n          } // Prevent later check for length on converted number.\n\n\n          isNum = false;\n          str = convertBase(str, b, 10, x.s); // Decimal point?\n\n          if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;\n        } // Determine leading zeros.\n\n\n        for (i = 0; str.charCodeAt(i) === 48; i++); // Determine trailing zeros.\n\n\n        for (len = str.length; str.charCodeAt(--len) === 48;);\n\n        if (str = str.slice(i, ++len)) {\n          len -= i; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n          if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\n            throw Error(tooManyDigits + x.s * v);\n          } // Overflow?\n\n\n          if ((e = e - i - 1) > MAX_EXP) {\n            // Infinity.\n            x.c = x.e = null; // Underflow?\n          } else if (e < MIN_EXP) {\n            // Zero.\n            x.c = [x.e = 0];\n          } else {\n            x.e = e;\n            x.c = []; // Transform base\n            // e is the base 10 exponent.\n            // i is where to slice str to get the first element of the coefficient array.\n\n            i = (e + 1) % LOG_BASE;\n            if (e < 0) i += LOG_BASE; // i < 1\n\n            if (i < len) {\n              if (i) x.c.push(+str.slice(0, i));\n\n              for (len -= LOG_BASE; i < len;) {\n                x.c.push(+str.slice(i, i += LOG_BASE));\n              }\n\n              i = LOG_BASE - (str = str.slice(i)).length;\n            } else {\n              i -= len;\n            }\n\n            for (; i--; str += '0');\n\n            x.c.push(+str);\n          }\n        } else {\n          // Zero.\n          x.c = [x.e = 0];\n        }\n      } // CONSTRUCTOR PROPERTIES\n\n\n      BigNumber.clone = clone;\n      BigNumber.ROUND_UP = 0;\n      BigNumber.ROUND_DOWN = 1;\n      BigNumber.ROUND_CEIL = 2;\n      BigNumber.ROUND_FLOOR = 3;\n      BigNumber.ROUND_HALF_UP = 4;\n      BigNumber.ROUND_HALF_DOWN = 5;\n      BigNumber.ROUND_HALF_EVEN = 6;\n      BigNumber.ROUND_HALF_CEIL = 7;\n      BigNumber.ROUND_HALF_FLOOR = 8;\n      BigNumber.EUCLID = 9;\n      /*\r\n       * Configure infrequently-changing library-wide settings.\r\n       *\r\n       * Accept an object with the following optional properties (if the value of a property is\r\n       * a number, it must be an integer within the inclusive range stated):\r\n       *\r\n       *   DECIMAL_PLACES   {number}           0 to MAX\r\n       *   ROUNDING_MODE    {number}           0 to 8\r\n       *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n       *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n       *   CRYPTO           {boolean}          true or false\r\n       *   MODULO_MODE      {number}           0 to 9\r\n       *   POW_PRECISION       {number}           0 to MAX\r\n       *   ALPHABET         {string}           A string of two or more unique characters which does\r\n       *                                       not contain '.'.\r\n       *   FORMAT           {object}           An object with some of the following properties:\r\n       *     prefix                 {string}\r\n       *     groupSize              {number}\r\n       *     secondaryGroupSize     {number}\r\n       *     groupSeparator         {string}\r\n       *     decimalSeparator       {string}\r\n       *     fractionGroupSize      {number}\r\n       *     fractionGroupSeparator {string}\r\n       *     suffix                 {string}\r\n       *\r\n       * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n       *\r\n       * E.g.\r\n       * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n       *\r\n       * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n       *\r\n       * Return an object with the properties current values.\r\n       */\n\n      BigNumber.config = BigNumber.set = function (obj) {\n        var p, v;\n\n        if (obj != null) {\n          if (typeof obj == 'object') {\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n            // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n            if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n              v = obj[p];\n              intCheck(v, 0, MAX, p);\n              DECIMAL_PLACES = v;\n            } // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n            // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n              v = obj[p];\n              intCheck(v, 0, 8, p);\n              ROUNDING_MODE = v;\n            } // EXPONENTIAL_AT {number|number[]}\n            // Integer, -MAX to MAX inclusive or\n            // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n            // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n              v = obj[p];\n\n              if (v && v.pop) {\n                intCheck(v[0], -MAX, 0, p);\n                intCheck(v[1], 0, MAX, p);\n                TO_EXP_NEG = v[0];\n                TO_EXP_POS = v[1];\n              } else {\n                intCheck(v, -MAX, MAX, p);\n                TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n              }\n            } // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n            // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'RANGE')) {\n              v = obj[p];\n\n              if (v && v.pop) {\n                intCheck(v[0], -MAX, -1, p);\n                intCheck(v[1], 1, MAX, p);\n                MIN_EXP = v[0];\n                MAX_EXP = v[1];\n              } else {\n                intCheck(v, -MAX, MAX, p);\n\n                if (v) {\n                  MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n                } else {\n                  throw Error(bignumberError + p + ' cannot be zero: ' + v);\n                }\n              }\n            } // CRYPTO {boolean} true or false.\n            // '[BigNumber Error] CRYPTO not true or false: {v}'\n            // '[BigNumber Error] crypto unavailable'\n\n\n            if (obj.hasOwnProperty(p = 'CRYPTO')) {\n              v = obj[p];\n\n              if (v === !!v) {\n                if (v) {\n                  if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                    CRYPTO = v;\n                  } else {\n                    CRYPTO = !v;\n                    throw Error(bignumberError + 'crypto unavailable');\n                  }\n                } else {\n                  CRYPTO = v;\n                }\n              } else {\n                throw Error(bignumberError + p + ' not true or false: ' + v);\n              }\n            } // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n            // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n              v = obj[p];\n              intCheck(v, 0, 9, p);\n              MODULO_MODE = v;\n            } // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n            // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n              v = obj[p];\n              intCheck(v, 0, MAX, p);\n              POW_PRECISION = v;\n            } // FORMAT {object}\n            // '[BigNumber Error] FORMAT not an object: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'FORMAT')) {\n              v = obj[p];\n              if (typeof v == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);\n            } // ALPHABET {string}\n            // '[BigNumber Error] ALPHABET invalid: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'ALPHABET')) {\n              v = obj[p]; // Disallow if less than two characters,\n              // or if it contains '+', '-', '.', whitespace, or a repeated character.\n\n              if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\n                ALPHABET = v;\n              } else {\n                throw Error(bignumberError + p + ' invalid: ' + v);\n              }\n            }\n          } else {\n            // '[BigNumber Error] Object expected: {v}'\n            throw Error(bignumberError + 'Object expected: ' + obj);\n          }\n        }\n\n        return {\n          DECIMAL_PLACES: DECIMAL_PLACES,\n          ROUNDING_MODE: ROUNDING_MODE,\n          EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n          RANGE: [MIN_EXP, MAX_EXP],\n          CRYPTO: CRYPTO,\n          MODULO_MODE: MODULO_MODE,\n          POW_PRECISION: POW_PRECISION,\n          FORMAT: FORMAT,\n          ALPHABET: ALPHABET\n        };\n      };\n      /*\r\n       * Return true if v is a BigNumber instance, otherwise return false.\r\n       *\r\n       * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n       *\r\n       * v {any}\r\n       *\r\n       * '[BigNumber Error] Invalid BigNumber: {v}'\r\n       */\n\n\n      BigNumber.isBigNumber = function (v) {\n        if (!v || v._isBigNumber !== true) return false;\n        if (!BigNumber.DEBUG) return true;\n        var i,\n            n,\n            c = v.c,\n            e = v.e,\n            s = v.s;\n\n        out: if ({}.toString.call(c) == '[object Array]') {\n          if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\n            // If the first element is zero, the BigNumber value must be zero.\n            if (c[0] === 0) {\n              if (e === 0 && c.length === 1) return true;\n              break out;\n            } // Calculate number of digits that c[0] should have, based on the exponent.\n\n\n            i = (e + 1) % LOG_BASE;\n            if (i < 1) i += LOG_BASE; // Calculate number of digits of c[0].\n            //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\n\n            if (String(c[0]).length == i) {\n              for (i = 0; i < c.length; i++) {\n                n = c[i];\n                if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\n              } // Last element cannot be zero, unless it is the only element.\n\n\n              if (n !== 0) return true;\n            }\n          } // Infinity/NaN\n\n        } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\n          return true;\n        }\n\n        throw Error(bignumberError + 'Invalid BigNumber: ' + v);\n      };\n      /*\r\n       * Return a new BigNumber whose value is the maximum of the arguments.\r\n       *\r\n       * arguments {number|string|BigNumber}\r\n       */\n\n\n      BigNumber.maximum = BigNumber.max = function () {\n        return maxOrMin(arguments, P.lt);\n      };\n      /*\r\n       * Return a new BigNumber whose value is the minimum of the arguments.\r\n       *\r\n       * arguments {number|string|BigNumber}\r\n       */\n\n\n      BigNumber.minimum = BigNumber.min = function () {\n        return maxOrMin(arguments, P.gt);\n      };\n      /*\r\n       * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n       * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n       * zeros are produced).\r\n       *\r\n       * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n       * '[BigNumber Error] crypto unavailable'\r\n       */\n\n\n      BigNumber.random = function () {\n        var pow2_53 = 0x20000000000000; // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n        // Check if Math.random() produces more than 32 bits of randomness.\n        // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n        // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n\n        var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n          return mathfloor(Math.random() * pow2_53);\n        } : function () {\n          return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n        };\n        return function (dp) {\n          var a,\n              b,\n              e,\n              k,\n              v,\n              i = 0,\n              c = [],\n              rand = new BigNumber(ONE);\n          if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);\n          k = mathceil(dp / LOG_BASE);\n\n          if (CRYPTO) {\n            // Browsers supporting crypto.getRandomValues.\n            if (crypto.getRandomValues) {\n              a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n              for (; i < k;) {\n                // 53 bits:\n                // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n                // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n                // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n                //                                     11111 11111111 11111111\n                // 0x20000 is 2^21.\n                v = a[i] * 0x20000 + (a[i + 1] >>> 11); // Rejection sampling:\n                // 0 <= v < 9007199254740992\n                // Probability that v >= 9e15, is\n                // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n\n                if (v >= 9e15) {\n                  b = crypto.getRandomValues(new Uint32Array(2));\n                  a[i] = b[0];\n                  a[i + 1] = b[1];\n                } else {\n                  // 0 <= v <= 8999999999999999\n                  // 0 <= (v % 1e14) <= 99999999999999\n                  c.push(v % 1e14);\n                  i += 2;\n                }\n              }\n\n              i = k / 2; // Node.js supporting crypto.randomBytes.\n            } else if (crypto.randomBytes) {\n              // buffer\n              a = crypto.randomBytes(k *= 7);\n\n              for (; i < k;) {\n                // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n                // 0x100000000 is 2^32, 0x1000000 is 2^24\n                // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n                // 0 <= v < 9007199254740992\n                v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n                if (v >= 9e15) {\n                  crypto.randomBytes(7).copy(a, i);\n                } else {\n                  // 0 <= (v % 1e14) <= 99999999999999\n                  c.push(v % 1e14);\n                  i += 7;\n                }\n              }\n\n              i = k / 7;\n            } else {\n              CRYPTO = false;\n              throw Error(bignumberError + 'crypto unavailable');\n            }\n          } // Use Math.random.\n\n\n          if (!CRYPTO) {\n            for (; i < k;) {\n              v = random53bitInt();\n              if (v < 9e15) c[i++] = v % 1e14;\n            }\n          }\n\n          k = c[--i];\n          dp %= LOG_BASE; // Convert trailing digits to zeros according to dp.\n\n          if (k && dp) {\n            v = POWS_TEN[LOG_BASE - dp];\n            c[i] = mathfloor(k / v) * v;\n          } // Remove trailing elements which are zero.\n\n\n          for (; c[i] === 0; c.pop(), i--); // Zero?\n\n\n          if (i < 0) {\n            c = [e = 0];\n          } else {\n            // Remove leading elements which are zero and adjust exponent accordingly.\n            for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE); // Count the digits of the first element of c to determine leading zeros, and...\n\n\n            for (i = 1, v = c[0]; v >= 10; v /= 10, i++); // adjust the exponent accordingly.\n\n\n            if (i < LOG_BASE) e -= LOG_BASE - i;\n          }\n\n          rand.e = e;\n          rand.c = c;\n          return rand;\n        };\n      }();\n      /*\r\n       * Return a BigNumber whose value is the sum of the arguments.\r\n       *\r\n       * arguments {number|string|BigNumber}\r\n       */\n\n\n      BigNumber.sum = function () {\n        var i = 1,\n            args = arguments,\n            sum = new BigNumber(args[0]);\n\n        for (; i < args.length;) sum = sum.plus(args[i++]);\n\n        return sum;\n      }; // PRIVATE FUNCTIONS\n      // Called by BigNumber and BigNumber.prototype.toString.\n\n\n      convertBase = function () {\n        var decimal = '0123456789';\n        /*\r\n         * Convert string of baseIn to an array of numbers of baseOut.\r\n         * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n         * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n         */\n\n        function toBaseOut(str, baseIn, baseOut, alphabet) {\n          var j,\n              arr = [0],\n              arrL,\n              i = 0,\n              len = str.length;\n\n          for (; i < len;) {\n            for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n\n            arr[0] += alphabet.indexOf(str.charAt(i++));\n\n            for (j = 0; j < arr.length; j++) {\n              if (arr[j] > baseOut - 1) {\n                if (arr[j + 1] == null) arr[j + 1] = 0;\n                arr[j + 1] += arr[j] / baseOut | 0;\n                arr[j] %= baseOut;\n              }\n            }\n          }\n\n          return arr.reverse();\n        } // Convert a numeric string of baseIn to a numeric string of baseOut.\n        // If the caller is toString, we are converting from base 10 to baseOut.\n        // If the caller is BigNumber, we are converting from baseIn to base 10.\n\n\n        return function (str, baseIn, baseOut, sign, callerIsToString) {\n          var alphabet,\n              d,\n              e,\n              k,\n              r,\n              x,\n              xc,\n              y,\n              i = str.indexOf('.'),\n              dp = DECIMAL_PLACES,\n              rm = ROUNDING_MODE; // Non-integer.\n\n          if (i >= 0) {\n            k = POW_PRECISION; // Unlimited precision.\n\n            POW_PRECISION = 0;\n            str = str.replace('.', '');\n            y = new BigNumber(baseIn);\n            x = y.pow(str.length - i);\n            POW_PRECISION = k; // Convert str as if an integer, then restore the fraction part by dividing the\n            // result by its base raised to a power.\n\n            y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);\n            y.e = y.c.length;\n          } // Convert the number as integer.\n\n\n          xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET)); // xc now represents str as an integer and converted to baseOut. e is the exponent.\n\n          e = k = xc.length; // Remove trailing zeros.\n\n          for (; xc[--k] == 0; xc.pop()); // Zero?\n\n\n          if (!xc[0]) return alphabet.charAt(0); // Does str represent an integer? If so, no need for the division.\n\n          if (i < 0) {\n            --e;\n          } else {\n            x.c = xc;\n            x.e = e; // The sign is needed for correct rounding.\n\n            x.s = sign;\n            x = div(x, y, dp, rm, baseOut);\n            xc = x.c;\n            r = x.r;\n            e = x.e;\n          } // xc now represents str converted to baseOut.\n          // THe index of the rounding digit.\n\n\n          d = e + dp + 1; // The rounding digit: the digit to the right of the digit that may be rounded up.\n\n          i = xc[d]; // Look at the rounding digits and mode to determine whether to round up.\n\n          k = baseOut / 2;\n          r = r || d < 0 || xc[d + 1] != null;\n          r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7)); // If the index of the rounding digit is not greater than zero, or xc represents\n          // zero, then the result of the base conversion is zero or, if rounding up, a value\n          // such as 0.00001.\n\n          if (d < 1 || !xc[0]) {\n            // 1^-dp or 0\n            str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\n          } else {\n            // Truncate xc to the required number of decimal places.\n            xc.length = d; // Round up?\n\n            if (r) {\n              // Rounding up may mean the previous digit has to be rounded up and so on.\n              for (--baseOut; ++xc[--d] > baseOut;) {\n                xc[d] = 0;\n\n                if (!d) {\n                  ++e;\n                  xc = [1].concat(xc);\n                }\n              }\n            } // Determine trailing zeros.\n\n\n            for (k = xc.length; !xc[--k];); // E.g. [4, 11, 15] becomes 4bf.\n\n\n            for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++])); // Add leading zeros, decimal point and trailing zeros as required.\n\n\n            str = toFixedPoint(str, e, alphabet.charAt(0));\n          } // The caller will add the sign.\n\n\n          return str;\n        };\n      }(); // Perform division in the specified base. Called by div and convertBase.\n\n\n      div = function () {\n        // Assume non-zero x and k.\n        function multiply(x, k, base) {\n          var m,\n              temp,\n              xlo,\n              xhi,\n              carry = 0,\n              i = x.length,\n              klo = k % SQRT_BASE,\n              khi = k / SQRT_BASE | 0;\n\n          for (x = x.slice(); i--;) {\n            xlo = x[i] % SQRT_BASE;\n            xhi = x[i] / SQRT_BASE | 0;\n            m = khi * xlo + xhi * klo;\n            temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n            carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n            x[i] = temp % base;\n          }\n\n          if (carry) x = [carry].concat(x);\n          return x;\n        }\n\n        function compare(a, b, aL, bL) {\n          var i, cmp;\n\n          if (aL != bL) {\n            cmp = aL > bL ? 1 : -1;\n          } else {\n            for (i = cmp = 0; i < aL; i++) {\n              if (a[i] != b[i]) {\n                cmp = a[i] > b[i] ? 1 : -1;\n                break;\n              }\n            }\n          }\n\n          return cmp;\n        }\n\n        function subtract(a, b, aL, base) {\n          var i = 0; // Subtract b from a.\n\n          for (; aL--;) {\n            a[aL] -= i;\n            i = a[aL] < b[aL] ? 1 : 0;\n            a[aL] = i * base + a[aL] - b[aL];\n          } // Remove leading zeros.\n\n\n          for (; !a[0] && a.length > 1; a.splice(0, 1));\n        } // x: dividend, y: divisor.\n\n\n        return function (x, y, dp, rm, base) {\n          var cmp,\n              e,\n              i,\n              more,\n              n,\n              prod,\n              prodL,\n              q,\n              qc,\n              rem,\n              remL,\n              rem0,\n              xi,\n              xL,\n              yc0,\n              yL,\n              yz,\n              s = x.s == y.s ? 1 : -1,\n              xc = x.c,\n              yc = y.c; // Either NaN, Infinity or 0?\n\n          if (!xc || !xc[0] || !yc || !yc[0]) {\n            return new BigNumber( // Return NaN if either NaN, or both Infinity or 0.\n            !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n          }\n\n          q = new BigNumber(s);\n          qc = q.c = [];\n          e = x.e - y.e;\n          s = dp + e + 1;\n\n          if (!base) {\n            base = BASE;\n            e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n            s = s / LOG_BASE | 0;\n          } // Result exponent may be one less then the current value of e.\n          // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n\n\n          for (i = 0; yc[i] == (xc[i] || 0); i++);\n\n          if (yc[i] > (xc[i] || 0)) e--;\n\n          if (s < 0) {\n            qc.push(1);\n            more = true;\n          } else {\n            xL = xc.length;\n            yL = yc.length;\n            i = 0;\n            s += 2; // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n            n = mathfloor(base / (yc[0] + 1)); // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n            // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n\n            if (n > 1) {\n              yc = multiply(yc, n, base);\n              xc = multiply(xc, n, base);\n              yL = yc.length;\n              xL = xc.length;\n            }\n\n            xi = yL;\n            rem = xc.slice(0, yL);\n            remL = rem.length; // Add zeros to make remainder as long as divisor.\n\n            for (; remL < yL; rem[remL++] = 0);\n\n            yz = yc.slice();\n            yz = [0].concat(yz);\n            yc0 = yc[0];\n            if (yc[1] >= base / 2) yc0++; // Not necessary, but to prevent trial digit n > base, when using base 3.\n            // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n            do {\n              n = 0; // Compare divisor and remainder.\n\n              cmp = compare(yc, rem, yL, remL); // If divisor < remainder.\n\n              if (cmp < 0) {\n                // Calculate trial digit, n.\n                rem0 = rem[0];\n                if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // n is how many times the divisor goes into the current remainder.\n\n                n = mathfloor(rem0 / yc0); //  Algorithm:\n                //  product = divisor multiplied by trial digit (n).\n                //  Compare product and remainder.\n                //  If product is greater than remainder:\n                //    Subtract divisor from product, decrement trial digit.\n                //  Subtract product from remainder.\n                //  If product was less than remainder at the last compare:\n                //    Compare new remainder and divisor.\n                //    If remainder is greater than divisor:\n                //      Subtract divisor from remainder, increment trial digit.\n\n                if (n > 1) {\n                  // n may be > base only when base is 3.\n                  if (n >= base) n = base - 1; // product = divisor * trial digit.\n\n                  prod = multiply(yc, n, base);\n                  prodL = prod.length;\n                  remL = rem.length; // Compare product and remainder.\n                  // If product > remainder then trial digit n too high.\n                  // n is 1 too high about 5% of the time, and is not known to have\n                  // ever been more than 1 too high.\n\n                  while (compare(prod, rem, prodL, remL) == 1) {\n                    n--; // Subtract divisor from product.\n\n                    subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                    prodL = prod.length;\n                    cmp = 1;\n                  }\n                } else {\n                  // n is 0 or 1, cmp is -1.\n                  // If n is 0, there is no need to compare yc and rem again below,\n                  // so change cmp to 1 to avoid it.\n                  // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                  if (n == 0) {\n                    // divisor < remainder, so n must be at least 1.\n                    cmp = n = 1;\n                  } // product = divisor\n\n\n                  prod = yc.slice();\n                  prodL = prod.length;\n                }\n\n                if (prodL < remL) prod = [0].concat(prod); // Subtract product from remainder.\n\n                subtract(rem, prod, remL, base);\n                remL = rem.length; // If product was < remainder.\n\n                if (cmp == -1) {\n                  // Compare divisor and new remainder.\n                  // If divisor < new remainder, subtract divisor from remainder.\n                  // Trial digit n too low.\n                  // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                  while (compare(yc, rem, yL, remL) < 1) {\n                    n++; // Subtract divisor from remainder.\n\n                    subtract(rem, yL < remL ? yz : yc, remL, base);\n                    remL = rem.length;\n                  }\n                }\n              } else if (cmp === 0) {\n                n++;\n                rem = [0];\n              } // else cmp === 1 and n will be 0\n              // Add the next digit, n, to the result array.\n\n\n              qc[i++] = n; // Update the remainder.\n\n              if (rem[0]) {\n                rem[remL++] = xc[xi] || 0;\n              } else {\n                rem = [xc[xi]];\n                remL = 1;\n              }\n            } while ((xi++ < xL || rem[0] != null) && s--);\n\n            more = rem[0] != null; // Leading zero?\n\n            if (!qc[0]) qc.splice(0, 1);\n          }\n\n          if (base == BASE) {\n            // To calculate q.e, first get the number of digits of qc[0].\n            for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n\n            round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more); // Caller is convertBase.\n          } else {\n            q.e = e;\n            q.r = +more;\n          }\n\n          return q;\n        };\n      }();\n      /*\r\n       * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n       * notation rounded to the specified decimal places or significant digits.\r\n       *\r\n       * n: a BigNumber.\r\n       * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n       * rm: the rounding mode.\r\n       * id: 1 (toExponential) or 2 (toPrecision).\r\n       */\n\n\n      function format(n, i, rm, id) {\n        var c0, e, ne, len, str;\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        if (!n.c) return n.toString();\n        c0 = n.c[0];\n        ne = n.e;\n\n        if (i == null) {\n          str = coeffToString(n.c);\n          str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');\n        } else {\n          n = round(new BigNumber(n), i, rm); // n.e may have changed if the value was rounded up.\n\n          e = n.e;\n          str = coeffToString(n.c);\n          len = str.length; // toPrecision returns exponential notation if the number of significant digits\n          // specified is less than the number of digits necessary to represent the integer\n          // part of the value in fixed-point notation.\n          // Exponential notation.\n\n          if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n            // Append zeros?\n            for (; len < i; str += '0', len++);\n\n            str = toExponential(str, e); // Fixed-point notation.\n          } else {\n            i -= ne;\n            str = toFixedPoint(str, e, '0'); // Append zeros?\n\n            if (e + 1 > len) {\n              if (--i > 0) for (str += '.'; i--; str += '0');\n            } else {\n              i += e - len;\n\n              if (i > 0) {\n                if (e + 1 == len) str += '.';\n\n                for (; i--; str += '0');\n              }\n            }\n          }\n        }\n\n        return n.s < 0 && c0 ? '-' + str : str;\n      } // Handle BigNumber.max and BigNumber.min.\n\n\n      function maxOrMin(args, method) {\n        var n,\n            i = 1,\n            m = new BigNumber(args[0]);\n\n        for (; i < args.length; i++) {\n          n = new BigNumber(args[i]); // If any number is NaN, return NaN.\n\n          if (!n.s) {\n            m = n;\n            break;\n          } else if (method.call(m, n)) {\n            m = n;\n          }\n        }\n\n        return m;\n      }\n      /*\r\n       * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n       * Called by minus, plus and times.\r\n       */\n\n\n      function normalise(n, c, e) {\n        var i = 1,\n            j = c.length; // Remove trailing zeros.\n\n        for (; !c[--j]; c.pop()); // Calculate the base 10 exponent. First get the number of digits of c[0].\n\n\n        for (j = c[0]; j >= 10; j /= 10, i++); // Overflow?\n\n\n        if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n          // Infinity.\n          n.c = n.e = null; // Underflow?\n        } else if (e < MIN_EXP) {\n          // Zero.\n          n.c = [n.e = 0];\n        } else {\n          n.e = e;\n          n.c = c;\n        }\n\n        return n;\n      } // Handle values that fail the validity test in BigNumber.\n\n\n      parseNumeric = function () {\n        var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n            dotAfter = /^([^.]+)\\.$/,\n            dotBefore = /^\\.([^.]+)$/,\n            isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n            whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n        return function (x, str, isNum, b) {\n          var base,\n              s = isNum ? str : str.replace(whitespaceOrPlus, ''); // No exception on ±Infinity or NaN.\n\n          if (isInfinityOrNaN.test(s)) {\n            x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n          } else {\n            if (!isNum) {\n              // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n              s = s.replace(basePrefix, function (m, p1, p2) {\n                base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n                return !b || b == base ? p1 : m;\n              });\n\n              if (b) {\n                base = b; // E.g. '1.' to '1', '.1' to '0.1'\n\n                s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n              }\n\n              if (str != s) return new BigNumber(s, base);\n            } // '[BigNumber Error] Not a number: {n}'\n            // '[BigNumber Error] Not a base {b} number: {n}'\n\n\n            if (BigNumber.DEBUG) {\n              throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n            } // NaN\n\n\n            x.s = null;\n          }\n\n          x.c = x.e = null;\n        };\n      }();\n      /*\r\n       * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n       * If r is truthy, it is known that there are more digits after the rounding digit.\r\n       */\n\n\n      function round(x, sd, rm, r) {\n        var d,\n            i,\n            j,\n            k,\n            n,\n            ni,\n            rd,\n            xc = x.c,\n            pows10 = POWS_TEN; // if x is not Infinity or NaN...\n\n        if (xc) {\n          // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n          // n is a base 1e14 number, the value of the element of array x.c containing rd.\n          // ni is the index of n within x.c.\n          // d is the number of digits of n.\n          // i is the index of rd within n including leading zeros.\n          // j is the actual index of rd within n (if < 0, rd is a leading zero).\n          out: {\n            // Get the number of digits of the first element of xc.\n            for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n\n            i = sd - d; // If the rounding digit is in the first element of xc...\n\n            if (i < 0) {\n              i += LOG_BASE;\n              j = sd;\n              n = xc[ni = 0]; // Get the rounding digit at index j of n.\n\n              rd = n / pows10[d - j - 1] % 10 | 0;\n            } else {\n              ni = mathceil((i + 1) / LOG_BASE);\n\n              if (ni >= xc.length) {\n                if (r) {\n                  // Needed by sqrt.\n                  for (; xc.length <= ni; xc.push(0));\n\n                  n = rd = 0;\n                  d = 1;\n                  i %= LOG_BASE;\n                  j = i - LOG_BASE + 1;\n                } else {\n                  break out;\n                }\n              } else {\n                n = k = xc[ni]; // Get the number of digits of n.\n\n                for (d = 1; k >= 10; k /= 10, d++); // Get the index of rd within n.\n\n\n                i %= LOG_BASE; // Get the index of rd within n, adjusted for leading zeros.\n                // The number of leading zeros of n is given by LOG_BASE - d.\n\n                j = i - LOG_BASE + d; // Get the rounding digit at index j of n.\n\n                rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n              }\n            }\n\n            r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?\n            // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n            // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n            xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n            r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.\n            (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n\n            if (sd < 1 || !xc[0]) {\n              xc.length = 0;\n\n              if (r) {\n                // Convert sd to decimal places.\n                sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n\n                xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n                x.e = -sd || 0;\n              } else {\n                // Zero.\n                xc[0] = x.e = 0;\n              }\n\n              return x;\n            } // Remove excess digits.\n\n\n            if (i == 0) {\n              xc.length = ni;\n              k = 1;\n              ni--;\n            } else {\n              xc.length = ni + 1;\n              k = pows10[LOG_BASE - i]; // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n              // j > 0 means i > number of leading zeros of n.\n\n              xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n            } // Round up?\n\n\n            if (r) {\n              for (;;) {\n                // If the digit to be rounded up is in the first element of xc...\n                if (ni == 0) {\n                  // i will be the length of xc[0] before k is added.\n                  for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n\n                  j = xc[0] += k;\n\n                  for (k = 1; j >= 10; j /= 10, k++); // if i != k the length has increased.\n\n\n                  if (i != k) {\n                    x.e++;\n                    if (xc[0] == BASE) xc[0] = 1;\n                  }\n\n                  break;\n                } else {\n                  xc[ni] += k;\n                  if (xc[ni] != BASE) break;\n                  xc[ni--] = 0;\n                  k = 1;\n                }\n              }\n            } // Remove trailing zeros.\n\n\n            for (i = xc.length; xc[--i] === 0; xc.pop());\n          } // Overflow? Infinity.\n\n\n          if (x.e > MAX_EXP) {\n            x.c = x.e = null; // Underflow? Zero.\n          } else if (x.e < MIN_EXP) {\n            x.c = [x.e = 0];\n          }\n        }\n\n        return x;\n      }\n\n      function valueOf(n) {\n        var str,\n            e = n.e;\n        if (e === null) return n.toString();\n        str = coeffToString(n.c);\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');\n        return n.s < 0 ? '-' + str : str;\n      } // PROTOTYPE/INSTANCE METHODS\n\n      /*\r\n       * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n       */\n\n\n      P.absoluteValue = P.abs = function () {\n        var x = new BigNumber(this);\n        if (x.s < 0) x.s = 1;\n        return x;\n      };\n      /*\r\n       * Return\r\n       *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n       *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n       *   0 if they have the same value,\r\n       *   or null if the value of either is NaN.\r\n       */\n\n\n      P.comparedTo = function (y, b) {\n        return compare(this, new BigNumber(y, b));\n      };\n      /*\r\n       * If dp is undefined or null or true or false, return the number of decimal places of the\r\n       * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n       *\r\n       * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n       * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n       * ROUNDING_MODE if rm is omitted.\r\n       *\r\n       * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n       */\n\n\n      P.decimalPlaces = P.dp = function (dp, rm) {\n        var c,\n            n,\n            v,\n            x = this;\n\n        if (dp != null) {\n          intCheck(dp, 0, MAX);\n          if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n          return round(new BigNumber(x), dp + x.e + 1, rm);\n        }\n\n        if (!(c = x.c)) return null;\n        n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last number.\n\n        if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n        if (n < 0) n = 0;\n        return n;\n      };\n      /*\r\n       *  n / 0 = I\r\n       *  n / N = N\r\n       *  n / I = 0\r\n       *  0 / n = 0\r\n       *  0 / 0 = N\r\n       *  0 / N = N\r\n       *  0 / I = 0\r\n       *  N / n = N\r\n       *  N / 0 = N\r\n       *  N / N = N\r\n       *  N / I = N\r\n       *  I / n = I\r\n       *  I / 0 = I\r\n       *  I / N = N\r\n       *  I / I = N\r\n       *\r\n       * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n       * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n       */\n\n\n      P.dividedBy = P.div = function (y, b) {\n        return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n      };\n      /*\r\n       * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n       * BigNumber by the value of BigNumber(y, b).\r\n       */\n\n\n      P.dividedToIntegerBy = P.idiv = function (y, b) {\n        return div(this, new BigNumber(y, b), 0, 1);\n      };\n      /*\r\n       * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n       *\r\n       * If m is present, return the result modulo m.\r\n       * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n       * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n       *\r\n       * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n       * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n       *\r\n       * n {number|string|BigNumber} The exponent. An integer.\r\n       * [m] {number|string|BigNumber} The modulus.\r\n       *\r\n       * '[BigNumber Error] Exponent not an integer: {n}'\r\n       */\n\n\n      P.exponentiatedBy = P.pow = function (n, m) {\n        var half,\n            isModExp,\n            i,\n            k,\n            more,\n            nIsBig,\n            nIsNeg,\n            nIsOdd,\n            y,\n            x = this;\n        n = new BigNumber(n); // Allow NaN and ±Infinity, but not other non-integers.\n\n        if (n.c && !n.isInteger()) {\n          throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));\n        }\n\n        if (m != null) m = new BigNumber(m); // Exponent of MAX_SAFE_INTEGER is 15.\n\n        nIsBig = n.e > 14; // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n\n        if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n          // The sign of the result of pow when x is negative depends on the evenness of n.\n          // If +n overflows to ±Infinity, the evenness of n would be not be known.\n          y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\n          return m ? y.mod(m) : y;\n        }\n\n        nIsNeg = n.s < 0;\n\n        if (m) {\n          // x % m returns NaN if abs(m) is zero, or m is NaN.\n          if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n          isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n          if (isModExp) x = x.mod(m); // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n          // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n        } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 // [1, 240000000]\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 // [80000000000000]  [99999750000000]\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n          // If x is negative and n is odd, k = -0, else k = 0.\n          k = x.s < 0 && isOdd(n) ? -0 : 0; // If x >= 1, k = ±Infinity.\n\n          if (x.e > -1) k = 1 / k; // If n is negative return ±0, else return ±Infinity.\n\n          return new BigNumber(nIsNeg ? 1 / k : k);\n        } else if (POW_PRECISION) {\n          // Truncating each coefficient array to a length of k after each multiplication\n          // equates to truncating significant digits to POW_PRECISION + [28, 41],\n          // i.e. there will be a minimum of 28 guard digits retained.\n          k = mathceil(POW_PRECISION / LOG_BASE + 2);\n        }\n\n        if (nIsBig) {\n          half = new BigNumber(0.5);\n          if (nIsNeg) n.s = 1;\n          nIsOdd = isOdd(n);\n        } else {\n          i = Math.abs(+valueOf(n));\n          nIsOdd = i % 2;\n        }\n\n        y = new BigNumber(ONE); // Performs 54 loop iterations for n of 9007199254740991.\n\n        for (;;) {\n          if (nIsOdd) {\n            y = y.times(x);\n            if (!y.c) break;\n\n            if (k) {\n              if (y.c.length > k) y.c.length = k;\n            } else if (isModExp) {\n              y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n            }\n          }\n\n          if (i) {\n            i = mathfloor(i / 2);\n            if (i === 0) break;\n            nIsOdd = i % 2;\n          } else {\n            n = n.times(half);\n            round(n, n.e + 1, 1);\n\n            if (n.e > 14) {\n              nIsOdd = isOdd(n);\n            } else {\n              i = +valueOf(n);\n              if (i === 0) break;\n              nIsOdd = i % 2;\n            }\n          }\n\n          x = x.times(x);\n\n          if (k) {\n            if (x.c && x.c.length > k) x.c.length = k;\n          } else if (isModExp) {\n            x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n          }\n        }\n\n        if (isModExp) return y;\n        if (nIsNeg) y = ONE.div(y);\n        return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n      };\n      /*\r\n       * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n       * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n       *\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n       */\n\n\n      P.integerValue = function (rm) {\n        var n = new BigNumber(this);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        return round(n, n.e + 1, rm);\n      };\n      /*\r\n       * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n       * otherwise return false.\r\n       */\n\n\n      P.isEqualTo = P.eq = function (y, b) {\n        return compare(this, new BigNumber(y, b)) === 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n       */\n\n\n      P.isFinite = function () {\n        return !!this.c;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n       * otherwise return false.\r\n       */\n\n\n      P.isGreaterThan = P.gt = function (y, b) {\n        return compare(this, new BigNumber(y, b)) > 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is greater than or equal to the value of\r\n       * BigNumber(y, b), otherwise return false.\r\n       */\n\n\n      P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n        return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n       */\n\n\n      P.isInteger = function () {\n        return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n       * otherwise return false.\r\n       */\n\n\n      P.isLessThan = P.lt = function (y, b) {\n        return compare(this, new BigNumber(y, b)) < 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is less than or equal to the value of\r\n       * BigNumber(y, b), otherwise return false.\r\n       */\n\n\n      P.isLessThanOrEqualTo = P.lte = function (y, b) {\n        return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n       */\n\n\n      P.isNaN = function () {\n        return !this.s;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is negative, otherwise return false.\r\n       */\n\n\n      P.isNegative = function () {\n        return this.s < 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is positive, otherwise return false.\r\n       */\n\n\n      P.isPositive = function () {\n        return this.s > 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n       */\n\n\n      P.isZero = function () {\n        return !!this.c && this.c[0] == 0;\n      };\n      /*\r\n       *  n - 0 = n\r\n       *  n - N = N\r\n       *  n - I = -I\r\n       *  0 - n = -n\r\n       *  0 - 0 = 0\r\n       *  0 - N = N\r\n       *  0 - I = -I\r\n       *  N - n = N\r\n       *  N - 0 = N\r\n       *  N - N = N\r\n       *  N - I = N\r\n       *  I - n = I\r\n       *  I - 0 = I\r\n       *  I - N = N\r\n       *  I - I = N\r\n       *\r\n       * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n       * BigNumber(y, b).\r\n       */\n\n\n      P.minus = function (y, b) {\n        var i,\n            j,\n            t,\n            xLTy,\n            x = this,\n            a = x.s;\n        y = new BigNumber(y, b);\n        b = y.s; // Either NaN?\n\n        if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n        if (a != b) {\n          y.s = -b;\n          return x.plus(y);\n        }\n\n        var xe = x.e / LOG_BASE,\n            ye = y.e / LOG_BASE,\n            xc = x.c,\n            yc = y.c;\n\n        if (!xe || !ye) {\n          // Either Infinity?\n          if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN); // Either zero?\n\n          if (!xc[0] || !yc[0]) {\n            // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n            return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n            ROUNDING_MODE == 3 ? -0 : 0);\n          }\n        }\n\n        xe = bitFloor(xe);\n        ye = bitFloor(ye);\n        xc = xc.slice(); // Determine which is the bigger number.\n\n        if (a = xe - ye) {\n          if (xLTy = a < 0) {\n            a = -a;\n            t = xc;\n          } else {\n            ye = xe;\n            t = yc;\n          }\n\n          t.reverse(); // Prepend zeros to equalise exponents.\n\n          for (b = a; b--; t.push(0));\n\n          t.reverse();\n        } else {\n          // Exponents equal. Check digit by digit.\n          j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n          for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n              xLTy = xc[b] < yc[b];\n              break;\n            }\n          }\n        } // x < y? Point xc to the array of the bigger number.\n\n\n        if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n        b = (j = yc.length) - (i = xc.length); // Append zeros to xc if shorter.\n        // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n\n        if (b > 0) for (; b--; xc[i++] = 0);\n        b = BASE - 1; // Subtract yc from xc.\n\n        for (; j > a;) {\n          if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i]; xc[i] = b);\n\n            --xc[i];\n            xc[j] += BASE;\n          }\n\n          xc[j] -= yc[j];\n        } // Remove leading zeros and adjust exponent accordingly.\n\n\n        for (; xc[0] == 0; xc.splice(0, 1), --ye); // Zero?\n\n\n        if (!xc[0]) {\n          // Following IEEE 754 (2008) 6.3,\n          // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n          y.s = ROUNDING_MODE == 3 ? -1 : 1;\n          y.c = [y.e = 0];\n          return y;\n        } // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n        // for finite x and y.\n\n\n        return normalise(y, xc, ye);\n      };\n      /*\r\n       *   n % 0 =  N\r\n       *   n % N =  N\r\n       *   n % I =  n\r\n       *   0 % n =  0\r\n       *  -0 % n = -0\r\n       *   0 % 0 =  N\r\n       *   0 % N =  N\r\n       *   0 % I =  0\r\n       *   N % n =  N\r\n       *   N % 0 =  N\r\n       *   N % N =  N\r\n       *   N % I =  N\r\n       *   I % n =  N\r\n       *   I % 0 =  N\r\n       *   I % N =  N\r\n       *   I % I =  N\r\n       *\r\n       * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n       * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n       */\n\n\n      P.modulo = P.mod = function (y, b) {\n        var q,\n            s,\n            x = this;\n        y = new BigNumber(y, b); // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n\n        if (!x.c || !y.s || y.c && !y.c[0]) {\n          return new BigNumber(NaN); // Return x if y is Infinity or x is zero.\n        } else if (!y.c || x.c && !x.c[0]) {\n          return new BigNumber(x);\n        }\n\n        if (MODULO_MODE == 9) {\n          // Euclidian division: q = sign(y) * floor(x / abs(y))\n          // r = x - qy    where  0 <= r < abs(y)\n          s = y.s;\n          y.s = 1;\n          q = div(x, y, 0, 3);\n          y.s = s;\n          q.s *= s;\n        } else {\n          q = div(x, y, 0, MODULO_MODE);\n        }\n\n        y = x.minus(q.times(y)); // To match JavaScript %, ensure sign of zero is sign of dividend.\n\n        if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n        return y;\n      };\n      /*\r\n       *  n * 0 = 0\r\n       *  n * N = N\r\n       *  n * I = I\r\n       *  0 * n = 0\r\n       *  0 * 0 = 0\r\n       *  0 * N = N\r\n       *  0 * I = N\r\n       *  N * n = N\r\n       *  N * 0 = N\r\n       *  N * N = N\r\n       *  N * I = N\r\n       *  I * n = I\r\n       *  I * 0 = N\r\n       *  I * N = N\r\n       *  I * I = I\r\n       *\r\n       * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n       * of BigNumber(y, b).\r\n       */\n\n\n      P.multipliedBy = P.times = function (y, b) {\n        var c,\n            e,\n            i,\n            j,\n            k,\n            m,\n            xcL,\n            xlo,\n            xhi,\n            ycL,\n            ylo,\n            yhi,\n            zc,\n            base,\n            sqrtBase,\n            x = this,\n            xc = x.c,\n            yc = (y = new BigNumber(y, b)).c; // Either NaN, ±Infinity or ±0?\n\n        if (!xc || !yc || !xc[0] || !yc[0]) {\n          // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n          if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n            y.c = y.e = y.s = null;\n          } else {\n            y.s *= x.s; // Return ±Infinity if either is ±Infinity.\n\n            if (!xc || !yc) {\n              y.c = y.e = null; // Return ±0 if either is ±0.\n            } else {\n              y.c = [0];\n              y.e = 0;\n            }\n          }\n\n          return y;\n        }\n\n        e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n        y.s *= x.s;\n        xcL = xc.length;\n        ycL = yc.length; // Ensure xc points to longer array and xcL to its length.\n\n        if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i; // Initialise the result array with zeros.\n\n        for (i = xcL + ycL, zc = []; i--; zc.push(0));\n\n        base = BASE;\n        sqrtBase = SQRT_BASE;\n\n        for (i = ycL; --i >= 0;) {\n          c = 0;\n          ylo = yc[i] % sqrtBase;\n          yhi = yc[i] / sqrtBase | 0;\n\n          for (k = xcL, j = i + k; j > i;) {\n            xlo = xc[--k] % sqrtBase;\n            xhi = xc[k] / sqrtBase | 0;\n            m = yhi * xlo + xhi * ylo;\n            xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n            c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n            zc[j--] = xlo % base;\n          }\n\n          zc[j] = c;\n        }\n\n        if (c) {\n          ++e;\n        } else {\n          zc.splice(0, 1);\n        }\n\n        return normalise(y, zc, e);\n      };\n      /*\r\n       * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n       * i.e. multiplied by -1.\r\n       */\n\n\n      P.negated = function () {\n        var x = new BigNumber(this);\n        x.s = -x.s || null;\n        return x;\n      };\n      /*\r\n       *  n + 0 = n\r\n       *  n + N = N\r\n       *  n + I = I\r\n       *  0 + n = n\r\n       *  0 + 0 = 0\r\n       *  0 + N = N\r\n       *  0 + I = I\r\n       *  N + n = N\r\n       *  N + 0 = N\r\n       *  N + N = N\r\n       *  N + I = N\r\n       *  I + n = I\r\n       *  I + 0 = I\r\n       *  I + N = N\r\n       *  I + I = I\r\n       *\r\n       * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n       * BigNumber(y, b).\r\n       */\n\n\n      P.plus = function (y, b) {\n        var t,\n            x = this,\n            a = x.s;\n        y = new BigNumber(y, b);\n        b = y.s; // Either NaN?\n\n        if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n        if (a != b) {\n          y.s = -b;\n          return x.minus(y);\n        }\n\n        var xe = x.e / LOG_BASE,\n            ye = y.e / LOG_BASE,\n            xc = x.c,\n            yc = y.c;\n\n        if (!xe || !ye) {\n          // Return ±Infinity if either ±Infinity.\n          if (!xc || !yc) return new BigNumber(a / 0); // Either zero?\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n\n          if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n        }\n\n        xe = bitFloor(xe);\n        ye = bitFloor(ye);\n        xc = xc.slice(); // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n\n        if (a = xe - ye) {\n          if (a > 0) {\n            ye = xe;\n            t = yc;\n          } else {\n            a = -a;\n            t = xc;\n          }\n\n          t.reverse();\n\n          for (; a--; t.push(0));\n\n          t.reverse();\n        }\n\n        a = xc.length;\n        b = yc.length; // Point xc to the longer array, and b to the shorter length.\n\n        if (a - b < 0) t = yc, yc = xc, xc = t, b = a; // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n\n        for (a = 0; b;) {\n          a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n          xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n        }\n\n        if (a) {\n          xc = [a].concat(xc);\n          ++ye;\n        } // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n        // ye = MAX_EXP + 1 possible\n\n\n        return normalise(y, xc, ye);\n      };\n      /*\r\n       * If sd is undefined or null or true or false, return the number of significant digits of\r\n       * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n       * If sd is true include integer-part trailing zeros in the count.\r\n       *\r\n       * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n       * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n       * ROUNDING_MODE if rm is omitted.\r\n       *\r\n       * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n       *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n       */\n\n\n      P.precision = P.sd = function (sd, rm) {\n        var c,\n            n,\n            v,\n            x = this;\n\n        if (sd != null && sd !== !!sd) {\n          intCheck(sd, 1, MAX);\n          if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n          return round(new BigNumber(x), sd, rm);\n        }\n\n        if (!(c = x.c)) return null;\n        v = c.length - 1;\n        n = v * LOG_BASE + 1;\n\n        if (v = c[v]) {\n          // Subtract the number of trailing zeros of the last element.\n          for (; v % 10 == 0; v /= 10, n--); // Add the number of digits of the first element.\n\n\n          for (v = c[0]; v >= 10; v /= 10, n++);\n        }\n\n        if (sd && x.e + 1 > n) n = x.e + 1;\n        return n;\n      };\n      /*\r\n       * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n       * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n       *\r\n       * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n       */\n\n\n      P.shiftedBy = function (k) {\n        intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n        return this.times('1e' + k);\n      };\n      /*\r\n       *  sqrt(-n) =  N\r\n       *  sqrt(N) =  N\r\n       *  sqrt(-I) =  N\r\n       *  sqrt(I) =  I\r\n       *  sqrt(0) =  0\r\n       *  sqrt(-0) = -0\r\n       *\r\n       * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n       * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n       */\n\n\n      P.squareRoot = P.sqrt = function () {\n        var m,\n            n,\n            r,\n            rep,\n            t,\n            x = this,\n            c = x.c,\n            s = x.s,\n            e = x.e,\n            dp = DECIMAL_PLACES + 4,\n            half = new BigNumber('0.5'); // Negative/NaN/Infinity/zero?\n\n        if (s !== 1 || !c || !c[0]) {\n          return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n        } // Initial estimate.\n\n\n        s = Math.sqrt(+valueOf(x)); // Math.sqrt underflow/overflow?\n        // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n\n        if (s == 0 || s == 1 / 0) {\n          n = coeffToString(c);\n          if ((n.length + e) % 2 == 0) n += '0';\n          s = Math.sqrt(+n);\n          e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n          if (s == 1 / 0) {\n            n = '5e' + e;\n          } else {\n            n = s.toExponential();\n            n = n.slice(0, n.indexOf('e') + 1) + e;\n          }\n\n          r = new BigNumber(n);\n        } else {\n          r = new BigNumber(s + '');\n        } // Check for zero.\n        // r could be zero if MIN_EXP is changed after the this value was created.\n        // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n        // coeffToString to throw.\n\n\n        if (r.c[0]) {\n          e = r.e;\n          s = e + dp;\n          if (s < 3) s = 0; // Newton-Raphson iteration.\n\n          for (;;) {\n            t = r;\n            r = half.times(t.plus(div(x, t, dp, 1)));\n\n            if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n              // The exponent of r may here be one less than the final result exponent,\n              // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n              // are indexed correctly.\n              if (r.e < e) --s;\n              n = n.slice(s - 3, s + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n              // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n              // iteration.\n\n              if (n == '9999' || !rep && n == '4999') {\n                // On the first iteration only, check to see if rounding up gives the\n                // exact result as the nines may infinitely repeat.\n                if (!rep) {\n                  round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                  if (t.times(t).eq(x)) {\n                    r = t;\n                    break;\n                  }\n                }\n\n                dp += 4;\n                s += 4;\n                rep = 1;\n              } else {\n                // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n                // result. If not, then there are further digits and m will be truthy.\n                if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n                  // Truncate to the first rounding digit.\n                  round(r, r.e + DECIMAL_PLACES + 2, 1);\n                  m = !r.times(r).eq(x);\n                }\n\n                break;\n              }\n            }\n          }\n        }\n\n        return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n      };\n      /*\r\n       * Return a string representing the value of this BigNumber in exponential notation and\r\n       * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n       *\r\n       * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n       */\n\n\n      P.toExponential = function (dp, rm) {\n        if (dp != null) {\n          intCheck(dp, 0, MAX);\n          dp++;\n        }\n\n        return format(this, dp, rm, 1);\n      };\n      /*\r\n       * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n       * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n       *\r\n       * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n       * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n       *\r\n       * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n       */\n\n\n      P.toFixed = function (dp, rm) {\n        if (dp != null) {\n          intCheck(dp, 0, MAX);\n          dp = dp + this.e + 1;\n        }\n\n        return format(this, dp, rm);\n      };\n      /*\r\n       * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n       * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n       * of the format or FORMAT object (see BigNumber.set).\r\n       *\r\n       * The formatting object may contain some or all of the properties shown below.\r\n       *\r\n       * FORMAT = {\r\n       *   prefix: '',\r\n       *   groupSize: 3,\r\n       *   secondaryGroupSize: 0,\r\n       *   groupSeparator: ',',\r\n       *   decimalSeparator: '.',\r\n       *   fractionGroupSize: 0,\r\n       *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n       *   suffix: ''\r\n       * };\r\n       *\r\n       * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       * [format] {object} Formatting options. See FORMAT pbject above.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n       * '[BigNumber Error] Argument not an object: {format}'\r\n       */\n\n\n      P.toFormat = function (dp, rm, format) {\n        var str,\n            x = this;\n\n        if (format == null) {\n          if (dp != null && rm && typeof rm == 'object') {\n            format = rm;\n            rm = null;\n          } else if (dp && typeof dp == 'object') {\n            format = dp;\n            dp = rm = null;\n          } else {\n            format = FORMAT;\n          }\n        } else if (typeof format != 'object') {\n          throw Error(bignumberError + 'Argument not an object: ' + format);\n        }\n\n        str = x.toFixed(dp, rm);\n\n        if (x.c) {\n          var i,\n              arr = str.split('.'),\n              g1 = +format.groupSize,\n              g2 = +format.secondaryGroupSize,\n              groupSeparator = format.groupSeparator || '',\n              intPart = arr[0],\n              fractionPart = arr[1],\n              isNeg = x.s < 0,\n              intDigits = isNeg ? intPart.slice(1) : intPart,\n              len = intDigits.length;\n          if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n          if (g1 > 0 && len > 0) {\n            i = len % g1 || g1;\n            intPart = intDigits.substr(0, i);\n\n            for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\n\n            if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n            if (isNeg) intPart = '-' + intPart;\n          }\n\n          str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;\n        }\n\n        return (format.prefix || '') + str + (format.suffix || '');\n      };\n      /*\r\n       * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n       * fraction with an integer numerator and an integer denominator.\r\n       * The denominator will be a positive non-zero value less than or equal to the specified\r\n       * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n       * the lowest value necessary to represent the number exactly.\r\n       *\r\n       * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n       *\r\n       * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n       */\n\n\n      P.toFraction = function (md) {\n        var d,\n            d0,\n            d1,\n            d2,\n            e,\n            exp,\n            n,\n            n0,\n            n1,\n            q,\n            r,\n            s,\n            x = this,\n            xc = x.c;\n\n        if (md != null) {\n          n = new BigNumber(md); // Throw if md is less than one or is not an integer, unless it is Infinity.\n\n          if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n            throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\n          }\n        }\n\n        if (!xc) return new BigNumber(x);\n        d = new BigNumber(ONE);\n        n1 = d0 = new BigNumber(ONE);\n        d1 = n0 = new BigNumber(ONE);\n        s = coeffToString(xc); // Determine initial denominator.\n        // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n\n        e = d.e = s.length - x.e - 1;\n        d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n        md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;\n        exp = MAX_EXP;\n        MAX_EXP = 1 / 0;\n        n = new BigNumber(s); // n0 = d1 = 0\n\n        n0.c[0] = 0;\n\n        for (;;) {\n          q = div(n, d, 0, 1);\n          d2 = d0.plus(q.times(d1));\n          if (d2.comparedTo(md) == 1) break;\n          d0 = d1;\n          d1 = d2;\n          n1 = n0.plus(q.times(d2 = n1));\n          n0 = d2;\n          d = n.minus(q.times(d2 = d));\n          n = d2;\n        }\n\n        d2 = div(md.minus(d0), d1, 0, 1);\n        n0 = n0.plus(d2.times(n1));\n        d0 = d0.plus(d2.times(d1));\n        n0.s = n1.s = x.s;\n        e = e * 2; // Determine which fraction is closer to x, n0/d0 or n1/d1\n\n        r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n        MAX_EXP = exp;\n        return r;\n      };\n      /*\r\n       * Return the value of this BigNumber converted to a number primitive.\r\n       */\n\n\n      P.toNumber = function () {\n        return +valueOf(this);\n      };\n      /*\r\n       * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n       * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n       * necessary to represent the integer part of the value in fixed-point notation, then use\r\n       * exponential notation.\r\n       *\r\n       * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n       */\n\n\n      P.toPrecision = function (sd, rm) {\n        if (sd != null) intCheck(sd, 1, MAX);\n        return format(this, sd, rm, 2);\n      };\n      /*\r\n       * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n       * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n       * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n       * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n       * TO_EXP_NEG, return exponential notation.\r\n       *\r\n       * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n       *\r\n       * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n       */\n\n\n      P.toString = function (b) {\n        var str,\n            n = this,\n            s = n.s,\n            e = n.e; // Infinity or NaN?\n\n        if (e === null) {\n          if (s) {\n            str = 'Infinity';\n            if (s < 0) str = '-' + str;\n          } else {\n            str = 'NaN';\n          }\n        } else {\n          if (b == null) {\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');\n          } else if (b === 10) {\n            n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\n            str = toFixedPoint(coeffToString(n.c), n.e, '0');\n          } else {\n            intCheck(b, 2, ALPHABET.length, 'Base');\n            str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\n          }\n\n          if (s < 0 && n.c[0]) str = '-' + str;\n        }\n\n        return str;\n      };\n      /*\r\n       * Return as toString, but do not accept a base argument, and include the minus sign for\r\n       * negative zero.\r\n       */\n\n\n      P.valueOf = P.toJSON = function () {\n        return valueOf(this);\n      };\n\n      P._isBigNumber = true;\n      if (configObject != null) BigNumber.set(configObject);\n      return BigNumber;\n    } // PRIVATE HELPER FUNCTIONS\n    // These functions don't need access to variables,\n    // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\n\n\n    function bitFloor(n) {\n      var i = n | 0;\n      return n > 0 || n === i ? i : i - 1;\n    } // Return a coefficient array as a string of base 10 digits.\n\n\n    function coeffToString(a) {\n      var s,\n          z,\n          i = 1,\n          j = a.length,\n          r = a[0] + '';\n\n      for (; i < j;) {\n        s = a[i++] + '';\n        z = LOG_BASE - s.length;\n\n        for (; z--; s = '0' + s);\n\n        r += s;\n      } // Determine trailing zeros.\n\n\n      for (j = r.length; r.charCodeAt(--j) === 48;);\n\n      return r.slice(0, j + 1 || 1);\n    } // Compare the value of BigNumbers x and y.\n\n\n    function compare(x, y) {\n      var a,\n          b,\n          xc = x.c,\n          yc = y.c,\n          i = x.s,\n          j = y.s,\n          k = x.e,\n          l = y.e; // Either NaN?\n\n      if (!i || !j) return null;\n      a = xc && !xc[0];\n      b = yc && !yc[0]; // Either zero?\n\n      if (a || b) return a ? b ? 0 : -j : i; // Signs differ?\n\n      if (i != j) return i;\n      a = i < 0;\n      b = k == l; // Either Infinity?\n\n      if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1; // Compare exponents.\n\n      if (!b) return k > l ^ a ? 1 : -1;\n      j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.\n\n      for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1; // Compare lengths.\n\n\n      return k == l ? 0 : k > l ^ a ? 1 : -1;\n    }\n    /*\r\n     * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n     */\n\n\n    function intCheck(n, min, max, name) {\n      if (n < min || n > max || n !== mathfloor(n)) {\n        throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));\n      }\n    } // Assumes finite n.\n\n\n    function isOdd(n) {\n      var k = n.c.length - 1;\n      return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n    }\n\n    function toExponential(str, e) {\n      return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n    }\n\n    function toFixedPoint(str, e, z) {\n      var len, zs; // Negative exponent?\n\n      if (e < 0) {\n        // Prepend zeros.\n        for (zs = z + '.'; ++e; zs += z);\n\n        str = zs + str; // Positive exponent\n      } else {\n        len = str.length; // Append zeros.\n\n        if (++e > len) {\n          for (zs = z, e -= len; --e; zs += z);\n\n          str += zs;\n        } else if (e < len) {\n          str = str.slice(0, e) + '.' + str.slice(e);\n        }\n      }\n\n      return str;\n    } // EXPORT\n\n\n    BigNumber = clone();\n    BigNumber['default'] = BigNumber.BigNumber = BigNumber; // AMD.\n\n    if (module.exports) {\n      module.exports = BigNumber; // Browser.\n    } else {\n      if (!globalObject) {\n        globalObject = typeof self != 'undefined' && self ? self : window;\n      }\n\n      globalObject.BigNumber = BigNumber;\n    }\n  })(commonjsGlobal);\n});\nvar _nodeResolve_empty = {};\n\nvar _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  'default': _nodeResolve_empty\n});\n\nvar require$$0 = getCjsExportFromNamespace(_nodeResolve_empty$1);\nvar bn = createCommonjsModule(function (module) {\n  (function (module, exports) {\n    // Utils\n    function assert(val, msg) {\n      if (!val) throw new Error(msg || 'Assertion failed');\n    } // Could use `inherits` module, but don't want to move from single file\n    // architecture yet.\n\n\n    function inherits(ctor, superCtor) {\n      ctor.super_ = superCtor;\n\n      var TempCtor = function () {};\n\n      TempCtor.prototype = superCtor.prototype;\n      ctor.prototype = new TempCtor();\n      ctor.prototype.constructor = ctor;\n    } // BN\n\n\n    function BN(number, base, endian) {\n      if (BN.isBN(number)) {\n        return number;\n      }\n\n      this.negative = 0;\n      this.words = null;\n      this.length = 0; // Reduction context\n\n      this.red = null;\n\n      if (number !== null) {\n        if (base === 'le' || base === 'be') {\n          endian = base;\n          base = 10;\n        }\n\n        this._init(number || 0, base || 10, endian || 'be');\n      }\n    }\n\n    if (typeof module === 'object') {\n      module.exports = BN;\n    } else {\n      exports.BN = BN;\n    }\n\n    BN.BN = BN;\n    BN.wordSize = 26;\n    var Buffer;\n\n    try {\n      Buffer = require$$0.Buffer;\n    } catch (e) {}\n\n    BN.isBN = function isBN(num) {\n      if (num instanceof BN) {\n        return true;\n      }\n\n      return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n    };\n\n    BN.max = function max(left, right) {\n      if (left.cmp(right) > 0) return left;\n      return right;\n    };\n\n    BN.min = function min(left, right) {\n      if (left.cmp(right) < 0) return left;\n      return right;\n    };\n\n    BN.prototype._init = function init(number, base, endian) {\n      if (typeof number === 'number') {\n        return this._initNumber(number, base, endian);\n      }\n\n      if (typeof number === 'object') {\n        return this._initArray(number, base, endian);\n      }\n\n      if (base === 'hex') {\n        base = 16;\n      }\n\n      assert(base === (base | 0) && base >= 2 && base <= 36);\n      number = number.toString().replace(/\\s+/g, '');\n      var start = 0;\n\n      if (number[0] === '-') {\n        start++;\n      }\n\n      if (base === 16) {\n        this._parseHex(number, start);\n      } else {\n        this._parseBase(number, base, start);\n      }\n\n      if (number[0] === '-') {\n        this.negative = 1;\n      }\n\n      this.strip();\n      if (endian !== 'le') return;\n\n      this._initArray(this.toArray(), base, endian);\n    };\n\n    BN.prototype._initNumber = function _initNumber(number, base, endian) {\n      if (number < 0) {\n        this.negative = 1;\n        number = -number;\n      }\n\n      if (number < 0x4000000) {\n        this.words = [number & 0x3ffffff];\n        this.length = 1;\n      } else if (number < 0x10000000000000) {\n        this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];\n        this.length = 2;\n      } else {\n        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n\n        this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];\n        this.length = 3;\n      }\n\n      if (endian !== 'le') return; // Reverse the bytes\n\n      this._initArray(this.toArray(), base, endian);\n    };\n\n    BN.prototype._initArray = function _initArray(number, base, endian) {\n      // Perhaps a Uint8Array\n      assert(typeof number.length === 'number');\n\n      if (number.length <= 0) {\n        this.words = [0];\n        this.length = 1;\n        return this;\n      }\n\n      this.length = Math.ceil(number.length / 3);\n      this.words = new Array(this.length);\n\n      for (var i = 0; i < this.length; i++) {\n        this.words[i] = 0;\n      }\n\n      var j, w;\n      var off = 0;\n\n      if (endian === 'be') {\n        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n          w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n          this.words[j] |= w << off & 0x3ffffff;\n          this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n          off += 24;\n\n          if (off >= 26) {\n            off -= 26;\n            j++;\n          }\n        }\n      } else if (endian === 'le') {\n        for (i = 0, j = 0; i < number.length; i += 3) {\n          w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n          this.words[j] |= w << off & 0x3ffffff;\n          this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n          off += 24;\n\n          if (off >= 26) {\n            off -= 26;\n            j++;\n          }\n        }\n      }\n\n      return this.strip();\n    };\n\n    function parseHex(str, start, end) {\n      var r = 0;\n      var len = Math.min(str.length, end);\n\n      for (var i = start; i < len; i++) {\n        var c = str.charCodeAt(i) - 48;\n        r <<= 4; // 'a' - 'f'\n\n        if (c >= 49 && c <= 54) {\n          r |= c - 49 + 0xa; // 'A' - 'F'\n        } else if (c >= 17 && c <= 22) {\n          r |= c - 17 + 0xa; // '0' - '9'\n        } else {\n          r |= c & 0xf;\n        }\n      }\n\n      return r;\n    }\n\n    BN.prototype._parseHex = function _parseHex(number, start) {\n      // Create possibly bigger array to ensure that it fits the number\n      this.length = Math.ceil((number.length - start) / 6);\n      this.words = new Array(this.length);\n\n      for (var i = 0; i < this.length; i++) {\n        this.words[i] = 0;\n      }\n\n      var j, w; // Scan 24-bit chunks and add them to the number\n\n      var off = 0;\n\n      for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n        w = parseHex(number, i, i + 6);\n        this.words[j] |= w << off & 0x3ffffff; // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n\n        this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n        off += 24;\n\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n\n      if (i + 6 !== start) {\n        w = parseHex(number, start, i + 6);\n        this.words[j] |= w << off & 0x3ffffff;\n        this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n      }\n\n      this.strip();\n    };\n\n    function parseBase(str, start, end, mul) {\n      var r = 0;\n      var len = Math.min(str.length, end);\n\n      for (var i = start; i < len; i++) {\n        var c = str.charCodeAt(i) - 48;\n        r *= mul; // 'a'\n\n        if (c >= 49) {\n          r += c - 49 + 0xa; // 'A'\n        } else if (c >= 17) {\n          r += c - 17 + 0xa; // '0' - '9'\n        } else {\n          r += c;\n        }\n      }\n\n      return r;\n    }\n\n    BN.prototype._parseBase = function _parseBase(number, base, start) {\n      // Initialize as zero\n      this.words = [0];\n      this.length = 1; // Find length of limb in base\n\n      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n        limbLen++;\n      }\n\n      limbLen--;\n      limbPow = limbPow / base | 0;\n      var total = number.length - start;\n      var mod = total % limbLen;\n      var end = Math.min(total, total - mod) + start;\n      var word = 0;\n\n      for (var i = start; i < end; i += limbLen) {\n        word = parseBase(number, i, i + limbLen, base);\n        this.imuln(limbPow);\n\n        if (this.words[0] + word < 0x4000000) {\n          this.words[0] += word;\n        } else {\n          this._iaddn(word);\n        }\n      }\n\n      if (mod !== 0) {\n        var pow = 1;\n        word = parseBase(number, i, number.length, base);\n\n        for (i = 0; i < mod; i++) {\n          pow *= base;\n        }\n\n        this.imuln(pow);\n\n        if (this.words[0] + word < 0x4000000) {\n          this.words[0] += word;\n        } else {\n          this._iaddn(word);\n        }\n      }\n    };\n\n    BN.prototype.copy = function copy(dest) {\n      dest.words = new Array(this.length);\n\n      for (var i = 0; i < this.length; i++) {\n        dest.words[i] = this.words[i];\n      }\n\n      dest.length = this.length;\n      dest.negative = this.negative;\n      dest.red = this.red;\n    };\n\n    BN.prototype.clone = function clone() {\n      var r = new BN(null);\n      this.copy(r);\n      return r;\n    };\n\n    BN.prototype._expand = function _expand(size) {\n      while (this.length < size) {\n        this.words[this.length++] = 0;\n      }\n\n      return this;\n    }; // Remove leading `0` from `this`\n\n\n    BN.prototype.strip = function strip() {\n      while (this.length > 1 && this.words[this.length - 1] === 0) {\n        this.length--;\n      }\n\n      return this._normSign();\n    };\n\n    BN.prototype._normSign = function _normSign() {\n      // -0 = 0\n      if (this.length === 1 && this.words[0] === 0) {\n        this.negative = 0;\n      }\n\n      return this;\n    };\n\n    BN.prototype.inspect = function inspect() {\n      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n    };\n    /*\n     var zeros = [];\n    var groupSizes = [];\n    var groupBases = [];\n     var s = '';\n    var i = -1;\n    while (++i < BN.wordSize) {\n      zeros[i] = s;\n      s += '0';\n    }\n    groupSizes[0] = 0;\n    groupSizes[1] = 0;\n    groupBases[0] = 0;\n    groupBases[1] = 0;\n    var base = 2 - 1;\n    while (++base < 36 + 1) {\n      var groupSize = 0;\n      var groupBase = 1;\n      while (groupBase < (1 << BN.wordSize) / base) {\n        groupBase *= base;\n        groupSize += 1;\n      }\n      groupSizes[base] = groupSize;\n      groupBases[base] = groupBase;\n    }\n     */\n\n\n    var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];\n    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];\n    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];\n\n    BN.prototype.toString = function toString(base, padding) {\n      base = base || 10;\n      padding = padding | 0 || 1;\n      var out;\n\n      if (base === 16 || base === 'hex') {\n        out = '';\n        var off = 0;\n        var carry = 0;\n\n        for (var i = 0; i < this.length; i++) {\n          var w = this.words[i];\n          var word = ((w << off | carry) & 0xffffff).toString(16);\n          carry = w >>> 24 - off & 0xffffff;\n\n          if (carry !== 0 || i !== this.length - 1) {\n            out = zeros[6 - word.length] + word + out;\n          } else {\n            out = word + out;\n          }\n\n          off += 2;\n\n          if (off >= 26) {\n            off -= 26;\n            i--;\n          }\n        }\n\n        if (carry !== 0) {\n          out = carry.toString(16) + out;\n        }\n\n        while (out.length % padding !== 0) {\n          out = '0' + out;\n        }\n\n        if (this.negative !== 0) {\n          out = '-' + out;\n        }\n\n        return out;\n      }\n\n      if (base === (base | 0) && base >= 2 && base <= 36) {\n        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n        var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);\n\n        var groupBase = groupBases[base];\n        out = '';\n        var c = this.clone();\n        c.negative = 0;\n\n        while (!c.isZero()) {\n          var r = c.modn(groupBase).toString(base);\n          c = c.idivn(groupBase);\n\n          if (!c.isZero()) {\n            out = zeros[groupSize - r.length] + r + out;\n          } else {\n            out = r + out;\n          }\n        }\n\n        if (this.isZero()) {\n          out = '0' + out;\n        }\n\n        while (out.length % padding !== 0) {\n          out = '0' + out;\n        }\n\n        if (this.negative !== 0) {\n          out = '-' + out;\n        }\n\n        return out;\n      }\n\n      assert(false, 'Base should be between 2 and 36');\n    };\n\n    BN.prototype.toNumber = function toNumber() {\n      var ret = this.words[0];\n\n      if (this.length === 2) {\n        ret += this.words[1] * 0x4000000;\n      } else if (this.length === 3 && this.words[2] === 0x01) {\n        // NOTE: at this stage it is known that the top bit is set\n        ret += 0x10000000000000 + this.words[1] * 0x4000000;\n      } else if (this.length > 2) {\n        assert(false, 'Number can only safely store up to 53 bits');\n      }\n\n      return this.negative !== 0 ? -ret : ret;\n    };\n\n    BN.prototype.toJSON = function toJSON() {\n      return this.toString(16);\n    };\n\n    BN.prototype.toBuffer = function toBuffer(endian, length) {\n      assert(typeof Buffer !== 'undefined');\n      return this.toArrayLike(Buffer, endian, length);\n    };\n\n    BN.prototype.toArray = function toArray(endian, length) {\n      return this.toArrayLike(Array, endian, length);\n    };\n\n    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n      var byteLength = this.byteLength();\n      var reqLength = length || Math.max(1, byteLength);\n      assert(byteLength <= reqLength, 'byte array longer than desired length');\n      assert(reqLength > 0, 'Requested array length <= 0');\n      this.strip();\n      var littleEndian = endian === 'le';\n      var res = new ArrayType(reqLength);\n      var b, i;\n      var q = this.clone();\n\n      if (!littleEndian) {\n        // Assume big-endian\n        for (i = 0; i < reqLength - byteLength; i++) {\n          res[i] = 0;\n        }\n\n        for (i = 0; !q.isZero(); i++) {\n          b = q.andln(0xff);\n          q.iushrn(8);\n          res[reqLength - i - 1] = b;\n        }\n      } else {\n        for (i = 0; !q.isZero(); i++) {\n          b = q.andln(0xff);\n          q.iushrn(8);\n          res[i] = b;\n        }\n\n        for (; i < reqLength; i++) {\n          res[i] = 0;\n        }\n      }\n\n      return res;\n    };\n\n    if (Math.clz32) {\n      BN.prototype._countBits = function _countBits(w) {\n        return 32 - Math.clz32(w);\n      };\n    } else {\n      BN.prototype._countBits = function _countBits(w) {\n        var t = w;\n        var r = 0;\n\n        if (t >= 0x1000) {\n          r += 13;\n          t >>>= 13;\n        }\n\n        if (t >= 0x40) {\n          r += 7;\n          t >>>= 7;\n        }\n\n        if (t >= 0x8) {\n          r += 4;\n          t >>>= 4;\n        }\n\n        if (t >= 0x02) {\n          r += 2;\n          t >>>= 2;\n        }\n\n        return r + t;\n      };\n    }\n\n    BN.prototype._zeroBits = function _zeroBits(w) {\n      // Short-cut\n      if (w === 0) return 26;\n      var t = w;\n      var r = 0;\n\n      if ((t & 0x1fff) === 0) {\n        r += 13;\n        t >>>= 13;\n      }\n\n      if ((t & 0x7f) === 0) {\n        r += 7;\n        t >>>= 7;\n      }\n\n      if ((t & 0xf) === 0) {\n        r += 4;\n        t >>>= 4;\n      }\n\n      if ((t & 0x3) === 0) {\n        r += 2;\n        t >>>= 2;\n      }\n\n      if ((t & 0x1) === 0) {\n        r++;\n      }\n\n      return r;\n    }; // Return number of used bits in a BN\n\n\n    BN.prototype.bitLength = function bitLength() {\n      var w = this.words[this.length - 1];\n\n      var hi = this._countBits(w);\n\n      return (this.length - 1) * 26 + hi;\n    };\n\n    function toBitArray(num) {\n      var w = new Array(num.bitLength());\n\n      for (var bit = 0; bit < w.length; bit++) {\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n      }\n\n      return w;\n    } // Number of trailing zero bits\n\n\n    BN.prototype.zeroBits = function zeroBits() {\n      if (this.isZero()) return 0;\n      var r = 0;\n\n      for (var i = 0; i < this.length; i++) {\n        var b = this._zeroBits(this.words[i]);\n\n        r += b;\n        if (b !== 26) break;\n      }\n\n      return r;\n    };\n\n    BN.prototype.byteLength = function byteLength() {\n      return Math.ceil(this.bitLength() / 8);\n    };\n\n    BN.prototype.toTwos = function toTwos(width) {\n      if (this.negative !== 0) {\n        return this.abs().inotn(width).iaddn(1);\n      }\n\n      return this.clone();\n    };\n\n    BN.prototype.fromTwos = function fromTwos(width) {\n      if (this.testn(width - 1)) {\n        return this.notn(width).iaddn(1).ineg();\n      }\n\n      return this.clone();\n    };\n\n    BN.prototype.isNeg = function isNeg() {\n      return this.negative !== 0;\n    }; // Return negative clone of `this`\n\n\n    BN.prototype.neg = function neg() {\n      return this.clone().ineg();\n    };\n\n    BN.prototype.ineg = function ineg() {\n      if (!this.isZero()) {\n        this.negative ^= 1;\n      }\n\n      return this;\n    }; // Or `num` with `this` in-place\n\n\n    BN.prototype.iuor = function iuor(num) {\n      while (this.length < num.length) {\n        this.words[this.length++] = 0;\n      }\n\n      for (var i = 0; i < num.length; i++) {\n        this.words[i] = this.words[i] | num.words[i];\n      }\n\n      return this.strip();\n    };\n\n    BN.prototype.ior = function ior(num) {\n      assert((this.negative | num.negative) === 0);\n      return this.iuor(num);\n    }; // Or `num` with `this`\n\n\n    BN.prototype.or = function or(num) {\n      if (this.length > num.length) return this.clone().ior(num);\n      return num.clone().ior(this);\n    };\n\n    BN.prototype.uor = function uor(num) {\n      if (this.length > num.length) return this.clone().iuor(num);\n      return num.clone().iuor(this);\n    }; // And `num` with `this` in-place\n\n\n    BN.prototype.iuand = function iuand(num) {\n      // b = min-length(num, this)\n      var b;\n\n      if (this.length > num.length) {\n        b = num;\n      } else {\n        b = this;\n      }\n\n      for (var i = 0; i < b.length; i++) {\n        this.words[i] = this.words[i] & num.words[i];\n      }\n\n      this.length = b.length;\n      return this.strip();\n    };\n\n    BN.prototype.iand = function iand(num) {\n      assert((this.negative | num.negative) === 0);\n      return this.iuand(num);\n    }; // And `num` with `this`\n\n\n    BN.prototype.and = function and(num) {\n      if (this.length > num.length) return this.clone().iand(num);\n      return num.clone().iand(this);\n    };\n\n    BN.prototype.uand = function uand(num) {\n      if (this.length > num.length) return this.clone().iuand(num);\n      return num.clone().iuand(this);\n    }; // Xor `num` with `this` in-place\n\n\n    BN.prototype.iuxor = function iuxor(num) {\n      // a.length > b.length\n      var a;\n      var b;\n\n      if (this.length > num.length) {\n        a = this;\n        b = num;\n      } else {\n        a = num;\n        b = this;\n      }\n\n      for (var i = 0; i < b.length; i++) {\n        this.words[i] = a.words[i] ^ b.words[i];\n      }\n\n      if (this !== a) {\n        for (; i < a.length; i++) {\n          this.words[i] = a.words[i];\n        }\n      }\n\n      this.length = a.length;\n      return this.strip();\n    };\n\n    BN.prototype.ixor = function ixor(num) {\n      assert((this.negative | num.negative) === 0);\n      return this.iuxor(num);\n    }; // Xor `num` with `this`\n\n\n    BN.prototype.xor = function xor(num) {\n      if (this.length > num.length) return this.clone().ixor(num);\n      return num.clone().ixor(this);\n    };\n\n    BN.prototype.uxor = function uxor(num) {\n      if (this.length > num.length) return this.clone().iuxor(num);\n      return num.clone().iuxor(this);\n    }; // Not ``this`` with ``width`` bitwidth\n\n\n    BN.prototype.inotn = function inotn(width) {\n      assert(typeof width === 'number' && width >= 0);\n      var bytesNeeded = Math.ceil(width / 26) | 0;\n      var bitsLeft = width % 26; // Extend the buffer with leading zeroes\n\n      this._expand(bytesNeeded);\n\n      if (bitsLeft > 0) {\n        bytesNeeded--;\n      } // Handle complete words\n\n\n      for (var i = 0; i < bytesNeeded; i++) {\n        this.words[i] = ~this.words[i] & 0x3ffffff;\n      } // Handle the residue\n\n\n      if (bitsLeft > 0) {\n        this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;\n      } // And remove leading zeroes\n\n\n      return this.strip();\n    };\n\n    BN.prototype.notn = function notn(width) {\n      return this.clone().inotn(width);\n    }; // Set `bit` of `this`\n\n\n    BN.prototype.setn = function setn(bit, val) {\n      assert(typeof bit === 'number' && bit >= 0);\n      var off = bit / 26 | 0;\n      var wbit = bit % 26;\n\n      this._expand(off + 1);\n\n      if (val) {\n        this.words[off] = this.words[off] | 1 << wbit;\n      } else {\n        this.words[off] = this.words[off] & ~(1 << wbit);\n      }\n\n      return this.strip();\n    }; // Add `num` to `this` in-place\n\n\n    BN.prototype.iadd = function iadd(num) {\n      var r; // negative + positive\n\n      if (this.negative !== 0 && num.negative === 0) {\n        this.negative = 0;\n        r = this.isub(num);\n        this.negative ^= 1;\n        return this._normSign(); // positive + negative\n      } else if (this.negative === 0 && num.negative !== 0) {\n        num.negative = 0;\n        r = this.isub(num);\n        num.negative = 1;\n        return r._normSign();\n      } // a.length > b.length\n\n\n      var a, b;\n\n      if (this.length > num.length) {\n        a = this;\n        b = num;\n      } else {\n        a = num;\n        b = this;\n      }\n\n      var carry = 0;\n\n      for (var i = 0; i < b.length; i++) {\n        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n        this.words[i] = r & 0x3ffffff;\n        carry = r >>> 26;\n      }\n\n      for (; carry !== 0 && i < a.length; i++) {\n        r = (a.words[i] | 0) + carry;\n        this.words[i] = r & 0x3ffffff;\n        carry = r >>> 26;\n      }\n\n      this.length = a.length;\n\n      if (carry !== 0) {\n        this.words[this.length] = carry;\n        this.length++; // Copy the rest of the words\n      } else if (a !== this) {\n        for (; i < a.length; i++) {\n          this.words[i] = a.words[i];\n        }\n      }\n\n      return this;\n    }; // Add `num` to `this`\n\n\n    BN.prototype.add = function add(num) {\n      var res;\n\n      if (num.negative !== 0 && this.negative === 0) {\n        num.negative = 0;\n        res = this.sub(num);\n        num.negative ^= 1;\n        return res;\n      } else if (num.negative === 0 && this.negative !== 0) {\n        this.negative = 0;\n        res = num.sub(this);\n        this.negative = 1;\n        return res;\n      }\n\n      if (this.length > num.length) return this.clone().iadd(num);\n      return num.clone().iadd(this);\n    }; // Subtract `num` from `this` in-place\n\n\n    BN.prototype.isub = function isub(num) {\n      // this - (-num) = this + num\n      if (num.negative !== 0) {\n        num.negative = 0;\n        var r = this.iadd(num);\n        num.negative = 1;\n        return r._normSign(); // -this - num = -(this + num)\n      } else if (this.negative !== 0) {\n        this.negative = 0;\n        this.iadd(num);\n        this.negative = 1;\n        return this._normSign();\n      } // At this point both numbers are positive\n\n\n      var cmp = this.cmp(num); // Optimization - zeroify\n\n      if (cmp === 0) {\n        this.negative = 0;\n        this.length = 1;\n        this.words[0] = 0;\n        return this;\n      } // a > b\n\n\n      var a, b;\n\n      if (cmp > 0) {\n        a = this;\n        b = num;\n      } else {\n        a = num;\n        b = this;\n      }\n\n      var carry = 0;\n\n      for (var i = 0; i < b.length; i++) {\n        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n        carry = r >> 26;\n        this.words[i] = r & 0x3ffffff;\n      }\n\n      for (; carry !== 0 && i < a.length; i++) {\n        r = (a.words[i] | 0) + carry;\n        carry = r >> 26;\n        this.words[i] = r & 0x3ffffff;\n      } // Copy rest of the words\n\n\n      if (carry === 0 && i < a.length && a !== this) {\n        for (; i < a.length; i++) {\n          this.words[i] = a.words[i];\n        }\n      }\n\n      this.length = Math.max(this.length, i);\n\n      if (a !== this) {\n        this.negative = 1;\n      }\n\n      return this.strip();\n    }; // Subtract `num` from `this`\n\n\n    BN.prototype.sub = function sub(num) {\n      return this.clone().isub(num);\n    };\n\n    function smallMulTo(self, num, out) {\n      out.negative = num.negative ^ self.negative;\n      var len = self.length + num.length | 0;\n      out.length = len;\n      len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)\n\n      var a = self.words[0] | 0;\n      var b = num.words[0] | 0;\n      var r = a * b;\n      var lo = r & 0x3ffffff;\n      var carry = r / 0x4000000 | 0;\n      out.words[0] = lo;\n\n      for (var k = 1; k < len; k++) {\n        // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n        // note that ncarry could be >= 0x3ffffff\n        var ncarry = carry >>> 26;\n        var rword = carry & 0x3ffffff;\n        var maxJ = Math.min(k, num.length - 1);\n\n        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n          var i = k - j | 0;\n          a = self.words[i] | 0;\n          b = num.words[j] | 0;\n          r = a * b + rword;\n          ncarry += r / 0x4000000 | 0;\n          rword = r & 0x3ffffff;\n        }\n\n        out.words[k] = rword | 0;\n        carry = ncarry | 0;\n      }\n\n      if (carry !== 0) {\n        out.words[k] = carry | 0;\n      } else {\n        out.length--;\n      }\n\n      return out.strip();\n    } // TODO(indutny): it may be reasonable to omit it for users who don't need\n    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n    // multiplication (like elliptic secp256k1).\n\n\n    var comb10MulTo = function comb10MulTo(self, num, out) {\n      var a = self.words;\n      var b = num.words;\n      var o = out.words;\n      var c = 0;\n      var lo;\n      var mid;\n      var hi;\n      var a0 = a[0] | 0;\n      var al0 = a0 & 0x1fff;\n      var ah0 = a0 >>> 13;\n      var a1 = a[1] | 0;\n      var al1 = a1 & 0x1fff;\n      var ah1 = a1 >>> 13;\n      var a2 = a[2] | 0;\n      var al2 = a2 & 0x1fff;\n      var ah2 = a2 >>> 13;\n      var a3 = a[3] | 0;\n      var al3 = a3 & 0x1fff;\n      var ah3 = a3 >>> 13;\n      var a4 = a[4] | 0;\n      var al4 = a4 & 0x1fff;\n      var ah4 = a4 >>> 13;\n      var a5 = a[5] | 0;\n      var al5 = a5 & 0x1fff;\n      var ah5 = a5 >>> 13;\n      var a6 = a[6] | 0;\n      var al6 = a6 & 0x1fff;\n      var ah6 = a6 >>> 13;\n      var a7 = a[7] | 0;\n      var al7 = a7 & 0x1fff;\n      var ah7 = a7 >>> 13;\n      var a8 = a[8] | 0;\n      var al8 = a8 & 0x1fff;\n      var ah8 = a8 >>> 13;\n      var a9 = a[9] | 0;\n      var al9 = a9 & 0x1fff;\n      var ah9 = a9 >>> 13;\n      var b0 = b[0] | 0;\n      var bl0 = b0 & 0x1fff;\n      var bh0 = b0 >>> 13;\n      var b1 = b[1] | 0;\n      var bl1 = b1 & 0x1fff;\n      var bh1 = b1 >>> 13;\n      var b2 = b[2] | 0;\n      var bl2 = b2 & 0x1fff;\n      var bh2 = b2 >>> 13;\n      var b3 = b[3] | 0;\n      var bl3 = b3 & 0x1fff;\n      var bh3 = b3 >>> 13;\n      var b4 = b[4] | 0;\n      var bl4 = b4 & 0x1fff;\n      var bh4 = b4 >>> 13;\n      var b5 = b[5] | 0;\n      var bl5 = b5 & 0x1fff;\n      var bh5 = b5 >>> 13;\n      var b6 = b[6] | 0;\n      var bl6 = b6 & 0x1fff;\n      var bh6 = b6 >>> 13;\n      var b7 = b[7] | 0;\n      var bl7 = b7 & 0x1fff;\n      var bh7 = b7 >>> 13;\n      var b8 = b[8] | 0;\n      var bl8 = b8 & 0x1fff;\n      var bh8 = b8 >>> 13;\n      var b9 = b[9] | 0;\n      var bl9 = b9 & 0x1fff;\n      var bh9 = b9 >>> 13;\n      out.negative = self.negative ^ num.negative;\n      out.length = 19;\n      /* k = 0 */\n\n      lo = Math.imul(al0, bl0);\n      mid = Math.imul(al0, bh0);\n      mid = mid + Math.imul(ah0, bl0) | 0;\n      hi = Math.imul(ah0, bh0);\n      var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n      w0 &= 0x3ffffff;\n      /* k = 1 */\n\n      lo = Math.imul(al1, bl0);\n      mid = Math.imul(al1, bh0);\n      mid = mid + Math.imul(ah1, bl0) | 0;\n      hi = Math.imul(ah1, bh0);\n      lo = lo + Math.imul(al0, bl1) | 0;\n      mid = mid + Math.imul(al0, bh1) | 0;\n      mid = mid + Math.imul(ah0, bl1) | 0;\n      hi = hi + Math.imul(ah0, bh1) | 0;\n      var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n      w1 &= 0x3ffffff;\n      /* k = 2 */\n\n      lo = Math.imul(al2, bl0);\n      mid = Math.imul(al2, bh0);\n      mid = mid + Math.imul(ah2, bl0) | 0;\n      hi = Math.imul(ah2, bh0);\n      lo = lo + Math.imul(al1, bl1) | 0;\n      mid = mid + Math.imul(al1, bh1) | 0;\n      mid = mid + Math.imul(ah1, bl1) | 0;\n      hi = hi + Math.imul(ah1, bh1) | 0;\n      lo = lo + Math.imul(al0, bl2) | 0;\n      mid = mid + Math.imul(al0, bh2) | 0;\n      mid = mid + Math.imul(ah0, bl2) | 0;\n      hi = hi + Math.imul(ah0, bh2) | 0;\n      var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n      w2 &= 0x3ffffff;\n      /* k = 3 */\n\n      lo = Math.imul(al3, bl0);\n      mid = Math.imul(al3, bh0);\n      mid = mid + Math.imul(ah3, bl0) | 0;\n      hi = Math.imul(ah3, bh0);\n      lo = lo + Math.imul(al2, bl1) | 0;\n      mid = mid + Math.imul(al2, bh1) | 0;\n      mid = mid + Math.imul(ah2, bl1) | 0;\n      hi = hi + Math.imul(ah2, bh1) | 0;\n      lo = lo + Math.imul(al1, bl2) | 0;\n      mid = mid + Math.imul(al1, bh2) | 0;\n      mid = mid + Math.imul(ah1, bl2) | 0;\n      hi = hi + Math.imul(ah1, bh2) | 0;\n      lo = lo + Math.imul(al0, bl3) | 0;\n      mid = mid + Math.imul(al0, bh3) | 0;\n      mid = mid + Math.imul(ah0, bl3) | 0;\n      hi = hi + Math.imul(ah0, bh3) | 0;\n      var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n      w3 &= 0x3ffffff;\n      /* k = 4 */\n\n      lo = Math.imul(al4, bl0);\n      mid = Math.imul(al4, bh0);\n      mid = mid + Math.imul(ah4, bl0) | 0;\n      hi = Math.imul(ah4, bh0);\n      lo = lo + Math.imul(al3, bl1) | 0;\n      mid = mid + Math.imul(al3, bh1) | 0;\n      mid = mid + Math.imul(ah3, bl1) | 0;\n      hi = hi + Math.imul(ah3, bh1) | 0;\n      lo = lo + Math.imul(al2, bl2) | 0;\n      mid = mid + Math.imul(al2, bh2) | 0;\n      mid = mid + Math.imul(ah2, bl2) | 0;\n      hi = hi + Math.imul(ah2, bh2) | 0;\n      lo = lo + Math.imul(al1, bl3) | 0;\n      mid = mid + Math.imul(al1, bh3) | 0;\n      mid = mid + Math.imul(ah1, bl3) | 0;\n      hi = hi + Math.imul(ah1, bh3) | 0;\n      lo = lo + Math.imul(al0, bl4) | 0;\n      mid = mid + Math.imul(al0, bh4) | 0;\n      mid = mid + Math.imul(ah0, bl4) | 0;\n      hi = hi + Math.imul(ah0, bh4) | 0;\n      var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n      w4 &= 0x3ffffff;\n      /* k = 5 */\n\n      lo = Math.imul(al5, bl0);\n      mid = Math.imul(al5, bh0);\n      mid = mid + Math.imul(ah5, bl0) | 0;\n      hi = Math.imul(ah5, bh0);\n      lo = lo + Math.imul(al4, bl1) | 0;\n      mid = mid + Math.imul(al4, bh1) | 0;\n      mid = mid + Math.imul(ah4, bl1) | 0;\n      hi = hi + Math.imul(ah4, bh1) | 0;\n      lo = lo + Math.imul(al3, bl2) | 0;\n      mid = mid + Math.imul(al3, bh2) | 0;\n      mid = mid + Math.imul(ah3, bl2) | 0;\n      hi = hi + Math.imul(ah3, bh2) | 0;\n      lo = lo + Math.imul(al2, bl3) | 0;\n      mid = mid + Math.imul(al2, bh3) | 0;\n      mid = mid + Math.imul(ah2, bl3) | 0;\n      hi = hi + Math.imul(ah2, bh3) | 0;\n      lo = lo + Math.imul(al1, bl4) | 0;\n      mid = mid + Math.imul(al1, bh4) | 0;\n      mid = mid + Math.imul(ah1, bl4) | 0;\n      hi = hi + Math.imul(ah1, bh4) | 0;\n      lo = lo + Math.imul(al0, bl5) | 0;\n      mid = mid + Math.imul(al0, bh5) | 0;\n      mid = mid + Math.imul(ah0, bl5) | 0;\n      hi = hi + Math.imul(ah0, bh5) | 0;\n      var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n      w5 &= 0x3ffffff;\n      /* k = 6 */\n\n      lo = Math.imul(al6, bl0);\n      mid = Math.imul(al6, bh0);\n      mid = mid + Math.imul(ah6, bl0) | 0;\n      hi = Math.imul(ah6, bh0);\n      lo = lo + Math.imul(al5, bl1) | 0;\n      mid = mid + Math.imul(al5, bh1) | 0;\n      mid = mid + Math.imul(ah5, bl1) | 0;\n      hi = hi + Math.imul(ah5, bh1) | 0;\n      lo = lo + Math.imul(al4, bl2) | 0;\n      mid = mid + Math.imul(al4, bh2) | 0;\n      mid = mid + Math.imul(ah4, bl2) | 0;\n      hi = hi + Math.imul(ah4, bh2) | 0;\n      lo = lo + Math.imul(al3, bl3) | 0;\n      mid = mid + Math.imul(al3, bh3) | 0;\n      mid = mid + Math.imul(ah3, bl3) | 0;\n      hi = hi + Math.imul(ah3, bh3) | 0;\n      lo = lo + Math.imul(al2, bl4) | 0;\n      mid = mid + Math.imul(al2, bh4) | 0;\n      mid = mid + Math.imul(ah2, bl4) | 0;\n      hi = hi + Math.imul(ah2, bh4) | 0;\n      lo = lo + Math.imul(al1, bl5) | 0;\n      mid = mid + Math.imul(al1, bh5) | 0;\n      mid = mid + Math.imul(ah1, bl5) | 0;\n      hi = hi + Math.imul(ah1, bh5) | 0;\n      lo = lo + Math.imul(al0, bl6) | 0;\n      mid = mid + Math.imul(al0, bh6) | 0;\n      mid = mid + Math.imul(ah0, bl6) | 0;\n      hi = hi + Math.imul(ah0, bh6) | 0;\n      var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n      w6 &= 0x3ffffff;\n      /* k = 7 */\n\n      lo = Math.imul(al7, bl0);\n      mid = Math.imul(al7, bh0);\n      mid = mid + Math.imul(ah7, bl0) | 0;\n      hi = Math.imul(ah7, bh0);\n      lo = lo + Math.imul(al6, bl1) | 0;\n      mid = mid + Math.imul(al6, bh1) | 0;\n      mid = mid + Math.imul(ah6, bl1) | 0;\n      hi = hi + Math.imul(ah6, bh1) | 0;\n      lo = lo + Math.imul(al5, bl2) | 0;\n      mid = mid + Math.imul(al5, bh2) | 0;\n      mid = mid + Math.imul(ah5, bl2) | 0;\n      hi = hi + Math.imul(ah5, bh2) | 0;\n      lo = lo + Math.imul(al4, bl3) | 0;\n      mid = mid + Math.imul(al4, bh3) | 0;\n      mid = mid + Math.imul(ah4, bl3) | 0;\n      hi = hi + Math.imul(ah4, bh3) | 0;\n      lo = lo + Math.imul(al3, bl4) | 0;\n      mid = mid + Math.imul(al3, bh4) | 0;\n      mid = mid + Math.imul(ah3, bl4) | 0;\n      hi = hi + Math.imul(ah3, bh4) | 0;\n      lo = lo + Math.imul(al2, bl5) | 0;\n      mid = mid + Math.imul(al2, bh5) | 0;\n      mid = mid + Math.imul(ah2, bl5) | 0;\n      hi = hi + Math.imul(ah2, bh5) | 0;\n      lo = lo + Math.imul(al1, bl6) | 0;\n      mid = mid + Math.imul(al1, bh6) | 0;\n      mid = mid + Math.imul(ah1, bl6) | 0;\n      hi = hi + Math.imul(ah1, bh6) | 0;\n      lo = lo + Math.imul(al0, bl7) | 0;\n      mid = mid + Math.imul(al0, bh7) | 0;\n      mid = mid + Math.imul(ah0, bl7) | 0;\n      hi = hi + Math.imul(ah0, bh7) | 0;\n      var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n      w7 &= 0x3ffffff;\n      /* k = 8 */\n\n      lo = Math.imul(al8, bl0);\n      mid = Math.imul(al8, bh0);\n      mid = mid + Math.imul(ah8, bl0) | 0;\n      hi = Math.imul(ah8, bh0);\n      lo = lo + Math.imul(al7, bl1) | 0;\n      mid = mid + Math.imul(al7, bh1) | 0;\n      mid = mid + Math.imul(ah7, bl1) | 0;\n      hi = hi + Math.imul(ah7, bh1) | 0;\n      lo = lo + Math.imul(al6, bl2) | 0;\n      mid = mid + Math.imul(al6, bh2) | 0;\n      mid = mid + Math.imul(ah6, bl2) | 0;\n      hi = hi + Math.imul(ah6, bh2) | 0;\n      lo = lo + Math.imul(al5, bl3) | 0;\n      mid = mid + Math.imul(al5, bh3) | 0;\n      mid = mid + Math.imul(ah5, bl3) | 0;\n      hi = hi + Math.imul(ah5, bh3) | 0;\n      lo = lo + Math.imul(al4, bl4) | 0;\n      mid = mid + Math.imul(al4, bh4) | 0;\n      mid = mid + Math.imul(ah4, bl4) | 0;\n      hi = hi + Math.imul(ah4, bh4) | 0;\n      lo = lo + Math.imul(al3, bl5) | 0;\n      mid = mid + Math.imul(al3, bh5) | 0;\n      mid = mid + Math.imul(ah3, bl5) | 0;\n      hi = hi + Math.imul(ah3, bh5) | 0;\n      lo = lo + Math.imul(al2, bl6) | 0;\n      mid = mid + Math.imul(al2, bh6) | 0;\n      mid = mid + Math.imul(ah2, bl6) | 0;\n      hi = hi + Math.imul(ah2, bh6) | 0;\n      lo = lo + Math.imul(al1, bl7) | 0;\n      mid = mid + Math.imul(al1, bh7) | 0;\n      mid = mid + Math.imul(ah1, bl7) | 0;\n      hi = hi + Math.imul(ah1, bh7) | 0;\n      lo = lo + Math.imul(al0, bl8) | 0;\n      mid = mid + Math.imul(al0, bh8) | 0;\n      mid = mid + Math.imul(ah0, bl8) | 0;\n      hi = hi + Math.imul(ah0, bh8) | 0;\n      var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n      w8 &= 0x3ffffff;\n      /* k = 9 */\n\n      lo = Math.imul(al9, bl0);\n      mid = Math.imul(al9, bh0);\n      mid = mid + Math.imul(ah9, bl0) | 0;\n      hi = Math.imul(ah9, bh0);\n      lo = lo + Math.imul(al8, bl1) | 0;\n      mid = mid + Math.imul(al8, bh1) | 0;\n      mid = mid + Math.imul(ah8, bl1) | 0;\n      hi = hi + Math.imul(ah8, bh1) | 0;\n      lo = lo + Math.imul(al7, bl2) | 0;\n      mid = mid + Math.imul(al7, bh2) | 0;\n      mid = mid + Math.imul(ah7, bl2) | 0;\n      hi = hi + Math.imul(ah7, bh2) | 0;\n      lo = lo + Math.imul(al6, bl3) | 0;\n      mid = mid + Math.imul(al6, bh3) | 0;\n      mid = mid + Math.imul(ah6, bl3) | 0;\n      hi = hi + Math.imul(ah6, bh3) | 0;\n      lo = lo + Math.imul(al5, bl4) | 0;\n      mid = mid + Math.imul(al5, bh4) | 0;\n      mid = mid + Math.imul(ah5, bl4) | 0;\n      hi = hi + Math.imul(ah5, bh4) | 0;\n      lo = lo + Math.imul(al4, bl5) | 0;\n      mid = mid + Math.imul(al4, bh5) | 0;\n      mid = mid + Math.imul(ah4, bl5) | 0;\n      hi = hi + Math.imul(ah4, bh5) | 0;\n      lo = lo + Math.imul(al3, bl6) | 0;\n      mid = mid + Math.imul(al3, bh6) | 0;\n      mid = mid + Math.imul(ah3, bl6) | 0;\n      hi = hi + Math.imul(ah3, bh6) | 0;\n      lo = lo + Math.imul(al2, bl7) | 0;\n      mid = mid + Math.imul(al2, bh7) | 0;\n      mid = mid + Math.imul(ah2, bl7) | 0;\n      hi = hi + Math.imul(ah2, bh7) | 0;\n      lo = lo + Math.imul(al1, bl8) | 0;\n      mid = mid + Math.imul(al1, bh8) | 0;\n      mid = mid + Math.imul(ah1, bl8) | 0;\n      hi = hi + Math.imul(ah1, bh8) | 0;\n      lo = lo + Math.imul(al0, bl9) | 0;\n      mid = mid + Math.imul(al0, bh9) | 0;\n      mid = mid + Math.imul(ah0, bl9) | 0;\n      hi = hi + Math.imul(ah0, bh9) | 0;\n      var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n      w9 &= 0x3ffffff;\n      /* k = 10 */\n\n      lo = Math.imul(al9, bl1);\n      mid = Math.imul(al9, bh1);\n      mid = mid + Math.imul(ah9, bl1) | 0;\n      hi = Math.imul(ah9, bh1);\n      lo = lo + Math.imul(al8, bl2) | 0;\n      mid = mid + Math.imul(al8, bh2) | 0;\n      mid = mid + Math.imul(ah8, bl2) | 0;\n      hi = hi + Math.imul(ah8, bh2) | 0;\n      lo = lo + Math.imul(al7, bl3) | 0;\n      mid = mid + Math.imul(al7, bh3) | 0;\n      mid = mid + Math.imul(ah7, bl3) | 0;\n      hi = hi + Math.imul(ah7, bh3) | 0;\n      lo = lo + Math.imul(al6, bl4) | 0;\n      mid = mid + Math.imul(al6, bh4) | 0;\n      mid = mid + Math.imul(ah6, bl4) | 0;\n      hi = hi + Math.imul(ah6, bh4) | 0;\n      lo = lo + Math.imul(al5, bl5) | 0;\n      mid = mid + Math.imul(al5, bh5) | 0;\n      mid = mid + Math.imul(ah5, bl5) | 0;\n      hi = hi + Math.imul(ah5, bh5) | 0;\n      lo = lo + Math.imul(al4, bl6) | 0;\n      mid = mid + Math.imul(al4, bh6) | 0;\n      mid = mid + Math.imul(ah4, bl6) | 0;\n      hi = hi + Math.imul(ah4, bh6) | 0;\n      lo = lo + Math.imul(al3, bl7) | 0;\n      mid = mid + Math.imul(al3, bh7) | 0;\n      mid = mid + Math.imul(ah3, bl7) | 0;\n      hi = hi + Math.imul(ah3, bh7) | 0;\n      lo = lo + Math.imul(al2, bl8) | 0;\n      mid = mid + Math.imul(al2, bh8) | 0;\n      mid = mid + Math.imul(ah2, bl8) | 0;\n      hi = hi + Math.imul(ah2, bh8) | 0;\n      lo = lo + Math.imul(al1, bl9) | 0;\n      mid = mid + Math.imul(al1, bh9) | 0;\n      mid = mid + Math.imul(ah1, bl9) | 0;\n      hi = hi + Math.imul(ah1, bh9) | 0;\n      var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n      w10 &= 0x3ffffff;\n      /* k = 11 */\n\n      lo = Math.imul(al9, bl2);\n      mid = Math.imul(al9, bh2);\n      mid = mid + Math.imul(ah9, bl2) | 0;\n      hi = Math.imul(ah9, bh2);\n      lo = lo + Math.imul(al8, bl3) | 0;\n      mid = mid + Math.imul(al8, bh3) | 0;\n      mid = mid + Math.imul(ah8, bl3) | 0;\n      hi = hi + Math.imul(ah8, bh3) | 0;\n      lo = lo + Math.imul(al7, bl4) | 0;\n      mid = mid + Math.imul(al7, bh4) | 0;\n      mid = mid + Math.imul(ah7, bl4) | 0;\n      hi = hi + Math.imul(ah7, bh4) | 0;\n      lo = lo + Math.imul(al6, bl5) | 0;\n      mid = mid + Math.imul(al6, bh5) | 0;\n      mid = mid + Math.imul(ah6, bl5) | 0;\n      hi = hi + Math.imul(ah6, bh5) | 0;\n      lo = lo + Math.imul(al5, bl6) | 0;\n      mid = mid + Math.imul(al5, bh6) | 0;\n      mid = mid + Math.imul(ah5, bl6) | 0;\n      hi = hi + Math.imul(ah5, bh6) | 0;\n      lo = lo + Math.imul(al4, bl7) | 0;\n      mid = mid + Math.imul(al4, bh7) | 0;\n      mid = mid + Math.imul(ah4, bl7) | 0;\n      hi = hi + Math.imul(ah4, bh7) | 0;\n      lo = lo + Math.imul(al3, bl8) | 0;\n      mid = mid + Math.imul(al3, bh8) | 0;\n      mid = mid + Math.imul(ah3, bl8) | 0;\n      hi = hi + Math.imul(ah3, bh8) | 0;\n      lo = lo + Math.imul(al2, bl9) | 0;\n      mid = mid + Math.imul(al2, bh9) | 0;\n      mid = mid + Math.imul(ah2, bl9) | 0;\n      hi = hi + Math.imul(ah2, bh9) | 0;\n      var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n      w11 &= 0x3ffffff;\n      /* k = 12 */\n\n      lo = Math.imul(al9, bl3);\n      mid = Math.imul(al9, bh3);\n      mid = mid + Math.imul(ah9, bl3) | 0;\n      hi = Math.imul(ah9, bh3);\n      lo = lo + Math.imul(al8, bl4) | 0;\n      mid = mid + Math.imul(al8, bh4) | 0;\n      mid = mid + Math.imul(ah8, bl4) | 0;\n      hi = hi + Math.imul(ah8, bh4) | 0;\n      lo = lo + Math.imul(al7, bl5) | 0;\n      mid = mid + Math.imul(al7, bh5) | 0;\n      mid = mid + Math.imul(ah7, bl5) | 0;\n      hi = hi + Math.imul(ah7, bh5) | 0;\n      lo = lo + Math.imul(al6, bl6) | 0;\n      mid = mid + Math.imul(al6, bh6) | 0;\n      mid = mid + Math.imul(ah6, bl6) | 0;\n      hi = hi + Math.imul(ah6, bh6) | 0;\n      lo = lo + Math.imul(al5, bl7) | 0;\n      mid = mid + Math.imul(al5, bh7) | 0;\n      mid = mid + Math.imul(ah5, bl7) | 0;\n      hi = hi + Math.imul(ah5, bh7) | 0;\n      lo = lo + Math.imul(al4, bl8) | 0;\n      mid = mid + Math.imul(al4, bh8) | 0;\n      mid = mid + Math.imul(ah4, bl8) | 0;\n      hi = hi + Math.imul(ah4, bh8) | 0;\n      lo = lo + Math.imul(al3, bl9) | 0;\n      mid = mid + Math.imul(al3, bh9) | 0;\n      mid = mid + Math.imul(ah3, bl9) | 0;\n      hi = hi + Math.imul(ah3, bh9) | 0;\n      var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n      w12 &= 0x3ffffff;\n      /* k = 13 */\n\n      lo = Math.imul(al9, bl4);\n      mid = Math.imul(al9, bh4);\n      mid = mid + Math.imul(ah9, bl4) | 0;\n      hi = Math.imul(ah9, bh4);\n      lo = lo + Math.imul(al8, bl5) | 0;\n      mid = mid + Math.imul(al8, bh5) | 0;\n      mid = mid + Math.imul(ah8, bl5) | 0;\n      hi = hi + Math.imul(ah8, bh5) | 0;\n      lo = lo + Math.imul(al7, bl6) | 0;\n      mid = mid + Math.imul(al7, bh6) | 0;\n      mid = mid + Math.imul(ah7, bl6) | 0;\n      hi = hi + Math.imul(ah7, bh6) | 0;\n      lo = lo + Math.imul(al6, bl7) | 0;\n      mid = mid + Math.imul(al6, bh7) | 0;\n      mid = mid + Math.imul(ah6, bl7) | 0;\n      hi = hi + Math.imul(ah6, bh7) | 0;\n      lo = lo + Math.imul(al5, bl8) | 0;\n      mid = mid + Math.imul(al5, bh8) | 0;\n      mid = mid + Math.imul(ah5, bl8) | 0;\n      hi = hi + Math.imul(ah5, bh8) | 0;\n      lo = lo + Math.imul(al4, bl9) | 0;\n      mid = mid + Math.imul(al4, bh9) | 0;\n      mid = mid + Math.imul(ah4, bl9) | 0;\n      hi = hi + Math.imul(ah4, bh9) | 0;\n      var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n      w13 &= 0x3ffffff;\n      /* k = 14 */\n\n      lo = Math.imul(al9, bl5);\n      mid = Math.imul(al9, bh5);\n      mid = mid + Math.imul(ah9, bl5) | 0;\n      hi = Math.imul(ah9, bh5);\n      lo = lo + Math.imul(al8, bl6) | 0;\n      mid = mid + Math.imul(al8, bh6) | 0;\n      mid = mid + Math.imul(ah8, bl6) | 0;\n      hi = hi + Math.imul(ah8, bh6) | 0;\n      lo = lo + Math.imul(al7, bl7) | 0;\n      mid = mid + Math.imul(al7, bh7) | 0;\n      mid = mid + Math.imul(ah7, bl7) | 0;\n      hi = hi + Math.imul(ah7, bh7) | 0;\n      lo = lo + Math.imul(al6, bl8) | 0;\n      mid = mid + Math.imul(al6, bh8) | 0;\n      mid = mid + Math.imul(ah6, bl8) | 0;\n      hi = hi + Math.imul(ah6, bh8) | 0;\n      lo = lo + Math.imul(al5, bl9) | 0;\n      mid = mid + Math.imul(al5, bh9) | 0;\n      mid = mid + Math.imul(ah5, bl9) | 0;\n      hi = hi + Math.imul(ah5, bh9) | 0;\n      var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n      w14 &= 0x3ffffff;\n      /* k = 15 */\n\n      lo = Math.imul(al9, bl6);\n      mid = Math.imul(al9, bh6);\n      mid = mid + Math.imul(ah9, bl6) | 0;\n      hi = Math.imul(ah9, bh6);\n      lo = lo + Math.imul(al8, bl7) | 0;\n      mid = mid + Math.imul(al8, bh7) | 0;\n      mid = mid + Math.imul(ah8, bl7) | 0;\n      hi = hi + Math.imul(ah8, bh7) | 0;\n      lo = lo + Math.imul(al7, bl8) | 0;\n      mid = mid + Math.imul(al7, bh8) | 0;\n      mid = mid + Math.imul(ah7, bl8) | 0;\n      hi = hi + Math.imul(ah7, bh8) | 0;\n      lo = lo + Math.imul(al6, bl9) | 0;\n      mid = mid + Math.imul(al6, bh9) | 0;\n      mid = mid + Math.imul(ah6, bl9) | 0;\n      hi = hi + Math.imul(ah6, bh9) | 0;\n      var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n      w15 &= 0x3ffffff;\n      /* k = 16 */\n\n      lo = Math.imul(al9, bl7);\n      mid = Math.imul(al9, bh7);\n      mid = mid + Math.imul(ah9, bl7) | 0;\n      hi = Math.imul(ah9, bh7);\n      lo = lo + Math.imul(al8, bl8) | 0;\n      mid = mid + Math.imul(al8, bh8) | 0;\n      mid = mid + Math.imul(ah8, bl8) | 0;\n      hi = hi + Math.imul(ah8, bh8) | 0;\n      lo = lo + Math.imul(al7, bl9) | 0;\n      mid = mid + Math.imul(al7, bh9) | 0;\n      mid = mid + Math.imul(ah7, bl9) | 0;\n      hi = hi + Math.imul(ah7, bh9) | 0;\n      var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n      w16 &= 0x3ffffff;\n      /* k = 17 */\n\n      lo = Math.imul(al9, bl8);\n      mid = Math.imul(al9, bh8);\n      mid = mid + Math.imul(ah9, bl8) | 0;\n      hi = Math.imul(ah9, bh8);\n      lo = lo + Math.imul(al8, bl9) | 0;\n      mid = mid + Math.imul(al8, bh9) | 0;\n      mid = mid + Math.imul(ah8, bl9) | 0;\n      hi = hi + Math.imul(ah8, bh9) | 0;\n      var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n      w17 &= 0x3ffffff;\n      /* k = 18 */\n\n      lo = Math.imul(al9, bl9);\n      mid = Math.imul(al9, bh9);\n      mid = mid + Math.imul(ah9, bl9) | 0;\n      hi = Math.imul(ah9, bh9);\n      var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n      c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n      w18 &= 0x3ffffff;\n      o[0] = w0;\n      o[1] = w1;\n      o[2] = w2;\n      o[3] = w3;\n      o[4] = w4;\n      o[5] = w5;\n      o[6] = w6;\n      o[7] = w7;\n      o[8] = w8;\n      o[9] = w9;\n      o[10] = w10;\n      o[11] = w11;\n      o[12] = w12;\n      o[13] = w13;\n      o[14] = w14;\n      o[15] = w15;\n      o[16] = w16;\n      o[17] = w17;\n      o[18] = w18;\n\n      if (c !== 0) {\n        o[19] = c;\n        out.length++;\n      }\n\n      return out;\n    }; // Polyfill comb\n\n\n    if (!Math.imul) {\n      comb10MulTo = smallMulTo;\n    }\n\n    function bigMulTo(self, num, out) {\n      out.negative = num.negative ^ self.negative;\n      out.length = self.length + num.length;\n      var carry = 0;\n      var hncarry = 0;\n\n      for (var k = 0; k < out.length - 1; k++) {\n        // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n        // note that ncarry could be >= 0x3ffffff\n        var ncarry = hncarry;\n        hncarry = 0;\n        var rword = carry & 0x3ffffff;\n        var maxJ = Math.min(k, num.length - 1);\n\n        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n          var i = k - j;\n          var a = self.words[i] | 0;\n          var b = num.words[j] | 0;\n          var r = a * b;\n          var lo = r & 0x3ffffff;\n          ncarry = ncarry + (r / 0x4000000 | 0) | 0;\n          lo = lo + rword | 0;\n          rword = lo & 0x3ffffff;\n          ncarry = ncarry + (lo >>> 26) | 0;\n          hncarry += ncarry >>> 26;\n          ncarry &= 0x3ffffff;\n        }\n\n        out.words[k] = rword;\n        carry = ncarry;\n        ncarry = hncarry;\n      }\n\n      if (carry !== 0) {\n        out.words[k] = carry;\n      } else {\n        out.length--;\n      }\n\n      return out.strip();\n    }\n\n    function jumboMulTo(self, num, out) {\n      var fftm = new FFTM();\n      return fftm.mulp(self, num, out);\n    }\n\n    BN.prototype.mulTo = function mulTo(num, out) {\n      var res;\n      var len = this.length + num.length;\n\n      if (this.length === 10 && num.length === 10) {\n        res = comb10MulTo(this, num, out);\n      } else if (len < 63) {\n        res = smallMulTo(this, num, out);\n      } else if (len < 1024) {\n        res = bigMulTo(this, num, out);\n      } else {\n        res = jumboMulTo(this, num, out);\n      }\n\n      return res;\n    }; // Cooley-Tukey algorithm for FFT\n    // slightly revisited to rely on looping instead of recursion\n\n\n    function FFTM(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n\n    FFTM.prototype.makeRBT = function makeRBT(N) {\n      var t = new Array(N);\n      var l = BN.prototype._countBits(N) - 1;\n\n      for (var i = 0; i < N; i++) {\n        t[i] = this.revBin(i, l, N);\n      }\n\n      return t;\n    }; // Returns binary-reversed representation of `x`\n\n\n    FFTM.prototype.revBin = function revBin(x, l, N) {\n      if (x === 0 || x === N - 1) return x;\n      var rb = 0;\n\n      for (var i = 0; i < l; i++) {\n        rb |= (x & 1) << l - i - 1;\n        x >>= 1;\n      }\n\n      return rb;\n    }; // Performs \"tweedling\" phase, therefore 'emulating'\n    // behaviour of the recursive algorithm\n\n\n    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n      for (var i = 0; i < N; i++) {\n        rtws[i] = rws[rbt[i]];\n        itws[i] = iws[rbt[i]];\n      }\n    };\n\n    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n      this.permute(rbt, rws, iws, rtws, itws, N);\n\n      for (var s = 1; s < N; s <<= 1) {\n        var l = s << 1;\n        var rtwdf = Math.cos(2 * Math.PI / l);\n        var itwdf = Math.sin(2 * Math.PI / l);\n\n        for (var p = 0; p < N; p += l) {\n          var rtwdf_ = rtwdf;\n          var itwdf_ = itwdf;\n\n          for (var j = 0; j < s; j++) {\n            var re = rtws[p + j];\n            var ie = itws[p + j];\n            var ro = rtws[p + j + s];\n            var io = itws[p + j + s];\n            var rx = rtwdf_ * ro - itwdf_ * io;\n            io = rtwdf_ * io + itwdf_ * ro;\n            ro = rx;\n            rtws[p + j] = re + ro;\n            itws[p + j] = ie + io;\n            rtws[p + j + s] = re - ro;\n            itws[p + j + s] = ie - io;\n            /* jshint maxdepth : false */\n\n            if (j !== l) {\n              rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n              rtwdf_ = rx;\n            }\n          }\n        }\n      }\n    };\n\n    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n      var N = Math.max(m, n) | 1;\n      var odd = N & 1;\n      var i = 0;\n\n      for (N = N / 2 | 0; N; N = N >>> 1) {\n        i++;\n      }\n\n      return 1 << i + 1 + odd;\n    };\n\n    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n      if (N <= 1) return;\n\n      for (var i = 0; i < N / 2; i++) {\n        var t = rws[i];\n        rws[i] = rws[N - i - 1];\n        rws[N - i - 1] = t;\n        t = iws[i];\n        iws[i] = -iws[N - i - 1];\n        iws[N - i - 1] = -t;\n      }\n    };\n\n    FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n      var carry = 0;\n\n      for (var i = 0; i < N / 2; i++) {\n        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;\n        ws[i] = w & 0x3ffffff;\n\n        if (w < 0x4000000) {\n          carry = 0;\n        } else {\n          carry = w / 0x4000000 | 0;\n        }\n      }\n\n      return ws;\n    };\n\n    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n      var carry = 0;\n\n      for (var i = 0; i < len; i++) {\n        carry = carry + (ws[i] | 0);\n        rws[2 * i] = carry & 0x1fff;\n        carry = carry >>> 13;\n        rws[2 * i + 1] = carry & 0x1fff;\n        carry = carry >>> 13;\n      } // Pad with zeroes\n\n\n      for (i = 2 * len; i < N; ++i) {\n        rws[i] = 0;\n      }\n\n      assert(carry === 0);\n      assert((carry & ~0x1fff) === 0);\n    };\n\n    FFTM.prototype.stub = function stub(N) {\n      var ph = new Array(N);\n\n      for (var i = 0; i < N; i++) {\n        ph[i] = 0;\n      }\n\n      return ph;\n    };\n\n    FFTM.prototype.mulp = function mulp(x, y, out) {\n      var N = 2 * this.guessLen13b(x.length, y.length);\n      var rbt = this.makeRBT(N);\n\n      var _ = this.stub(N);\n\n      var rws = new Array(N);\n      var rwst = new Array(N);\n      var iwst = new Array(N);\n      var nrws = new Array(N);\n      var nrwst = new Array(N);\n      var niwst = new Array(N);\n      var rmws = out.words;\n      rmws.length = N;\n      this.convert13b(x.words, x.length, rws, N);\n      this.convert13b(y.words, y.length, nrws, N);\n      this.transform(rws, _, rwst, iwst, N, rbt);\n      this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n      for (var i = 0; i < N; i++) {\n        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n        rwst[i] = rx;\n      }\n\n      this.conjugate(rwst, iwst, N);\n      this.transform(rwst, iwst, rmws, _, N, rbt);\n      this.conjugate(rmws, _, N);\n      this.normalize13b(rmws, N);\n      out.negative = x.negative ^ y.negative;\n      out.length = x.length + y.length;\n      return out.strip();\n    }; // Multiply `this` by `num`\n\n\n    BN.prototype.mul = function mul(num) {\n      var out = new BN(null);\n      out.words = new Array(this.length + num.length);\n      return this.mulTo(num, out);\n    }; // Multiply employing FFT\n\n\n    BN.prototype.mulf = function mulf(num) {\n      var out = new BN(null);\n      out.words = new Array(this.length + num.length);\n      return jumboMulTo(this, num, out);\n    }; // In-place Multiplication\n\n\n    BN.prototype.imul = function imul(num) {\n      return this.clone().mulTo(num, this);\n    };\n\n    BN.prototype.imuln = function imuln(num) {\n      assert(typeof num === 'number');\n      assert(num < 0x4000000); // Carry\n\n      var carry = 0;\n\n      for (var i = 0; i < this.length; i++) {\n        var w = (this.words[i] | 0) * num;\n        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n        carry >>= 26;\n        carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum\n\n        carry += lo >>> 26;\n        this.words[i] = lo & 0x3ffffff;\n      }\n\n      if (carry !== 0) {\n        this.words[i] = carry;\n        this.length++;\n      }\n\n      return this;\n    };\n\n    BN.prototype.muln = function muln(num) {\n      return this.clone().imuln(num);\n    }; // `this` * `this`\n\n\n    BN.prototype.sqr = function sqr() {\n      return this.mul(this);\n    }; // `this` * `this` in-place\n\n\n    BN.prototype.isqr = function isqr() {\n      return this.imul(this.clone());\n    }; // Math.pow(`this`, `num`)\n\n\n    BN.prototype.pow = function pow(num) {\n      var w = toBitArray(num);\n      if (w.length === 0) return new BN(1); // Skip leading zeroes\n\n      var res = this;\n\n      for (var i = 0; i < w.length; i++, res = res.sqr()) {\n        if (w[i] !== 0) break;\n      }\n\n      if (++i < w.length) {\n        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n          if (w[i] === 0) continue;\n          res = res.mul(q);\n        }\n      }\n\n      return res;\n    }; // Shift-left in-place\n\n\n    BN.prototype.iushln = function iushln(bits) {\n      assert(typeof bits === 'number' && bits >= 0);\n      var r = bits % 26;\n      var s = (bits - r) / 26;\n      var carryMask = 0x3ffffff >>> 26 - r << 26 - r;\n      var i;\n\n      if (r !== 0) {\n        var carry = 0;\n\n        for (i = 0; i < this.length; i++) {\n          var newCarry = this.words[i] & carryMask;\n          var c = (this.words[i] | 0) - newCarry << r;\n          this.words[i] = c | carry;\n          carry = newCarry >>> 26 - r;\n        }\n\n        if (carry) {\n          this.words[i] = carry;\n          this.length++;\n        }\n      }\n\n      if (s !== 0) {\n        for (i = this.length - 1; i >= 0; i--) {\n          this.words[i + s] = this.words[i];\n        }\n\n        for (i = 0; i < s; i++) {\n          this.words[i] = 0;\n        }\n\n        this.length += s;\n      }\n\n      return this.strip();\n    };\n\n    BN.prototype.ishln = function ishln(bits) {\n      // TODO(indutny): implement me\n      assert(this.negative === 0);\n      return this.iushln(bits);\n    }; // Shift-right in-place\n    // NOTE: `hint` is a lowest bit before trailing zeroes\n    // NOTE: if `extended` is present - it will be filled with destroyed bits\n\n\n    BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n      assert(typeof bits === 'number' && bits >= 0);\n      var h;\n\n      if (hint) {\n        h = (hint - hint % 26) / 26;\n      } else {\n        h = 0;\n      }\n\n      var r = bits % 26;\n      var s = Math.min((bits - r) / 26, this.length);\n      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n      var maskedWords = extended;\n      h -= s;\n      h = Math.max(0, h); // Extended mode, copy masked part\n\n      if (maskedWords) {\n        for (var i = 0; i < s; i++) {\n          maskedWords.words[i] = this.words[i];\n        }\n\n        maskedWords.length = s;\n      }\n\n      if (s === 0) ;else if (this.length > s) {\n        this.length -= s;\n\n        for (i = 0; i < this.length; i++) {\n          this.words[i] = this.words[i + s];\n        }\n      } else {\n        this.words[0] = 0;\n        this.length = 1;\n      }\n      var carry = 0;\n\n      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n        var word = this.words[i] | 0;\n        this.words[i] = carry << 26 - r | word >>> r;\n        carry = word & mask;\n      } // Push carried bits as a mask\n\n\n      if (maskedWords && carry !== 0) {\n        maskedWords.words[maskedWords.length++] = carry;\n      }\n\n      if (this.length === 0) {\n        this.words[0] = 0;\n        this.length = 1;\n      }\n\n      return this.strip();\n    };\n\n    BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n      // TODO(indutny): implement me\n      assert(this.negative === 0);\n      return this.iushrn(bits, hint, extended);\n    }; // Shift-left\n\n\n    BN.prototype.shln = function shln(bits) {\n      return this.clone().ishln(bits);\n    };\n\n    BN.prototype.ushln = function ushln(bits) {\n      return this.clone().iushln(bits);\n    }; // Shift-right\n\n\n    BN.prototype.shrn = function shrn(bits) {\n      return this.clone().ishrn(bits);\n    };\n\n    BN.prototype.ushrn = function ushrn(bits) {\n      return this.clone().iushrn(bits);\n    }; // Test if n bit is set\n\n\n    BN.prototype.testn = function testn(bit) {\n      assert(typeof bit === 'number' && bit >= 0);\n      var r = bit % 26;\n      var s = (bit - r) / 26;\n      var q = 1 << r; // Fast case: bit is much higher than all existing words\n\n      if (this.length <= s) return false; // Check bit and return\n\n      var w = this.words[s];\n      return !!(w & q);\n    }; // Return only lowers bits of number (in-place)\n\n\n    BN.prototype.imaskn = function imaskn(bits) {\n      assert(typeof bits === 'number' && bits >= 0);\n      var r = bits % 26;\n      var s = (bits - r) / 26;\n      assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n      if (this.length <= s) {\n        return this;\n      }\n\n      if (r !== 0) {\n        s++;\n      }\n\n      this.length = Math.min(s, this.length);\n\n      if (r !== 0) {\n        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n        this.words[this.length - 1] &= mask;\n      }\n\n      return this.strip();\n    }; // Return only lowers bits of number\n\n\n    BN.prototype.maskn = function maskn(bits) {\n      return this.clone().imaskn(bits);\n    }; // Add plain number `num` to `this`\n\n\n    BN.prototype.iaddn = function iaddn(num) {\n      assert(typeof num === 'number');\n      assert(num < 0x4000000);\n      if (num < 0) return this.isubn(-num); // Possible sign change\n\n      if (this.negative !== 0) {\n        if (this.length === 1 && (this.words[0] | 0) < num) {\n          this.words[0] = num - (this.words[0] | 0);\n          this.negative = 0;\n          return this;\n        }\n\n        this.negative = 0;\n        this.isubn(num);\n        this.negative = 1;\n        return this;\n      } // Add without checks\n\n\n      return this._iaddn(num);\n    };\n\n    BN.prototype._iaddn = function _iaddn(num) {\n      this.words[0] += num; // Carry\n\n      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n        this.words[i] -= 0x4000000;\n\n        if (i === this.length - 1) {\n          this.words[i + 1] = 1;\n        } else {\n          this.words[i + 1]++;\n        }\n      }\n\n      this.length = Math.max(this.length, i + 1);\n      return this;\n    }; // Subtract plain number `num` from `this`\n\n\n    BN.prototype.isubn = function isubn(num) {\n      assert(typeof num === 'number');\n      assert(num < 0x4000000);\n      if (num < 0) return this.iaddn(-num);\n\n      if (this.negative !== 0) {\n        this.negative = 0;\n        this.iaddn(num);\n        this.negative = 1;\n        return this;\n      }\n\n      this.words[0] -= num;\n\n      if (this.length === 1 && this.words[0] < 0) {\n        this.words[0] = -this.words[0];\n        this.negative = 1;\n      } else {\n        // Carry\n        for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n          this.words[i] += 0x4000000;\n          this.words[i + 1] -= 1;\n        }\n      }\n\n      return this.strip();\n    };\n\n    BN.prototype.addn = function addn(num) {\n      return this.clone().iaddn(num);\n    };\n\n    BN.prototype.subn = function subn(num) {\n      return this.clone().isubn(num);\n    };\n\n    BN.prototype.iabs = function iabs() {\n      this.negative = 0;\n      return this;\n    };\n\n    BN.prototype.abs = function abs() {\n      return this.clone().iabs();\n    };\n\n    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n      var len = num.length + shift;\n      var i;\n\n      this._expand(len);\n\n      var w;\n      var carry = 0;\n\n      for (i = 0; i < num.length; i++) {\n        w = (this.words[i + shift] | 0) + carry;\n        var right = (num.words[i] | 0) * mul;\n        w -= right & 0x3ffffff;\n        carry = (w >> 26) - (right / 0x4000000 | 0);\n        this.words[i + shift] = w & 0x3ffffff;\n      }\n\n      for (; i < this.length - shift; i++) {\n        w = (this.words[i + shift] | 0) + carry;\n        carry = w >> 26;\n        this.words[i + shift] = w & 0x3ffffff;\n      }\n\n      if (carry === 0) return this.strip(); // Subtraction overflow\n\n      assert(carry === -1);\n      carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        w = -(this.words[i] | 0) + carry;\n        carry = w >> 26;\n        this.words[i] = w & 0x3ffffff;\n      }\n\n      this.negative = 1;\n      return this.strip();\n    };\n\n    BN.prototype._wordDiv = function _wordDiv(num, mode) {\n      var shift = this.length - num.length;\n      var a = this.clone();\n      var b = num; // Normalize\n\n      var bhi = b.words[b.length - 1] | 0;\n\n      var bhiBits = this._countBits(bhi);\n\n      shift = 26 - bhiBits;\n\n      if (shift !== 0) {\n        b = b.ushln(shift);\n        a.iushln(shift);\n        bhi = b.words[b.length - 1] | 0;\n      } // Initialize quotient\n\n\n      var m = a.length - b.length;\n      var q;\n\n      if (mode !== 'mod') {\n        q = new BN(null);\n        q.length = m + 1;\n        q.words = new Array(q.length);\n\n        for (var i = 0; i < q.length; i++) {\n          q.words[i] = 0;\n        }\n      }\n\n      var diff = a.clone()._ishlnsubmul(b, 1, m);\n\n      if (diff.negative === 0) {\n        a = diff;\n\n        if (q) {\n          q.words[m] = 1;\n        }\n      }\n\n      for (var j = m - 1; j >= 0; j--) {\n        var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n        // (0x7ffffff)\n\n        qj = Math.min(qj / bhi | 0, 0x3ffffff);\n\n        a._ishlnsubmul(b, qj, j);\n\n        while (a.negative !== 0) {\n          qj--;\n          a.negative = 0;\n\n          a._ishlnsubmul(b, 1, j);\n\n          if (!a.isZero()) {\n            a.negative ^= 1;\n          }\n        }\n\n        if (q) {\n          q.words[j] = qj;\n        }\n      }\n\n      if (q) {\n        q.strip();\n      }\n\n      a.strip(); // Denormalize\n\n      if (mode !== 'div' && shift !== 0) {\n        a.iushrn(shift);\n      }\n\n      return {\n        div: q || null,\n        mod: a\n      };\n    }; // NOTE: 1) `mode` can be set to `mod` to request mod only,\n    //       to `div` to request div only, or be absent to\n    //       request both div & mod\n    //       2) `positive` is true if unsigned mod is requested\n\n\n    BN.prototype.divmod = function divmod(num, mode, positive) {\n      assert(!num.isZero());\n\n      if (this.isZero()) {\n        return {\n          div: new BN(0),\n          mod: new BN(0)\n        };\n      }\n\n      var div, mod, res;\n\n      if (this.negative !== 0 && num.negative === 0) {\n        res = this.neg().divmod(num, mode);\n\n        if (mode !== 'mod') {\n          div = res.div.neg();\n        }\n\n        if (mode !== 'div') {\n          mod = res.mod.neg();\n\n          if (positive && mod.negative !== 0) {\n            mod.iadd(num);\n          }\n        }\n\n        return {\n          div: div,\n          mod: mod\n        };\n      }\n\n      if (this.negative === 0 && num.negative !== 0) {\n        res = this.divmod(num.neg(), mode);\n\n        if (mode !== 'mod') {\n          div = res.div.neg();\n        }\n\n        return {\n          div: div,\n          mod: res.mod\n        };\n      }\n\n      if ((this.negative & num.negative) !== 0) {\n        res = this.neg().divmod(num.neg(), mode);\n\n        if (mode !== 'div') {\n          mod = res.mod.neg();\n\n          if (positive && mod.negative !== 0) {\n            mod.isub(num);\n          }\n        }\n\n        return {\n          div: res.div,\n          mod: mod\n        };\n      } // Both numbers are positive at this point\n      // Strip both numbers to approximate shift value\n\n\n      if (num.length > this.length || this.cmp(num) < 0) {\n        return {\n          div: new BN(0),\n          mod: this\n        };\n      } // Very short reduction\n\n\n      if (num.length === 1) {\n        if (mode === 'div') {\n          return {\n            div: this.divn(num.words[0]),\n            mod: null\n          };\n        }\n\n        if (mode === 'mod') {\n          return {\n            div: null,\n            mod: new BN(this.modn(num.words[0]))\n          };\n        }\n\n        return {\n          div: this.divn(num.words[0]),\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return this._wordDiv(num, mode);\n    }; // Find `this` / `num`\n\n\n    BN.prototype.div = function div(num) {\n      return this.divmod(num, 'div', false).div;\n    }; // Find `this` % `num`\n\n\n    BN.prototype.mod = function mod(num) {\n      return this.divmod(num, 'mod', false).mod;\n    };\n\n    BN.prototype.umod = function umod(num) {\n      return this.divmod(num, 'mod', true).mod;\n    }; // Find Round(`this` / `num`)\n\n\n    BN.prototype.divRound = function divRound(num) {\n      var dm = this.divmod(num); // Fast case - exact division\n\n      if (dm.mod.isZero()) return dm.div;\n      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n      var half = num.ushrn(1);\n      var r2 = num.andln(1);\n      var cmp = mod.cmp(half); // Round down\n\n      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up\n\n      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n    };\n\n    BN.prototype.modn = function modn(num) {\n      assert(num <= 0x3ffffff);\n      var p = (1 << 26) % num;\n      var acc = 0;\n\n      for (var i = this.length - 1; i >= 0; i--) {\n        acc = (p * acc + (this.words[i] | 0)) % num;\n      }\n\n      return acc;\n    }; // In-place division by number\n\n\n    BN.prototype.idivn = function idivn(num) {\n      assert(num <= 0x3ffffff);\n      var carry = 0;\n\n      for (var i = this.length - 1; i >= 0; i--) {\n        var w = (this.words[i] | 0) + carry * 0x4000000;\n        this.words[i] = w / num | 0;\n        carry = w % num;\n      }\n\n      return this.strip();\n    };\n\n    BN.prototype.divn = function divn(num) {\n      return this.clone().idivn(num);\n    };\n\n    BN.prototype.egcd = function egcd(p) {\n      assert(p.negative === 0);\n      assert(!p.isZero());\n      var x = this;\n      var y = p.clone();\n\n      if (x.negative !== 0) {\n        x = x.umod(p);\n      } else {\n        x = x.clone();\n      } // A * x + B * y = x\n\n\n      var A = new BN(1);\n      var B = new BN(0); // C * x + D * y = y\n\n      var C = new BN(0);\n      var D = new BN(1);\n      var g = 0;\n\n      while (x.isEven() && y.isEven()) {\n        x.iushrn(1);\n        y.iushrn(1);\n        ++g;\n      }\n\n      var yp = y.clone();\n      var xp = x.clone();\n\n      while (!x.isZero()) {\n        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n\n        if (i > 0) {\n          x.iushrn(i);\n\n          while (i-- > 0) {\n            if (A.isOdd() || B.isOdd()) {\n              A.iadd(yp);\n              B.isub(xp);\n            }\n\n            A.iushrn(1);\n            B.iushrn(1);\n          }\n        }\n\n        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n\n        if (j > 0) {\n          y.iushrn(j);\n\n          while (j-- > 0) {\n            if (C.isOdd() || D.isOdd()) {\n              C.iadd(yp);\n              D.isub(xp);\n            }\n\n            C.iushrn(1);\n            D.iushrn(1);\n          }\n        }\n\n        if (x.cmp(y) >= 0) {\n          x.isub(y);\n          A.isub(C);\n          B.isub(D);\n        } else {\n          y.isub(x);\n          C.isub(A);\n          D.isub(B);\n        }\n      }\n\n      return {\n        a: C,\n        b: D,\n        gcd: y.iushln(g)\n      };\n    }; // This is reduced incarnation of the binary EEA\n    // above, designated to invert members of the\n    // _prime_ fields F(p) at a maximal speed\n\n\n    BN.prototype._invmp = function _invmp(p) {\n      assert(p.negative === 0);\n      assert(!p.isZero());\n      var a = this;\n      var b = p.clone();\n\n      if (a.negative !== 0) {\n        a = a.umod(p);\n      } else {\n        a = a.clone();\n      }\n\n      var x1 = new BN(1);\n      var x2 = new BN(0);\n      var delta = b.clone();\n\n      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n\n        if (i > 0) {\n          a.iushrn(i);\n\n          while (i-- > 0) {\n            if (x1.isOdd()) {\n              x1.iadd(delta);\n            }\n\n            x1.iushrn(1);\n          }\n        }\n\n        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n\n        if (j > 0) {\n          b.iushrn(j);\n\n          while (j-- > 0) {\n            if (x2.isOdd()) {\n              x2.iadd(delta);\n            }\n\n            x2.iushrn(1);\n          }\n        }\n\n        if (a.cmp(b) >= 0) {\n          a.isub(b);\n          x1.isub(x2);\n        } else {\n          b.isub(a);\n          x2.isub(x1);\n        }\n      }\n\n      var res;\n\n      if (a.cmpn(1) === 0) {\n        res = x1;\n      } else {\n        res = x2;\n      }\n\n      if (res.cmpn(0) < 0) {\n        res.iadd(p);\n      }\n\n      return res;\n    };\n\n    BN.prototype.gcd = function gcd(num) {\n      if (this.isZero()) return num.abs();\n      if (num.isZero()) return this.abs();\n      var a = this.clone();\n      var b = num.clone();\n      a.negative = 0;\n      b.negative = 0; // Remove common factor of two\n\n      for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n        a.iushrn(1);\n        b.iushrn(1);\n      }\n\n      do {\n        while (a.isEven()) {\n          a.iushrn(1);\n        }\n\n        while (b.isEven()) {\n          b.iushrn(1);\n        }\n\n        var r = a.cmp(b);\n\n        if (r < 0) {\n          // Swap `a` and `b` to make `a` always bigger than `b`\n          var t = a;\n          a = b;\n          b = t;\n        } else if (r === 0 || b.cmpn(1) === 0) {\n          break;\n        }\n\n        a.isub(b);\n      } while (true);\n\n      return b.iushln(shift);\n    }; // Invert number in the field F(num)\n\n\n    BN.prototype.invm = function invm(num) {\n      return this.egcd(num).a.umod(num);\n    };\n\n    BN.prototype.isEven = function isEven() {\n      return (this.words[0] & 1) === 0;\n    };\n\n    BN.prototype.isOdd = function isOdd() {\n      return (this.words[0] & 1) === 1;\n    }; // And first word and num\n\n\n    BN.prototype.andln = function andln(num) {\n      return this.words[0] & num;\n    }; // Increment at the bit position in-line\n\n\n    BN.prototype.bincn = function bincn(bit) {\n      assert(typeof bit === 'number');\n      var r = bit % 26;\n      var s = (bit - r) / 26;\n      var q = 1 << r; // Fast case: bit is much higher than all existing words\n\n      if (this.length <= s) {\n        this._expand(s + 1);\n\n        this.words[s] |= q;\n        return this;\n      } // Add bit and propagate, if needed\n\n\n      var carry = q;\n\n      for (var i = s; carry !== 0 && i < this.length; i++) {\n        var w = this.words[i] | 0;\n        w += carry;\n        carry = w >>> 26;\n        w &= 0x3ffffff;\n        this.words[i] = w;\n      }\n\n      if (carry !== 0) {\n        this.words[i] = carry;\n        this.length++;\n      }\n\n      return this;\n    };\n\n    BN.prototype.isZero = function isZero() {\n      return this.length === 1 && this.words[0] === 0;\n    };\n\n    BN.prototype.cmpn = function cmpn(num) {\n      var negative = num < 0;\n      if (this.negative !== 0 && !negative) return -1;\n      if (this.negative === 0 && negative) return 1;\n      this.strip();\n      var res;\n\n      if (this.length > 1) {\n        res = 1;\n      } else {\n        if (negative) {\n          num = -num;\n        }\n\n        assert(num <= 0x3ffffff, 'Number is too big');\n        var w = this.words[0] | 0;\n        res = w === num ? 0 : w < num ? -1 : 1;\n      }\n\n      if (this.negative !== 0) return -res | 0;\n      return res;\n    }; // Compare two numbers and return:\n    // 1 - if `this` > `num`\n    // 0 - if `this` == `num`\n    // -1 - if `this` < `num`\n\n\n    BN.prototype.cmp = function cmp(num) {\n      if (this.negative !== 0 && num.negative === 0) return -1;\n      if (this.negative === 0 && num.negative !== 0) return 1;\n      var res = this.ucmp(num);\n      if (this.negative !== 0) return -res | 0;\n      return res;\n    }; // Unsigned comparison\n\n\n    BN.prototype.ucmp = function ucmp(num) {\n      // At this point both numbers have the same sign\n      if (this.length > num.length) return 1;\n      if (this.length < num.length) return -1;\n      var res = 0;\n\n      for (var i = this.length - 1; i >= 0; i--) {\n        var a = this.words[i] | 0;\n        var b = num.words[i] | 0;\n        if (a === b) continue;\n\n        if (a < b) {\n          res = -1;\n        } else if (a > b) {\n          res = 1;\n        }\n\n        break;\n      }\n\n      return res;\n    };\n\n    BN.prototype.gtn = function gtn(num) {\n      return this.cmpn(num) === 1;\n    };\n\n    BN.prototype.gt = function gt(num) {\n      return this.cmp(num) === 1;\n    };\n\n    BN.prototype.gten = function gten(num) {\n      return this.cmpn(num) >= 0;\n    };\n\n    BN.prototype.gte = function gte(num) {\n      return this.cmp(num) >= 0;\n    };\n\n    BN.prototype.ltn = function ltn(num) {\n      return this.cmpn(num) === -1;\n    };\n\n    BN.prototype.lt = function lt(num) {\n      return this.cmp(num) === -1;\n    };\n\n    BN.prototype.lten = function lten(num) {\n      return this.cmpn(num) <= 0;\n    };\n\n    BN.prototype.lte = function lte(num) {\n      return this.cmp(num) <= 0;\n    };\n\n    BN.prototype.eqn = function eqn(num) {\n      return this.cmpn(num) === 0;\n    };\n\n    BN.prototype.eq = function eq(num) {\n      return this.cmp(num) === 0;\n    }; //\n    // A reduce context, could be using montgomery or something better, depending\n    // on the `m` itself.\n    //\n\n\n    BN.red = function red(num) {\n      return new Red(num);\n    };\n\n    BN.prototype.toRed = function toRed(ctx) {\n      assert(!this.red, 'Already a number in reduction context');\n      assert(this.negative === 0, 'red works only with positives');\n      return ctx.convertTo(this)._forceRed(ctx);\n    };\n\n    BN.prototype.fromRed = function fromRed() {\n      assert(this.red, 'fromRed works only with numbers in reduction context');\n      return this.red.convertFrom(this);\n    };\n\n    BN.prototype._forceRed = function _forceRed(ctx) {\n      this.red = ctx;\n      return this;\n    };\n\n    BN.prototype.forceRed = function forceRed(ctx) {\n      assert(!this.red, 'Already a number in reduction context');\n      return this._forceRed(ctx);\n    };\n\n    BN.prototype.redAdd = function redAdd(num) {\n      assert(this.red, 'redAdd works only with red numbers');\n      return this.red.add(this, num);\n    };\n\n    BN.prototype.redIAdd = function redIAdd(num) {\n      assert(this.red, 'redIAdd works only with red numbers');\n      return this.red.iadd(this, num);\n    };\n\n    BN.prototype.redSub = function redSub(num) {\n      assert(this.red, 'redSub works only with red numbers');\n      return this.red.sub(this, num);\n    };\n\n    BN.prototype.redISub = function redISub(num) {\n      assert(this.red, 'redISub works only with red numbers');\n      return this.red.isub(this, num);\n    };\n\n    BN.prototype.redShl = function redShl(num) {\n      assert(this.red, 'redShl works only with red numbers');\n      return this.red.shl(this, num);\n    };\n\n    BN.prototype.redMul = function redMul(num) {\n      assert(this.red, 'redMul works only with red numbers');\n\n      this.red._verify2(this, num);\n\n      return this.red.mul(this, num);\n    };\n\n    BN.prototype.redIMul = function redIMul(num) {\n      assert(this.red, 'redMul works only with red numbers');\n\n      this.red._verify2(this, num);\n\n      return this.red.imul(this, num);\n    };\n\n    BN.prototype.redSqr = function redSqr() {\n      assert(this.red, 'redSqr works only with red numbers');\n\n      this.red._verify1(this);\n\n      return this.red.sqr(this);\n    };\n\n    BN.prototype.redISqr = function redISqr() {\n      assert(this.red, 'redISqr works only with red numbers');\n\n      this.red._verify1(this);\n\n      return this.red.isqr(this);\n    }; // Square root over p\n\n\n    BN.prototype.redSqrt = function redSqrt() {\n      assert(this.red, 'redSqrt works only with red numbers');\n\n      this.red._verify1(this);\n\n      return this.red.sqrt(this);\n    };\n\n    BN.prototype.redInvm = function redInvm() {\n      assert(this.red, 'redInvm works only with red numbers');\n\n      this.red._verify1(this);\n\n      return this.red.invm(this);\n    }; // Return negative clone of `this` % `red modulo`\n\n\n    BN.prototype.redNeg = function redNeg() {\n      assert(this.red, 'redNeg works only with red numbers');\n\n      this.red._verify1(this);\n\n      return this.red.neg(this);\n    };\n\n    BN.prototype.redPow = function redPow(num) {\n      assert(this.red && !num.red, 'redPow(normalNum)');\n\n      this.red._verify1(this);\n\n      return this.red.pow(this, num);\n    }; // Prime numbers with efficient reduction\n\n\n    var primes = {\n      k256: null,\n      p224: null,\n      p192: null,\n      p25519: null\n    }; // Pseudo-Mersenne prime\n\n    function MPrime(name, p) {\n      // P = 2 ^ N - K\n      this.name = name;\n      this.p = new BN(p, 16);\n      this.n = this.p.bitLength();\n      this.k = new BN(1).iushln(this.n).isub(this.p);\n      this.tmp = this._tmp();\n    }\n\n    MPrime.prototype._tmp = function _tmp() {\n      var tmp = new BN(null);\n      tmp.words = new Array(Math.ceil(this.n / 13));\n      return tmp;\n    };\n\n    MPrime.prototype.ireduce = function ireduce(num) {\n      // Assumes that `num` is less than `P^2`\n      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n      var r = num;\n      var rlen;\n\n      do {\n        this.split(r, this.tmp);\n        r = this.imulK(r);\n        r = r.iadd(this.tmp);\n        rlen = r.bitLength();\n      } while (rlen > this.n);\n\n      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n\n      if (cmp === 0) {\n        r.words[0] = 0;\n        r.length = 1;\n      } else if (cmp > 0) {\n        r.isub(this.p);\n      } else {\n        if (r.strip !== undefined) {\n          // r is BN v4 instance\n          r.strip();\n        } else {\n          // r is BN v5 instance\n          r._strip();\n        }\n      }\n\n      return r;\n    };\n\n    MPrime.prototype.split = function split(input, out) {\n      input.iushrn(this.n, 0, out);\n    };\n\n    MPrime.prototype.imulK = function imulK(num) {\n      return num.imul(this.k);\n    };\n\n    function K256() {\n      MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n    }\n\n    inherits(K256, MPrime);\n\n    K256.prototype.split = function split(input, output) {\n      // 256 = 9 * 26 + 22\n      var mask = 0x3fffff;\n      var outLen = Math.min(input.length, 9);\n\n      for (var i = 0; i < outLen; i++) {\n        output.words[i] = input.words[i];\n      }\n\n      output.length = outLen;\n\n      if (input.length <= 9) {\n        input.words[0] = 0;\n        input.length = 1;\n        return;\n      } // Shift by 9 limbs\n\n\n      var prev = input.words[9];\n      output.words[output.length++] = prev & mask;\n\n      for (i = 10; i < input.length; i++) {\n        var next = input.words[i] | 0;\n        input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n        prev = next;\n      }\n\n      prev >>>= 22;\n      input.words[i - 10] = prev;\n\n      if (prev === 0 && input.length > 10) {\n        input.length -= 10;\n      } else {\n        input.length -= 9;\n      }\n    };\n\n    K256.prototype.imulK = function imulK(num) {\n      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n      num.words[num.length] = 0;\n      num.words[num.length + 1] = 0;\n      num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n\n      var lo = 0;\n\n      for (var i = 0; i < num.length; i++) {\n        var w = num.words[i] | 0;\n        lo += w * 0x3d1;\n        num.words[i] = lo & 0x3ffffff;\n        lo = w * 0x40 + (lo / 0x4000000 | 0);\n      } // Fast length reduction\n\n\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n        }\n      }\n\n      return num;\n    };\n\n    function P224() {\n      MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n    }\n\n    inherits(P224, MPrime);\n\n    function P192() {\n      MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n    }\n\n    inherits(P192, MPrime);\n\n    function P25519() {\n      // 2 ^ 255 - 19\n      MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n    }\n\n    inherits(P25519, MPrime);\n\n    P25519.prototype.imulK = function imulK(num) {\n      // K = 0x13\n      var carry = 0;\n\n      for (var i = 0; i < num.length; i++) {\n        var hi = (num.words[i] | 0) * 0x13 + carry;\n        var lo = hi & 0x3ffffff;\n        hi >>>= 26;\n        num.words[i] = lo;\n        carry = hi;\n      }\n\n      if (carry !== 0) {\n        num.words[num.length++] = carry;\n      }\n\n      return num;\n    }; // Exported mostly for testing purposes, use plain name instead\n\n\n    BN._prime = function prime(name) {\n      // Cached version of prime\n      if (primes[name]) return primes[name];\n      var prime;\n\n      if (name === 'k256') {\n        prime = new K256();\n      } else if (name === 'p224') {\n        prime = new P224();\n      } else if (name === 'p192') {\n        prime = new P192();\n      } else if (name === 'p25519') {\n        prime = new P25519();\n      } else {\n        throw new Error('Unknown prime ' + name);\n      }\n\n      primes[name] = prime;\n      return prime;\n    }; //\n    // Base reduction engine\n    //\n\n\n    function Red(m) {\n      if (typeof m === 'string') {\n        var prime = BN._prime(m);\n\n        this.m = prime.p;\n        this.prime = prime;\n      } else {\n        assert(m.gtn(1), 'modulus must be greater than 1');\n        this.m = m;\n        this.prime = null;\n      }\n    }\n\n    Red.prototype._verify1 = function _verify1(a) {\n      assert(a.negative === 0, 'red works only with positives');\n      assert(a.red, 'red works only with red numbers');\n    };\n\n    Red.prototype._verify2 = function _verify2(a, b) {\n      assert((a.negative | b.negative) === 0, 'red works only with positives');\n      assert(a.red && a.red === b.red, 'red works only with red numbers');\n    };\n\n    Red.prototype.imod = function imod(a) {\n      if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n      return a.umod(this.m)._forceRed(this);\n    };\n\n    Red.prototype.neg = function neg(a) {\n      if (a.isZero()) {\n        return a.clone();\n      }\n\n      return this.m.sub(a)._forceRed(this);\n    };\n\n    Red.prototype.add = function add(a, b) {\n      this._verify2(a, b);\n\n      var res = a.add(b);\n\n      if (res.cmp(this.m) >= 0) {\n        res.isub(this.m);\n      }\n\n      return res._forceRed(this);\n    };\n\n    Red.prototype.iadd = function iadd(a, b) {\n      this._verify2(a, b);\n\n      var res = a.iadd(b);\n\n      if (res.cmp(this.m) >= 0) {\n        res.isub(this.m);\n      }\n\n      return res;\n    };\n\n    Red.prototype.sub = function sub(a, b) {\n      this._verify2(a, b);\n\n      var res = a.sub(b);\n\n      if (res.cmpn(0) < 0) {\n        res.iadd(this.m);\n      }\n\n      return res._forceRed(this);\n    };\n\n    Red.prototype.isub = function isub(a, b) {\n      this._verify2(a, b);\n\n      var res = a.isub(b);\n\n      if (res.cmpn(0) < 0) {\n        res.iadd(this.m);\n      }\n\n      return res;\n    };\n\n    Red.prototype.shl = function shl(a, num) {\n      this._verify1(a);\n\n      return this.imod(a.ushln(num));\n    };\n\n    Red.prototype.imul = function imul(a, b) {\n      this._verify2(a, b);\n\n      return this.imod(a.imul(b));\n    };\n\n    Red.prototype.mul = function mul(a, b) {\n      this._verify2(a, b);\n\n      return this.imod(a.mul(b));\n    };\n\n    Red.prototype.isqr = function isqr(a) {\n      return this.imul(a, a.clone());\n    };\n\n    Red.prototype.sqr = function sqr(a) {\n      return this.mul(a, a);\n    };\n\n    Red.prototype.sqrt = function sqrt(a) {\n      if (a.isZero()) return a.clone();\n      var mod3 = this.m.andln(3);\n      assert(mod3 % 2 === 1); // Fast case\n\n      if (mod3 === 3) {\n        var pow = this.m.add(new BN(1)).iushrn(2);\n        return this.pow(a, pow);\n      } // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n      //\n      // Find Q and S, that Q * 2 ^ S = (P - 1)\n\n\n      var q = this.m.subn(1);\n      var s = 0;\n\n      while (!q.isZero() && q.andln(1) === 0) {\n        s++;\n        q.iushrn(1);\n      }\n\n      assert(!q.isZero());\n      var one = new BN(1).toRed(this);\n      var nOne = one.redNeg(); // Find quadratic non-residue\n      // NOTE: Max is such because of generalized Riemann hypothesis.\n\n      var lpow = this.m.subn(1).iushrn(1);\n      var z = this.m.bitLength();\n      z = new BN(2 * z * z).toRed(this);\n\n      while (this.pow(z, lpow).cmp(nOne) !== 0) {\n        z.redIAdd(nOne);\n      }\n\n      var c = this.pow(z, q);\n      var r = this.pow(a, q.addn(1).iushrn(1));\n      var t = this.pow(a, q);\n      var m = s;\n\n      while (t.cmp(one) !== 0) {\n        var tmp = t;\n\n        for (var i = 0; tmp.cmp(one) !== 0; i++) {\n          tmp = tmp.redSqr();\n        }\n\n        assert(i < m);\n        var b = this.pow(c, new BN(1).iushln(m - i - 1));\n        r = r.redMul(b);\n        c = b.redSqr();\n        t = t.redMul(c);\n        m = i;\n      }\n\n      return r;\n    };\n\n    Red.prototype.invm = function invm(a) {\n      var inv = a._invmp(this.m);\n\n      if (inv.negative !== 0) {\n        inv.negative = 0;\n        return this.imod(inv).redNeg();\n      } else {\n        return this.imod(inv);\n      }\n    };\n\n    Red.prototype.pow = function pow(a, num) {\n      if (num.isZero()) return new BN(1).toRed(this);\n      if (num.cmpn(1) === 0) return a.clone();\n      var windowSize = 4;\n      var wnd = new Array(1 << windowSize);\n      wnd[0] = new BN(1).toRed(this);\n      wnd[1] = a;\n\n      for (var i = 2; i < wnd.length; i++) {\n        wnd[i] = this.mul(wnd[i - 1], a);\n      }\n\n      var res = wnd[0];\n      var current = 0;\n      var currentLen = 0;\n      var start = num.bitLength() % 26;\n\n      if (start === 0) {\n        start = 26;\n      }\n\n      for (i = num.length - 1; i >= 0; i--) {\n        var word = num.words[i];\n\n        for (var j = start - 1; j >= 0; j--) {\n          var bit = word >> j & 1;\n\n          if (res !== wnd[0]) {\n            res = this.sqr(res);\n          }\n\n          if (bit === 0 && current === 0) {\n            currentLen = 0;\n            continue;\n          }\n\n          current <<= 1;\n          current |= bit;\n          currentLen++;\n          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n          res = this.mul(res, wnd[current]);\n          currentLen = 0;\n          current = 0;\n        }\n\n        start = 26;\n      }\n\n      return res;\n    };\n\n    Red.prototype.convertTo = function convertTo(num) {\n      var r = num.umod(this.m);\n      return r === num ? r.clone() : r;\n    };\n\n    Red.prototype.convertFrom = function convertFrom(num) {\n      var res = num.clone();\n      res.red = null;\n      return res;\n    }; //\n    // Montgomery method engine\n    //\n\n\n    BN.mont = function mont(num) {\n      return new Mont(num);\n    };\n\n    function Mont(m) {\n      Red.call(this, m);\n      this.shift = this.m.bitLength();\n\n      if (this.shift % 26 !== 0) {\n        this.shift += 26 - this.shift % 26;\n      }\n\n      this.r = new BN(1).iushln(this.shift);\n      this.r2 = this.imod(this.r.sqr());\n      this.rinv = this.r._invmp(this.m);\n      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n      this.minv = this.minv.umod(this.r);\n      this.minv = this.r.sub(this.minv);\n    }\n\n    inherits(Mont, Red);\n\n    Mont.prototype.convertTo = function convertTo(num) {\n      return this.imod(num.ushln(this.shift));\n    };\n\n    Mont.prototype.convertFrom = function convertFrom(num) {\n      var r = this.imod(num.mul(this.rinv));\n      r.red = null;\n      return r;\n    };\n\n    Mont.prototype.imul = function imul(a, b) {\n      if (a.isZero() || b.isZero()) {\n        a.words[0] = 0;\n        a.length = 1;\n        return a;\n      }\n\n      var t = a.imul(b);\n      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n      var u = t.isub(c).iushrn(this.shift);\n      var res = u;\n\n      if (u.cmp(this.m) >= 0) {\n        res = u.isub(this.m);\n      } else if (u.cmpn(0) < 0) {\n        res = u.iadd(this.m);\n      }\n\n      return res._forceRed(this);\n    };\n\n    Mont.prototype.mul = function mul(a, b) {\n      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n      var t = a.mul(b);\n      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n      var u = t.isub(c).iushrn(this.shift);\n      var res = u;\n\n      if (u.cmp(this.m) >= 0) {\n        res = u.isub(this.m);\n      } else if (u.cmpn(0) < 0) {\n        res = u.iadd(this.m);\n      }\n\n      return res._forceRed(this);\n    };\n\n    Mont.prototype.invm = function invm(a) {\n      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n      var res = this.imod(a._invmp(this.m).mul(this.r2));\n      return res._forceRed(this);\n    };\n  })(module, commonjsGlobal);\n});\nconst version = \"logger/5.0.4\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nlet _logLevel = LogLevels[\"default\"];\nlet _globalLogger = null;\n\nfunction _checkNormalize() {\n  try {\n    const missing = []; // Make sure all forms of normalization are supported\n\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(form => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n\n  return null;\n}\n\nconst _normalizeError = _checkNormalize();\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\"; // Not Implemented\n\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\"; // Unsupported Operation\n  //   - operation\n\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\"; // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\"; // Some sort of bad response from the server\n\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\"; // Timeout\n\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\"; ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\"; // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\"; ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\"; // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\"; // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\"; // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\"; ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\"; // Insufficien funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\"; // Nonce has already been used\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\"; // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\"; // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n})(ErrorCode || (ErrorCode = {}));\n\nclass Logger {\n  constructor(version) {\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n\n  _log(logLevel, args) {\n    const level = logLevel.toLowerCase();\n\n    if (LogLevels[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n\n    if (_logLevel > LogLevels[level]) {\n      return;\n    }\n\n    console.log.apply(console, args);\n  }\n\n  debug() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    this._log(Logger.levels.DEBUG, args);\n  }\n\n  info() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    this._log(Logger.levels.INFO, args);\n  }\n\n  warn() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    this._log(Logger.levels.WARNING, args);\n  }\n\n  makeError(message, code, params) {\n    // Errors are being censored\n    if (_censorErrors) {\n      return this.makeError(\"censored error\", code, {});\n    }\n\n    if (!code) {\n      code = Logger.errors.UNKNOWN_ERROR;\n    }\n\n    if (!params) {\n      params = {};\n    }\n\n    const messageDetails = [];\n    Object.keys(params).forEach(key => {\n      try {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key]));\n      } catch (error) {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n      }\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`version=${this.version}`);\n    const reason = message;\n\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    } // @TODO: Any??\n\n\n    const error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n      error[key] = params[key];\n    });\n    return error;\n  }\n\n  throwError(message, code, params) {\n    throw this.makeError(message, code, params);\n  }\n\n  throwArgumentError(message, name, value) {\n    return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value: value\n    });\n  }\n\n  assert(condition, message, code, params) {\n    if (!!condition) {\n      return;\n    }\n\n    this.throwError(message, code, params);\n  }\n\n  assertArgument(condition, message, name, value) {\n    if (!!condition) {\n      return;\n    }\n\n    this.throwArgumentError(message, name, value);\n  }\n\n  checkNormalize(message) {\n    if (_normalizeError) {\n      this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError\n      });\n    }\n  }\n\n  checkSafeUint53(value, message) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n\n    if (message == null) {\n      message = \"value not safe\";\n    }\n\n    if (value < 0 || value >= 0x1fffffffffffff) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value: value\n      });\n    }\n\n    if (value % 1) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value: value\n      });\n    }\n  }\n\n  checkArgumentCount(count, expectedCount, message) {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n  }\n\n  checkNew(target, kind) {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n\n  checkAbstract(target, kind) {\n    if (target === kind) {\n      this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n        name: target.name,\n        operation: \"new\"\n      });\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n\n  static globalLogger() {\n    if (!_globalLogger) {\n      _globalLogger = new Logger(version);\n    }\n\n    return _globalLogger;\n  }\n\n  static setCensorship(censorship, permanent) {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n\n    if (_permanentCensorErrors) {\n      if (!censorship) {\n        return;\n      }\n\n      this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n  }\n\n  static setLogLevel(logLevel) {\n    const level = LogLevels[logLevel.toLowerCase()];\n\n    if (level == null) {\n      Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n\n    _logLevel = level;\n  }\n\n}\n\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\nconst version$1 = \"bytes/5.0.3\";\nconst logger = new Logger(version$1); ///////////////////////////////\n\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\n\nfunction isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n\n  if (value.constructor === Uint8Array) {\n    return true;\n  }\n\n  if (typeof value === \"string\") {\n    return false;\n  }\n\n  if (value.length == null) {\n    return false;\n  }\n\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n\n    if (v < 0 || v >= 256 || v % 1) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nconst HexCharacters = \"0123456789abcdef\";\n\nfunction hexlify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid hexlify value\");\n    let hex = \"\";\n\n    while (value) {\n      hex = HexCharacters[value & 0x0f] + hex;\n      value = Math.floor(value / 16);\n    }\n\n    if (hex.length) {\n      if (hex.length % 2) {\n        hex = \"0\" + hex;\n      }\n\n      return \"0x\" + hex;\n    }\n\n    return \"0x00\";\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    return value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    if (value.length % 2) {\n      if (options.hexPad === \"left\") {\n        value = \"0x0\" + value.substring(2);\n      } else if (options.hexPad === \"right\") {\n        value += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    return value.toLowerCase();\n  }\n\n  if (isBytes(value)) {\n    let result = \"0x\";\n\n    for (let i = 0; i < value.length; i++) {\n      let v = value[i];\n      result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n\n    return result;\n  }\n\n  return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n\nconst version$2 = \"logger/5.0.4\";\nlet _permanentCensorErrors$1 = false;\nlet _censorErrors$1 = false;\nconst LogLevels$1 = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nlet _logLevel$1 = LogLevels$1[\"default\"];\nlet _globalLogger$1 = null;\n\nfunction _checkNormalize$1() {\n  try {\n    const missing = []; // Make sure all forms of normalization are supported\n\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(form => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n\n  return null;\n}\n\nconst _normalizeError$1 = _checkNormalize$1();\n\nvar LogLevel$1;\n\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel$1 || (LogLevel$1 = {}));\n\nvar ErrorCode$1;\n\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\"; // Not Implemented\n\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\"; // Unsupported Operation\n  //   - operation\n\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\"; // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\"; // Some sort of bad response from the server\n\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\"; // Timeout\n\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\"; ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\"; // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\"; ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\"; // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\"; // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\"; // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\"; ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\"; // Insufficien funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\"; // Nonce has already been used\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\"; // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\"; // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n})(ErrorCode$1 || (ErrorCode$1 = {}));\n\nclass Logger$1 {\n  constructor(version) {\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n\n  _log(logLevel, args) {\n    const level = logLevel.toLowerCase();\n\n    if (LogLevels$1[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n\n    if (_logLevel$1 > LogLevels$1[level]) {\n      return;\n    }\n\n    console.log.apply(console, args);\n  }\n\n  debug() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    this._log(Logger$1.levels.DEBUG, args);\n  }\n\n  info() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    this._log(Logger$1.levels.INFO, args);\n  }\n\n  warn() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    this._log(Logger$1.levels.WARNING, args);\n  }\n\n  makeError(message, code, params) {\n    // Errors are being censored\n    if (_censorErrors$1) {\n      return this.makeError(\"censored error\", code, {});\n    }\n\n    if (!code) {\n      code = Logger$1.errors.UNKNOWN_ERROR;\n    }\n\n    if (!params) {\n      params = {};\n    }\n\n    const messageDetails = [];\n    Object.keys(params).forEach(key => {\n      try {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key]));\n      } catch (error) {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n      }\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`version=${this.version}`);\n    const reason = message;\n\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    } // @TODO: Any??\n\n\n    const error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n      error[key] = params[key];\n    });\n    return error;\n  }\n\n  throwError(message, code, params) {\n    throw this.makeError(message, code, params);\n  }\n\n  throwArgumentError(message, name, value) {\n    return this.throwError(message, Logger$1.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value: value\n    });\n  }\n\n  assert(condition, message, code, params) {\n    if (!!condition) {\n      return;\n    }\n\n    this.throwError(message, code, params);\n  }\n\n  assertArgument(condition, message, name, value) {\n    if (!!condition) {\n      return;\n    }\n\n    this.throwArgumentError(message, name, value);\n  }\n\n  checkNormalize(message) {\n    if (_normalizeError$1) {\n      this.throwError(\"platform missing String.prototype.normalize\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError$1\n      });\n    }\n  }\n\n  checkSafeUint53(value, message) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n\n    if (message == null) {\n      message = \"value not safe\";\n    }\n\n    if (value < 0 || value >= 0x1fffffffffffff) {\n      this.throwError(message, Logger$1.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value: value\n      });\n    }\n\n    if (value % 1) {\n      this.throwError(message, Logger$1.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value: value\n      });\n    }\n  }\n\n  checkArgumentCount(count, expectedCount, message) {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, Logger$1.errors.MISSING_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, Logger$1.errors.UNEXPECTED_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n  }\n\n  checkNew(target, kind) {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger$1.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n\n  checkAbstract(target, kind) {\n    if (target === kind) {\n      this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n        name: target.name,\n        operation: \"new\"\n      });\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger$1.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n\n  static globalLogger() {\n    if (!_globalLogger$1) {\n      _globalLogger$1 = new Logger$1(version$2);\n    }\n\n    return _globalLogger$1;\n  }\n\n  static setCensorship(censorship, permanent) {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n\n    if (_permanentCensorErrors$1) {\n      if (!censorship) {\n        return;\n      }\n\n      this.globalLogger().throwError(\"error censorship permanent\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n\n    _censorErrors$1 = !!censorship;\n    _permanentCensorErrors$1 = !!permanent;\n  }\n\n  static setLogLevel(logLevel) {\n    const level = LogLevels$1[logLevel.toLowerCase()];\n\n    if (level == null) {\n      Logger$1.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n\n    _logLevel$1 = level;\n  }\n\n}\n\nLogger$1.errors = ErrorCode$1;\nLogger$1.levels = LogLevel$1;\nconst version$3 = \"bignumber/5.0.5\";\nconst logger$1 = new Logger$1(version$3);\nconst _constructorGuard = {};\nconst MAX_SAFE = 0x1fffffffffffff;\n\nclass BigNumber {\n  constructor(constructorGuard, hex) {\n    logger$1.checkNew(new.target, BigNumber);\n\n    if (constructorGuard !== _constructorGuard) {\n      logger$1.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new (BigNumber)\"\n      });\n    }\n\n    this._hex = hex;\n    this._isBigNumber = true;\n    Object.freeze(this);\n  }\n\n  fromTwos(value) {\n    return toBigNumber(toBN(this).fromTwos(value));\n  }\n\n  toTwos(value) {\n    return toBigNumber(toBN(this).toTwos(value));\n  }\n\n  abs() {\n    if (this._hex[0] === \"-\") {\n      return BigNumber.from(this._hex.substring(1));\n    }\n\n    return this;\n  }\n\n  add(other) {\n    return toBigNumber(toBN(this).add(toBN(other)));\n  }\n\n  sub(other) {\n    return toBigNumber(toBN(this).sub(toBN(other)));\n  }\n\n  div(other) {\n    const o = BigNumber.from(other);\n\n    if (o.isZero()) {\n      throwFault(\"division by zero\", \"div\");\n    }\n\n    return toBigNumber(toBN(this).div(toBN(other)));\n  }\n\n  mul(other) {\n    return toBigNumber(toBN(this).mul(toBN(other)));\n  }\n\n  mod(other) {\n    const value = toBN(other);\n\n    if (value.isNeg()) {\n      throwFault(\"cannot modulo negative values\", \"mod\");\n    }\n\n    return toBigNumber(toBN(this).umod(value));\n  }\n\n  pow(other) {\n    const value = toBN(other);\n\n    if (value.isNeg()) {\n      throwFault(\"cannot raise to negative values\", \"pow\");\n    }\n\n    return toBigNumber(toBN(this).pow(value));\n  }\n\n  and(other) {\n    const value = toBN(other);\n\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"cannot 'and' negative values\", \"and\");\n    }\n\n    return toBigNumber(toBN(this).and(value));\n  }\n\n  or(other) {\n    const value = toBN(other);\n\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"cannot 'or' negative values\", \"or\");\n    }\n\n    return toBigNumber(toBN(this).or(value));\n  }\n\n  xor(other) {\n    const value = toBN(other);\n\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"cannot 'xor' negative values\", \"xor\");\n    }\n\n    return toBigNumber(toBN(this).xor(value));\n  }\n\n  mask(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"cannot mask negative values\", \"mask\");\n    }\n\n    return toBigNumber(toBN(this).maskn(value));\n  }\n\n  shl(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"cannot shift negative values\", \"shl\");\n    }\n\n    return toBigNumber(toBN(this).shln(value));\n  }\n\n  shr(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"cannot shift negative values\", \"shr\");\n    }\n\n    return toBigNumber(toBN(this).shrn(value));\n  }\n\n  eq(other) {\n    return toBN(this).eq(toBN(other));\n  }\n\n  lt(other) {\n    return toBN(this).lt(toBN(other));\n  }\n\n  lte(other) {\n    return toBN(this).lte(toBN(other));\n  }\n\n  gt(other) {\n    return toBN(this).gt(toBN(other));\n  }\n\n  gte(other) {\n    return toBN(this).gte(toBN(other));\n  }\n\n  isNegative() {\n    return this._hex[0] === \"-\";\n  }\n\n  isZero() {\n    return toBN(this).isZero();\n  }\n\n  toNumber() {\n    try {\n      return toBN(this).toNumber();\n    } catch (error) {\n      throwFault(\"overflow\", \"toNumber\", this.toString());\n    }\n\n    return null;\n  }\n\n  toString() {\n    // Lots of people expect this, which we do not support, so check\n    if (arguments.length !== 0) {\n      logger$1.throwError(\"bigNumber.toString does not accept parameters\", Logger$1.errors.UNEXPECTED_ARGUMENT, {});\n    }\n\n    return toBN(this).toString(10);\n  }\n\n  toHexString() {\n    return this._hex;\n  }\n\n  static from(value) {\n    if (value instanceof BigNumber) {\n      return value;\n    }\n\n    if (typeof value === \"string\") {\n      if (value.match(/^-?0x[0-9a-f]+$/i)) {\n        return new BigNumber(_constructorGuard, toHex(value));\n      }\n\n      if (value.match(/^-?[0-9]+$/)) {\n        return new BigNumber(_constructorGuard, toHex(new bn.BN(value)));\n      }\n\n      return logger$1.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n    }\n\n    if (typeof value === \"number\") {\n      if (value % 1) {\n        throwFault(\"underflow\", \"BigNumber.from\", value);\n      }\n\n      if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n        throwFault(\"overflow\", \"BigNumber.from\", value);\n      }\n\n      return BigNumber.from(String(value));\n    }\n\n    if (typeof value === \"bigint\") {\n      return BigNumber.from(value.toString());\n    }\n\n    if (isBytes(value)) {\n      return BigNumber.from(hexlify(value));\n    }\n\n    if (value._hex && isHexString(value._hex)) {\n      return BigNumber.from(value._hex);\n    }\n\n    if (value.toHexString) {\n      value = value.toHexString();\n\n      if (typeof value === \"string\") {\n        return BigNumber.from(value);\n      }\n    }\n\n    return logger$1.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n  }\n\n  static isBigNumber(value) {\n    return !!(value && value._isBigNumber);\n  }\n\n} // Normalize the hex string\n\n\nfunction toHex(value) {\n  // For BN, call on the hex string\n  if (typeof value !== \"string\") {\n    return toHex(value.toString(16));\n  } // If negative, prepend the negative sign to the normalized positive value\n\n\n  if (value[0] === \"-\") {\n    // Strip off the negative sign\n    value = value.substring(1); // Cannot have mulitple negative signs (e.g. \"--0x04\")\n\n    if (value[0] === \"-\") {\n      logger$1.throwArgumentError(\"invalid hex\", \"value\", value);\n    } // Call toHex on the positive component\n\n\n    value = toHex(value); // Do not allow \"-0x00\"\n\n    if (value === \"0x00\") {\n      return value;\n    } // Negate the value\n\n\n    return \"-\" + value;\n  } // Add a \"0x\" prefix if missing\n\n\n  if (value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  } // Normalize zero\n\n\n  if (value === \"0x\") {\n    return \"0x00\";\n  } // Make the string even length\n\n\n  if (value.length % 2) {\n    value = \"0x0\" + value.substring(2);\n  } // Trim to smallest even-length string\n\n\n  while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n    value = \"0x\" + value.substring(4);\n  }\n\n  return value;\n}\n\nfunction toBigNumber(value) {\n  return BigNumber.from(toHex(value));\n}\n\nfunction toBN(value) {\n  const hex = BigNumber.from(value).toHexString();\n\n  if (hex[0] === \"-\") {\n    return new bn.BN(\"-\" + hex.substring(3), 16);\n  }\n\n  return new bn.BN(hex.substring(2), 16);\n}\n\nfunction throwFault(fault, operation, value) {\n  const params = {\n    fault: fault,\n    operation: operation\n  };\n\n  if (value != null) {\n    params.value = value;\n  }\n\n  return logger$1.throwError(fault, Logger$1.errors.NUMERIC_FAULT, params);\n}\n\nconst logger$2 = new Logger$1(version$3);\nconst Zero = BigNumber.from(0);\nconst NegativeOne = BigNumber.from(-1); // Constant to pull zeros from for multipliers\n\nlet zeros = \"0\";\n\nwhile (zeros.length < 256) {\n  zeros += zeros;\n} // Returns a string \"1\" followed by decimal \"0\"s\n\n\nfunction getMultiplier(decimals) {\n  if (typeof decimals !== \"number\") {\n    try {\n      decimals = BigNumber.from(decimals).toNumber();\n    } catch (e) {}\n  }\n\n  if (typeof decimals === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n    return \"1\" + zeros.substring(0, decimals);\n  }\n\n  return logger$2.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\n\nfunction formatFixed(value, decimals) {\n  if (decimals == null) {\n    decimals = 0;\n  }\n\n  const multiplier = getMultiplier(decimals); // Make sure wei is a big number (convert as necessary)\n\n  value = BigNumber.from(value);\n  const negative = value.lt(Zero);\n\n  if (negative) {\n    value = value.mul(NegativeOne);\n  }\n\n  let fraction = value.mod(multiplier).toString();\n\n  while (fraction.length < multiplier.length - 1) {\n    fraction = \"0\" + fraction;\n  } // Strip training 0\n\n\n  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n  const whole = value.div(multiplier).toString();\n  value = whole + \".\" + fraction;\n\n  if (negative) {\n    value = \"-\" + value;\n  }\n\n  return value;\n}\n\nconst version$4 = \"units/5.0.2\";\nconst logger$3 = new Logger$1(version$4);\nconst names = [\"wei\", \"kwei\", \"mwei\", \"gwei\", \"szabo\", \"finney\", \"ether\"];\n\nfunction formatUnits(value, unitName) {\n  if (typeof unitName === \"string\") {\n    const index = names.indexOf(unitName);\n\n    if (index !== -1) {\n      unitName = 3 * index;\n    }\n  }\n\n  return formatFixed(value, unitName != null ? unitName : 18);\n}\n\nfunction formatEther(wei) {\n  return formatUnits(wei, 18);\n}\n/* Generated by ts-generator ver. 0.0.8 */\n\n\nvar Erc20DetailedFactory =\n/** @class */\nfunction () {\n  function Erc20DetailedFactory() {}\n\n  Erc20DetailedFactory.connect = function (address, signerOrProvider) {\n    return new Contract(address, _abi, signerOrProvider);\n  };\n\n  return Erc20DetailedFactory;\n}();\n\nvar _abi = [{\n  constant: false,\n  inputs: [{\n    name: 'spender',\n    type: 'address'\n  }, {\n    name: 'amount',\n    type: 'uint256'\n  }],\n  name: 'approve',\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  payable: false,\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  constant: true,\n  inputs: [],\n  name: 'totalSupply',\n  outputs: [{\n    name: '',\n    type: 'uint256'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  constant: false,\n  inputs: [{\n    name: 'sender',\n    type: 'address'\n  }, {\n    name: 'recipient',\n    type: 'address'\n  }, {\n    name: 'amount',\n    type: 'uint256'\n  }],\n  name: 'transferFrom',\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  payable: false,\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  constant: true,\n  inputs: [{\n    name: 'account',\n    type: 'address'\n  }],\n  name: 'balanceOf',\n  outputs: [{\n    name: '',\n    type: 'uint256'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  constant: false,\n  inputs: [{\n    name: 'recipient',\n    type: 'address'\n  }, {\n    name: 'amount',\n    type: 'uint256'\n  }],\n  name: 'transfer',\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  payable: false,\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  constant: true,\n  inputs: [{\n    name: 'owner',\n    type: 'address'\n  }, {\n    name: 'spender',\n    type: 'address'\n  }],\n  name: 'allowance',\n  outputs: [{\n    name: '',\n    type: 'uint256'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    name: 'name',\n    type: 'string'\n  }, {\n    name: 'symbol',\n    type: 'string'\n  }, {\n    name: 'decimals',\n    type: 'uint8'\n  }],\n  payable: false,\n  stateMutability: 'nonpayable',\n  type: 'constructor'\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: 'from',\n    type: 'address'\n  }, {\n    indexed: true,\n    name: 'to',\n    type: 'address'\n  }, {\n    indexed: false,\n    name: 'value',\n    type: 'uint256'\n  }],\n  name: 'Transfer',\n  type: 'event'\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: 'owner',\n    type: 'address'\n  }, {\n    indexed: true,\n    name: 'spender',\n    type: 'address'\n  }, {\n    indexed: false,\n    name: 'value',\n    type: 'uint256'\n  }],\n  name: 'Approval',\n  type: 'event'\n}, {\n  constant: true,\n  inputs: [],\n  name: 'name',\n  outputs: [{\n    name: '',\n    type: 'string'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  constant: true,\n  inputs: [],\n  name: 'symbol',\n  outputs: [{\n    name: '',\n    type: 'string'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  constant: true,\n  inputs: [],\n  name: 'decimals',\n  outputs: [{\n    name: '',\n    type: 'uint8'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function'\n}];\n\nfunction tokensReducer(tokens, action) {\n  var _a, _b;\n\n  switch (action.type) {\n    case 'addToken':\n      return __assign(__assign({}, tokens), (_a = {}, _a[action.payload.id] = __assign({}, action.payload.token), _a));\n\n    case 'updateTokenBalanceAllowance':\n      return __assign(__assign({}, tokens), (_b = {}, _b[action.payload.id] = __assign(__assign({}, tokens[action.payload.id]), {\n        balance: action.payload.balance,\n        balanceBN: action.payload.balanceBN,\n        spenderAllowance: action.payload.spenderAllowance\n      }), _b));\n\n    case 'resetTokens':\n      return {};\n\n    default:\n      return tokens;\n  }\n}\n\nvar testLocalStorage = function () {\n  try {\n    localStorage.setItem('test', 'test');\n    localStorage.removeItem('test');\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nvar Web3Context = createContext(undefined);\n\nvar Web3Provider = function (_a) {\n  var children = _a.children,\n      onboardConfig = _a.onboardConfig,\n      networkIds = _a.networkIds,\n      ethGasStationApiKey = _a.ethGasStationApiKey,\n      _b = _a.gasPricePollingInterval,\n      gasPricePollingInterval = _b === void 0 ? 0 : _b,\n      _c = _a.gasPriceSetting,\n      gasPriceSetting = _c === void 0 ? 'fast' : _c,\n      tokensToWatch = _a.tokensToWatch,\n      spenderAddress = _a.spenderAddress,\n      _d = _a.cacheWalletSelection,\n      cacheWalletSelection = _d === void 0 ? true : _d,\n      _e = _a.checkNetwork,\n      checkNetwork = _e === void 0 ? networkIds && networkIds.length > 0 || false : _e,\n      additionalChainParams = _a.additionalChainParams;\n\n  var _f = useState(undefined),\n      address = _f[0],\n      setAddress = _f[1];\n\n  var _g = useState(undefined),\n      provider = _g[0],\n      setProvider = _g[1];\n\n  var _h = useState(undefined),\n      network = _h[0],\n      setNetwork = _h[1];\n\n  var _j = useState(undefined),\n      ethBalance = _j[0],\n      setEthBalance = _j[1];\n\n  var _k = useState(undefined),\n      wallet = _k[0],\n      setWallet = _k[1];\n\n  var _l = useState(undefined),\n      onboard = _l[0],\n      setOnboard = _l[1];\n\n  var _m = useState(false),\n      isReady = _m[0],\n      setIsReady = _m[1];\n\n  var _o = useReducer(tokensReducer, {}),\n      tokens = _o[0],\n      tokensDispatch = _o[1];\n\n  var _p = useState(0),\n      gasPrice = _p[0],\n      setGasPrice = _p[1];\n\n  var canUseLocalStorage = testLocalStorage(); // Initialize OnboardJS\n\n  useEffect(function () {\n    var initializeOnboard = function () {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var checks, onboard_1, savedWallet;\n        return __generator(this, function (_a) {\n          checks = [{\n            checkName: 'accounts'\n          }, {\n            checkName: 'connect'\n          }];\n\n          if (networkIds && checkNetwork) {\n            checks.push({\n              checkName: 'network'\n            });\n          }\n\n          try {\n            onboard_1 = Onboard(__assign(__assign({}, onboardConfig), {\n              networkId: networkIds ? networkIds[0] : 1,\n              walletCheck: checks,\n              subscriptions: {\n                address: function (address) {\n                  var _a, _b;\n\n                  setAddress(address);\n                  checkIsReady();\n                  ((_a = onboardConfig === null || onboardConfig === void 0 ? void 0 : onboardConfig.subscriptions) === null || _a === void 0 ? void 0 : _a.address) && ((_b = onboardConfig === null || onboardConfig === void 0 ? void 0 : onboardConfig.subscriptions) === null || _b === void 0 ? void 0 : _b.address(address));\n                },\n                wallet: function (wallet) {\n                  var _a;\n\n                  if (wallet.provider) {\n                    wallet.name && canUseLocalStorage && cacheWalletSelection && localStorage.setItem('onboard.selectedWallet', wallet.name);\n                    setWallet(wallet);\n                    setProvider(new ethers.providers.Web3Provider(wallet.provider, 'any'));\n                  } else {\n                    setWallet(undefined);\n                  }\n\n                  ((_a = onboardConfig === null || onboardConfig === void 0 ? void 0 : onboardConfig.subscriptions) === null || _a === void 0 ? void 0 : _a.wallet) && onboardConfig.subscriptions.wallet(wallet);\n                },\n                network: function (network) {\n                  var _a;\n\n                  if (!networkIds || networkIds.includes(network)) {\n                    onboard_1.config({\n                      networkId: network\n                    });\n                  }\n\n                  wallet && wallet.provider && setProvider(new ethers.providers.Web3Provider(wallet.provider, 'any'));\n                  setNetwork(network);\n                  checkIsReady();\n                  ((_a = onboardConfig === null || onboardConfig === void 0 ? void 0 : onboardConfig.subscriptions) === null || _a === void 0 ? void 0 : _a.network) && onboardConfig.subscriptions.network(network);\n                },\n                balance: function (balance) {\n                  var _a;\n\n                  try {\n                    var bal = Number(formatEther(balance));\n                    !isNaN(bal) ? setEthBalance(bal) : setEthBalance(0);\n                  } catch (error) {\n                    setEthBalance(0);\n                  }\n\n                  ((_a = onboardConfig === null || onboardConfig === void 0 ? void 0 : onboardConfig.subscriptions) === null || _a === void 0 ? void 0 : _a.balance) && onboardConfig.subscriptions.balance(balance);\n                }\n              }\n            }));\n            savedWallet = canUseLocalStorage && localStorage.getItem('onboard.selectedWallet');\n            cacheWalletSelection && savedWallet && onboard_1.walletSelect(savedWallet);\n            setOnboard(onboard_1);\n          } catch (error) {\n            console.log('Error initializing onboard');\n            console.log(error);\n          }\n\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    };\n\n    initializeOnboard();\n  }, []); // Gas Price poller\n\n  useEffect(function () {\n    var poller;\n\n    if (network === 1 && gasPricePollingInterval > 0) {\n      refreshGasPrice();\n      poller = setInterval(refreshGasPrice, gasPricePollingInterval * 1000);\n    } else {\n      setGasPrice(10);\n    }\n\n    return function () {\n      if (poller) {\n        clearInterval(poller);\n      }\n    };\n  }, [network]); // Token balance and allowance listener\n  // TODO: Allowance check not needed unless target is specificed\n\n  useEffect(function () {\n    var checkBalanceAndAllowance = function (token, decimals) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var bal, balance, balanceBN, spenderAllowance, _a, _b, _c, _d, _e;\n\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              if (!address) return [3\n              /*break*/\n              , 4];\n              return [4\n              /*yield*/\n              , token.balanceOf(address)];\n\n            case 1:\n              bal = _f.sent();\n              balance = Number(utils.formatUnits(bal, decimals));\n              balanceBN = new bignumber.BigNumber(bal.toString()).shiftedBy(-decimals);\n              spenderAllowance = 0;\n              if (!spenderAddress) return [3\n              /*break*/\n              , 3];\n              _a = Number;\n              _c = (_b = utils).formatUnits;\n              _e = (_d = BigNumber$1).from;\n              return [4\n              /*yield*/\n              , token.balanceOf(address)];\n\n            case 2:\n              spenderAllowance = _a.apply(void 0, [_c.apply(_b, [_e.apply(_d, [_f.sent()]), decimals])]);\n              _f.label = 3;\n\n            case 3:\n              tokensDispatch({\n                type: 'updateTokenBalanceAllowance',\n                payload: {\n                  id: token.address,\n                  spenderAllowance: spenderAllowance,\n                  balance: balance,\n                  balanceBN: balanceBN\n                }\n              });\n              _f.label = 4;\n\n            case 4:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    var networkTokens = tokensToWatch && network && tokensToWatch[network] || [];\n    var tokenContracts = [];\n\n    if (provider && address && networkTokens.length > 0) {\n      networkTokens.forEach(function (token) {\n        return __awaiter(void 0, void 0, void 0, function () {\n          var signer, tokenContract, newTokenInfo, tokenName, error_1, tokenSymbol, error_2, tokenDecimals, error_3, filterTokenApproval, filterTokenTransferFrom, filterTokenTransferTo;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , provider.getSigner()];\n\n              case 1:\n                signer = _a.sent();\n                tokenContract = Erc20DetailedFactory.connect(token.address, signer);\n                newTokenInfo = {\n                  decimals: 0,\n                  balance: 0,\n                  balanceBN: new bignumber.BigNumber(0),\n                  imageUri: token.imageUri,\n                  name: token.name,\n                  symbol: token.symbol,\n                  spenderAllowance: 0,\n                  allowance: tokenContract.allowance,\n                  approve: tokenContract.approve,\n                  transfer: tokenContract.transfer\n                };\n                if (!!token.name) return [3\n                /*break*/\n                , 5];\n                _a.label = 2;\n\n              case 2:\n                _a.trys.push([2, 4,, 5]);\n\n                return [4\n                /*yield*/\n                , tokenContract.name()];\n\n              case 3:\n                tokenName = _a.sent();\n                newTokenInfo.name = tokenName;\n                return [3\n                /*break*/\n                , 5];\n\n              case 4:\n                error_1 = _a.sent();\n                console.log('There was an error getting the token name. Does this contract implement ERC20Detailed?');\n                return [3\n                /*break*/\n                , 5];\n\n              case 5:\n                if (!!token.symbol) return [3\n                /*break*/\n                , 9];\n                _a.label = 6;\n\n              case 6:\n                _a.trys.push([6, 8,, 9]);\n\n                return [4\n                /*yield*/\n                , tokenContract.symbol()];\n\n              case 7:\n                tokenSymbol = _a.sent();\n                newTokenInfo.symbol = tokenSymbol;\n                return [3\n                /*break*/\n                , 9];\n\n              case 8:\n                error_2 = _a.sent();\n                console.error('There was an error getting the token symbol. Does this contract implement ERC20Detailed?');\n                return [3\n                /*break*/\n                , 9];\n\n              case 9:\n                _a.trys.push([9, 11,, 12]);\n\n                return [4\n                /*yield*/\n                , tokenContract.decimals()];\n\n              case 10:\n                tokenDecimals = _a.sent();\n                newTokenInfo.decimals = tokenDecimals;\n                return [3\n                /*break*/\n                , 12];\n\n              case 11:\n                error_3 = _a.sent();\n                console.error('There was an error getting the token decimals. Does this contract implement ERC20Detailed?');\n                return [3\n                /*break*/\n                , 12];\n\n              case 12:\n                tokensDispatch({\n                  type: 'addToken',\n                  payload: {\n                    id: token.address,\n                    token: newTokenInfo\n                  }\n                });\n                checkBalanceAndAllowance(tokenContract, newTokenInfo.decimals);\n                filterTokenApproval = tokenContract.filters.Approval(address, null, null);\n                filterTokenTransferFrom = tokenContract.filters.Transfer(address, null, null);\n                filterTokenTransferTo = tokenContract.filters.Transfer(null, address, null);\n                tokenContract.on(filterTokenApproval, function () {\n                  return checkBalanceAndAllowance(tokenContract, newTokenInfo.decimals);\n                });\n                tokenContract.on(filterTokenTransferFrom, function () {\n                  return checkBalanceAndAllowance(tokenContract, newTokenInfo.decimals);\n                });\n                tokenContract.on(filterTokenTransferTo, function () {\n                  return checkBalanceAndAllowance(tokenContract, newTokenInfo.decimals);\n                });\n                tokenContracts.push(tokenContract);\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      });\n    }\n\n    return function () {\n      if (tokenContracts.length > 0) {\n        tokenContracts.forEach(function (tc) {\n          tc.removeAllListeners();\n        });\n        tokenContracts = [];\n        tokensDispatch({\n          type: 'resetTokens'\n        });\n      }\n    };\n  }, [network, provider, address]);\n\n  var checkIsReady = function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var isReady;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , onboard === null || onboard === void 0 ? void 0 : onboard.walletCheck()];\n\n          case 1:\n            isReady = _a.sent();\n            setIsReady(!!isReady);\n\n            if (!isReady) {\n              setEthBalance(0);\n            }\n\n            return [2\n            /*return*/\n            , !!isReady];\n        }\n      });\n    });\n  };\n\n  var signMessage = function (message) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var data, signer, addr, sig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!provider) return [2\n            /*return*/\n            , Promise.reject('The provider is not yet initialized')];\n            data = ethers.utils.toUtf8Bytes(message);\n            return [4\n            /*yield*/\n            , provider.getSigner()];\n\n          case 1:\n            signer = _a.sent();\n            return [4\n            /*yield*/\n            , signer.getAddress()];\n\n          case 2:\n            addr = _a.sent();\n            return [4\n            /*yield*/\n            , provider.send('personal_sign', [ethers.utils.hexlify(data), addr.toLowerCase()])];\n\n          case 3:\n            sig = _a.sent();\n            return [2\n            /*return*/\n            , sig];\n        }\n      });\n    });\n  };\n\n  var resetOnboard = function () {\n    canUseLocalStorage && localStorage.setItem('onboard.selectedWallet', '');\n    setIsReady(false);\n    onboard === null || onboard === void 0 ? void 0 : onboard.walletReset();\n  }; // Will attempt to switch networks to the indicated numeric chain Id.\n  // If the wallet does not suport the network, will attempt to add the\n  // network to the wallet as per EIP-3085\n\n\n  var switchNetwork = function (chainId) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var error_4, newNetworkParams;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!provider) return [3\n            /*break*/\n            , 4];\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , provider.send('wallet_switchEthereumChain', [{\n              chainId: \"0x\" + chainId.toString(16)\n            }])];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_4 = _a.sent();\n            console.error('Error switching network');\n\n            if ((error_4 === null || error_4 === void 0 ? void 0 : error_4.code) === 4902) {\n              newNetworkParams = additionalChainParams === null || additionalChainParams === void 0 ? void 0 : additionalChainParams.find(function (f) {\n                return f.chainId === chainId;\n              });\n\n              if (newNetworkParams) {\n                provider.send('wallet_addEthereumChain', [__assign(__assign({}, newNetworkParams), {\n                  chainId: \"0x\" + chainId.toString(16)\n                })]).catch(function () {\n                  return console.error('Error adding network');\n                });\n              } else {\n                console.error('Network does not exist and no config provided');\n              }\n            } else {\n              console.error(error_4);\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  var refreshGasPrice = function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var gasPrice_1, ethGasStationResponse, etherchainResponse, newGasPrice, error_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 7,, 8]);\n\n            if (!ethGasStationApiKey) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , fetch(\"https://ethgasstation.info/api/ethgasAPI.json?api-key=\" + ethGasStationApiKey)];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _a.sent().json()];\n\n          case 2:\n            ethGasStationResponse = _a.sent();\n            gasPrice_1 = ethGasStationResponse[gasPriceSetting] / 10;\n            return [3\n            /*break*/\n            , 6];\n\n          case 3:\n            return [4\n            /*yield*/\n            , fetch('https://www.etherchain.org/api/gasPriceOracle')];\n\n          case 4:\n            return [4\n            /*yield*/\n            , _a.sent().json()];\n\n          case 5:\n            etherchainResponse = _a.sent();\n            gasPrice_1 = Number(etherchainResponse[gasPriceSetting]);\n            _a.label = 6;\n\n          case 6:\n            newGasPrice = !isNaN(Number(gasPrice_1)) ? Number(gasPrice_1) : 65;\n            setGasPrice(newGasPrice);\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            error_5 = _a.sent();\n            console.log(error_5);\n            console.log('Using 65 gwei as default');\n            setGasPrice(65);\n            return [3\n            /*break*/\n            , 8];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  var onboardState = onboard === null || onboard === void 0 ? void 0 : onboard.getState();\n  return createElement(Web3Context.Provider, {\n    value: {\n      address: address,\n      provider: provider,\n      network: network,\n      ethBalance: ethBalance,\n      wallet: wallet,\n      onboard: onboard,\n      isReady: isReady,\n      checkIsReady: checkIsReady,\n      resetOnboard: resetOnboard,\n      gasPrice: gasPrice,\n      refreshGasPrice: refreshGasPrice,\n      isMobile: !!(onboardState === null || onboardState === void 0 ? void 0 : onboardState.mobileDevice),\n      tokens: tokens,\n      signMessage: signMessage,\n      switchNetwork: switchNetwork\n    }\n  }, children);\n};\n\nvar useWeb3 = function () {\n  var context = useContext(Web3Context);\n\n  if (context === undefined) {\n    throw new Error('useOnboard must be used within a OnboardProvider');\n  }\n\n  return context;\n};\n\nexport { Web3Provider, useWeb3 };","map":{"version":3,"sources":["../node_modules/bignumber.js/bignumber.js","../node_modules/bn.js/lib/bn.js","../node_modules/@ethersproject/bytes/node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/@ethersproject/bytes/node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/@ethersproject/bytes/lib.esm/_version.js","../node_modules/@ethersproject/bytes/lib.esm/index.js","../node_modules/@ethersproject/units/node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/@ethersproject/units/node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/@ethersproject/units/node_modules/@ethersproject/bignumber/lib.esm/_version.js","../node_modules/@ethersproject/units/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js","../node_modules/@ethersproject/units/node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js","../node_modules/@ethersproject/units/lib.esm/_version.js","../node_modules/@ethersproject/units/lib.esm/index.js","../src/interfaces/Erc20DetailedFactory.ts","../src/context/tokensReducer.ts","../src/context/helpers.ts","../src/context/Web3Context.tsx"],"names":["this","version","_permanentCensorErrors","_censorErrors","LogLevels","_logLevel","_globalLogger","_checkNormalize","_normalizeError","LogLevel","ErrorCode","Logger","logger","BN","React.createContext","React.createElement","React.useContext"],"mappings":"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","sourcesContent":[";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is BN v4 instance\n        r.strip();\n      } else {\n        // r is BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","export const version = \"logger/5.0.4\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficien funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n})(ErrorCode || (ErrorCode = {}));\n;\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            try {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key]));\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"bytes/5.0.3\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (value.length == null) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (v < 0 || v >= 256 || (v % 1)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0x0f] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0\n    };\n    if (isBytesLike(signature)) {\n        const bytes = arrayify(signature);\n        if (bytes.length !== 65) {\n            logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n        }\n        // Get the r, s and v\n        result.r = hexlify(bytes.slice(0, 32));\n        result.s = hexlify(bytes.slice(32, 64));\n        result.v = bytes[64];\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else if (result.recoveryParam !== (1 - (result.v % 2))) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.0.4\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficien funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n})(ErrorCode || (ErrorCode = {}));\n;\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            try {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key]));\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"bignumber/5.0.5\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardles.\n *\n */\nimport { BN } from \"bn.js\";\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst _constructorGuard = {};\nconst MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n    return (value != null) && (BigNumber.isBigNumber(value) ||\n        (typeof (value) === \"number\" && (value % 1) === 0) ||\n        (typeof (value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n        isHexString(value) ||\n        (typeof (value) === \"bigint\") ||\n        isBytes(value));\n}\nexport class BigNumber {\n    constructor(constructorGuard, hex) {\n        logger.checkNew(new.target, BigNumber);\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n        this._hex = hex;\n        this._isBigNumber = true;\n        Object.freeze(this);\n    }\n    fromTwos(value) {\n        return toBigNumber(toBN(this).fromTwos(value));\n    }\n    toTwos(value) {\n        return toBigNumber(toBN(this).toTwos(value));\n    }\n    abs() {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    }\n    add(other) {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    }\n    sub(other) {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n    div(other) {\n        const o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division by zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    }\n    mul(other) {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n    mod(other) {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"cannot modulo negative values\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    }\n    pow(other) {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"cannot raise to negative values\", \"pow\");\n        }\n        return toBigNumber(toBN(this).pow(value));\n    }\n    and(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"cannot 'and' negative values\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    }\n    or(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"cannot 'or' negative values\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    }\n    xor(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"cannot 'xor' negative values\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    }\n    mask(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"cannot mask negative values\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    }\n    shl(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"cannot shift negative values\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    }\n    shr(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"cannot shift negative values\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    }\n    eq(other) {\n        return toBN(this).eq(toBN(other));\n    }\n    lt(other) {\n        return toBN(this).lt(toBN(other));\n    }\n    lte(other) {\n        return toBN(this).lte(toBN(other));\n    }\n    gt(other) {\n        return toBN(this).gt(toBN(other));\n    }\n    gte(other) {\n        return toBN(this).gte(toBN(other));\n    }\n    isNegative() {\n        return (this._hex[0] === \"-\");\n    }\n    isZero() {\n        return toBN(this).isZero();\n    }\n    toNumber() {\n        try {\n            return toBN(this).toNumber();\n        }\n        catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n    toString() {\n        // Lots of people expect this, which we do not support, so check\n        if (arguments.length !== 0) {\n            logger.throwError(\"bigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n        }\n        return toBN(this).toString(10);\n    }\n    toHexString() {\n        return this._hex;\n    }\n    static from(value) {\n        if (value instanceof BigNumber) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n        if (typeof (value) === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n            return BigNumber.from(String(value));\n        }\n        if (typeof (value) === \"bigint\") {\n            return BigNumber.from(value.toString());\n        }\n        if (isBytes(value)) {\n            return BigNumber.from(hexlify(value));\n        }\n        if (value._hex && isHexString(value._hex)) {\n            return BigNumber.from(value._hex);\n        }\n        if (value.toHexString) {\n            value = value.toHexString();\n            if (typeof (value) === \"string\") {\n                return BigNumber.from(value);\n            }\n        }\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n    static isBigNumber(value) {\n        return !!(value && value._isBigNumber);\n    }\n}\n// Normalize the hex string\nfunction toHex(value) {\n    // For BN, call on the hex string\n    if (typeof (value) !== \"string\") {\n        return toHex(value.toString(16));\n    }\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n        // Cannot have mulitple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") {\n            logger.throwArgumentError(\"invalid hex\", \"value\", value);\n        }\n        // Call toHex on the positive component\n        value = toHex(value);\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") {\n            return value;\n        }\n        // Negate the value\n        return \"-\" + value;\n    }\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    // Normalize zero\n    if (value === \"0x\") {\n        return \"0x00\";\n    }\n    // Make the string even length\n    if (value.length % 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    // Trim to smallest even-length string\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n    }\n    return value;\n}\nfunction toBigNumber(value) {\n    return BigNumber.from(toHex(value));\n}\nfunction toBN(value) {\n    const hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return (new BN(\"-\" + hex.substring(3), 16));\n    }\n    return new BN(hex.substring(2), 16);\n}\nfunction throwFault(fault, operation, value) {\n    const params = { fault: fault, operation: operation };\n    if (value != null) {\n        params.value = value;\n    }\n    return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n//# sourceMappingURL=bignumber.js.map","\"use strict\";\nimport { arrayify, hexZeroPad, isBytes } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BigNumber, isBigNumberish } from \"./bignumber\";\nconst _constructorGuard = {};\nconst Zero = BigNumber.from(0);\nconst NegativeOne = BigNumber.from(-1);\nfunction throwFault(message, fault, operation, value) {\n    const params = { fault: fault, operation: operation };\n    if (value !== undefined) {\n        params.value = value;\n    }\n    return logger.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n}\n// Constant to pull zeros from for multipliers\nlet zeros = \"0\";\nwhile (zeros.length < 256) {\n    zeros += zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getMultiplier(decimals) {\n    if (typeof (decimals) !== \"number\") {\n        try {\n            decimals = BigNumber.from(decimals).toNumber();\n        }\n        catch (e) { }\n    }\n    if (typeof (decimals) === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n        return (\"1\" + zeros.substring(0, decimals));\n    }\n    return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\nexport function formatFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    // Make sure wei is a big number (convert as necessary)\n    value = BigNumber.from(value);\n    const negative = value.lt(Zero);\n    if (negative) {\n        value = value.mul(NegativeOne);\n    }\n    let fraction = value.mod(multiplier).toString();\n    while (fraction.length < multiplier.length - 1) {\n        fraction = \"0\" + fraction;\n    }\n    // Strip training 0\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    const whole = value.div(multiplier).toString();\n    value = whole + \".\" + fraction;\n    if (negative) {\n        value = \"-\" + value;\n    }\n    return value;\n}\nexport function parseFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    if (typeof (value) !== \"string\" || !value.match(/^-?[0-9.,]+$/)) {\n        logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n    }\n    if (multiplier.length - 1 === 0) {\n        return BigNumber.from(value);\n    }\n    // Is it negative?\n    const negative = (value.substring(0, 1) === \"-\");\n    if (negative) {\n        value = value.substring(1);\n    }\n    if (value === \".\") {\n        logger.throwArgumentError(\"missing value\", \"value\", value);\n    }\n    // Split it into a whole and fractional part\n    const comps = value.split(\".\");\n    if (comps.length > 2) {\n        logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n    }\n    let whole = comps[0], fraction = comps[1];\n    if (!whole) {\n        whole = \"0\";\n    }\n    if (!fraction) {\n        fraction = \"0\";\n    }\n    // Prevent underflow\n    if (fraction.length > multiplier.length - 1) {\n        throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n    }\n    // Fully pad the string with zeros to get to wei\n    while (fraction.length < multiplier.length - 1) {\n        fraction += \"0\";\n    }\n    const wholeValue = BigNumber.from(whole);\n    const fractionValue = BigNumber.from(fraction);\n    let wei = (wholeValue.mul(multiplier)).add(fractionValue);\n    if (negative) {\n        wei = wei.mul(NegativeOne);\n    }\n    return wei;\n}\nexport class FixedFormat {\n    constructor(constructorGuard, signed, width, decimals) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n        this.signed = signed;\n        this.width = width;\n        this.decimals = decimals;\n        this.name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n        this._multiplier = getMultiplier(decimals);\n        Object.freeze(this);\n    }\n    static from(value) {\n        if (value instanceof FixedFormat) {\n            return value;\n        }\n        let signed = true;\n        let width = 128;\n        let decimals = 18;\n        if (typeof (value) === \"string\") {\n            if (value === \"fixed\") {\n                // defaults...\n            }\n            else if (value === \"ufixed\") {\n                signed = false;\n            }\n            else if (value != null) {\n                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                if (!match) {\n                    logger.throwArgumentError(\"invalid fixed format\", \"format\", value);\n                }\n                signed = (match[1] !== \"u\");\n                width = parseInt(match[2]);\n                decimals = parseInt(match[3]);\n            }\n        }\n        else if (value) {\n            const check = (key, type, defaultValue) => {\n                if (value[key] == null) {\n                    return defaultValue;\n                }\n                if (typeof (value[key]) !== type) {\n                    logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, value[key]);\n                }\n                return value[key];\n            };\n            signed = check(\"signed\", \"boolean\", signed);\n            width = check(\"width\", \"number\", width);\n            decimals = check(\"decimals\", \"number\", decimals);\n        }\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n        }\n        if (decimals > 80) {\n            logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n        }\n        return new FixedFormat(_constructorGuard, signed, width, decimals);\n    }\n}\nexport class FixedNumber {\n    constructor(constructorGuard, hex, value, format) {\n        logger.checkNew(new.target, FixedNumber);\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n        this.format = format;\n        this._hex = hex;\n        this._value = value;\n        this._isFixedNumber = true;\n        Object.freeze(this);\n    }\n    _checkFormat(other) {\n        if (this.format.name !== other.format.name) {\n            logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n        }\n    }\n    addUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n    }\n    subUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n    }\n    mulUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n    divUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n    }\n    // @TODO: Support other rounding algorithms\n    round(decimals) {\n        if (decimals == null) {\n            decimals = 0;\n        }\n        if (decimals < 0 || decimals > 80 || (decimals % 1)) {\n            logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n        }\n        // If we are already in range, we're done\n        let comps = this.toString().split(\".\");\n        if (comps[1].length <= decimals) {\n            return this;\n        }\n        // Bump the value up by the 0.00...0005\n        const bump = \"0.\" + zeros.substring(0, decimals) + \"5\";\n        comps = this.addUnsafe(FixedNumber.fromString(bump, this.format))._value.split(\".\");\n        // Now it is safe to truncate\n        return FixedNumber.fromString(comps[0] + \".\" + comps[1].substring(0, decimals));\n    }\n    isZero() {\n        return (this._value === \"0.0\");\n    }\n    toString() { return this._value; }\n    toHexString(width) {\n        if (width == null) {\n            return this._hex;\n        }\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid byte width\", \"width\", width);\n        }\n        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n        return hexZeroPad(hex, width / 8);\n    }\n    toUnsafeFloat() { return parseFloat(this.toString()); }\n    toFormat(format) {\n        return FixedNumber.fromString(this._value, format);\n    }\n    static fromValue(value, decimals, format) {\n        // If decimals looks more like a format, and there is no format, shift the parameters\n        if (format == null && decimals != null && !isBigNumberish(decimals)) {\n            format = decimals;\n            decimals = null;\n        }\n        if (decimals == null) {\n            decimals = 0;\n        }\n        if (format == null) {\n            format = \"fixed\";\n        }\n        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n    }\n    static fromString(value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        const fixedFormat = FixedFormat.from(format);\n        const numeric = parseFixed(value, fixedFormat.decimals);\n        if (!fixedFormat.signed && numeric.lt(Zero)) {\n            throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n        }\n        let hex = null;\n        if (fixedFormat.signed) {\n            hex = numeric.toTwos(fixedFormat.width).toHexString();\n        }\n        else {\n            hex = numeric.toHexString();\n            hex = hexZeroPad(hex, fixedFormat.width / 8);\n        }\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n    static fromBytes(value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        const fixedFormat = FixedFormat.from(format);\n        if (arrayify(value).length > fixedFormat.width / 8) {\n            throw new Error(\"overflow\");\n        }\n        let numeric = BigNumber.from(value);\n        if (fixedFormat.signed) {\n            numeric = numeric.fromTwos(fixedFormat.width);\n        }\n        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n    static from(value, format) {\n        if (typeof (value) === \"string\") {\n            return FixedNumber.fromString(value, format);\n        }\n        if (isBytes(value)) {\n            return FixedNumber.fromBytes(value, format);\n        }\n        try {\n            return FixedNumber.fromValue(value, 0, format);\n        }\n        catch (error) {\n            // Allow NUMERIC_FAULT to bubble up\n            if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n                throw error;\n            }\n        }\n        return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n    }\n    static isFixedNumber(value) {\n        return !!(value && value._isFixedNumber);\n    }\n}\n//# sourceMappingURL=fixednumber.js.map","export const version = \"units/5.0.2\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { formatFixed, parseFixed } from \"@ethersproject/bignumber\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\",\n];\n// Some environments have issues with RegEx that contain back-tracking, so we cannot\n// use them.\nexport function commify(value) {\n    const comps = String(value).split(\".\");\n    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === \".\" || value === \"-.\") {\n        logger.throwArgumentError(\"invalid value\", \"value\", value);\n    }\n    // Make sure we have at least one whole digit (0 if none)\n    let whole = comps[0];\n    let negative = \"\";\n    if (whole.substring(0, 1) === \"-\") {\n        negative = \"-\";\n        whole = whole.substring(1);\n    }\n    // Make sure we have at least 1 whole digit with no leading zeros\n    while (whole.substring(0, 1) === \"0\") {\n        whole = whole.substring(1);\n    }\n    if (whole === \"\") {\n        whole = \"0\";\n    }\n    let suffix = \"\";\n    if (comps.length === 2) {\n        suffix = \".\" + (comps[1] || \"0\");\n    }\n    while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n        suffix = suffix.substring(0, suffix.length - 1);\n    }\n    const formatted = [];\n    while (whole.length) {\n        if (whole.length <= 3) {\n            formatted.unshift(whole);\n            break;\n        }\n        else {\n            const index = whole.length - 3;\n            formatted.unshift(whole.substring(index));\n            whole = whole.substring(0, index);\n        }\n    }\n    return negative + formatted.join(\",\") + suffix;\n}\nexport function formatUnits(value, unitName) {\n    if (typeof (unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return formatFixed(value, (unitName != null) ? unitName : 18);\n}\nexport function parseUnits(value, unitName) {\n    if (typeof (unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return parseFixed(value, (unitName != null) ? unitName : 18);\n}\nexport function formatEther(wei) {\n    return formatUnits(wei, 18);\n}\nexport function parseEther(ether) {\n    return parseUnits(ether, 18);\n}\n//# sourceMappingURL=index.js.map","/* Generated by ts-generator ver. 0.0.8 */\n/* tslint:disable */\n\nimport { Contract, Signer } from 'ethers';\nimport { Provider } from '@ethersproject/providers';\n\nimport { Erc20Detailed } from './Erc20Detailed';\n\nexport class Erc20DetailedFactory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): Erc20Detailed {\n    return new Contract(address, _abi, signerOrProvider) as Erc20Detailed;\n  }\n}\n\nconst _abi = [\n  {\n    constant: false,\n    inputs: [\n      {\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: 'account',\n        type: 'address',\n      },\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        name: 'spender',\n        type: 'address',\n      },\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'name',\n        type: 'string',\n      },\n      {\n        name: 'symbol',\n        type: 'string',\n      },\n      {\n        name: 'decimals',\n        type: 'uint8',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Approval',\n    type: 'event',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n","import {\n  BigNumber,\n  BigNumberish,\n  CallOverrides,\n  ContractTransaction,\n  Overrides,\n} from 'ethers';\n\nimport { BigNumber as BN } from 'bignumber.js';\n\nexport type TokenInfo = {\n  name?: string;\n  symbol?: string;\n  decimals: number;\n  balance: number;\n  balanceBN: BN;\n  imageUri?: string;\n  spenderAllowance?: number;\n  approve?: (\n    spender: string,\n    amount: BigNumberish,\n    overrides?: Overrides\n  ) => Promise<ContractTransaction>;\n\n  transfer?: (\n    recipient: string,\n    amount: BigNumberish,\n    overrides?: Overrides\n  ) => Promise<ContractTransaction>;\n\n  allowance?: (\n    owner: string,\n    spender: string,\n    overrides?: CallOverrides\n  ) => Promise<BigNumber>;\n};\n\nexport type Tokens = {\n  [address: string]: TokenInfo;\n};\nexport function tokensReducer(\n  tokens: Tokens,\n  action:\n    | { type: 'addToken'; payload: { id: string; token: TokenInfo } }\n    | { type: 'resetTokens' }\n    | {\n        type: 'updateTokenBalanceAllowance';\n        payload: {\n          id: string;\n          balance: number;\n          balanceBN: BN;\n          spenderAllowance: number;\n        };\n      }\n) {\n  switch (action.type) {\n    case 'addToken':\n      return {\n        ...tokens,\n        [action.payload.id]: { ...action.payload.token },\n      };\n    case 'updateTokenBalanceAllowance':\n      return {\n        ...tokens,\n        [action.payload.id]: {\n          ...tokens[action.payload.id],\n          balance: action.payload.balance,\n          balanceBN: action.payload.balanceBN,\n          spenderAllowance: action.payload.spenderAllowance,\n        },\n      };\n    case 'resetTokens':\n      return {};\n    default:\n      return tokens;\n  }\n}\n","export const testLocalStorage = () => {\n  try {\n    localStorage.setItem('test', 'test');\n    localStorage.removeItem('test');\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n","import * as React from 'react';\nimport { useState, useEffect, useReducer } from 'react';\nimport Onboard from 'bnc-onboard';\nimport {\n  API as OnboardApi,\n  Wallet,\n  Initialization,\n} from 'bnc-onboard/dist/src/interfaces';\nimport { providers, ethers, BigNumber, utils } from 'ethers';\nimport { BigNumber as BN } from 'bignumber.js';\nimport { formatEther } from '@ethersproject/units';\nimport { Erc20DetailedFactory } from '../interfaces/Erc20DetailedFactory';\nimport { Erc20Detailed } from '../interfaces/Erc20Detailed';\nimport { TokenInfo, Tokens, tokensReducer } from './tokensReducer';\nimport { testLocalStorage } from './helpers';\n\nexport type OnboardConfig = Partial<Omit<Initialization, 'networkId'>>;\n\ntype EthGasStationSettings = 'fast' | 'fastest' | 'safeLow' | 'average';\ntype EtherchainGasSettings = 'safeLow' | 'standard' | 'fast' | 'fastest';\n\ntype TokenConfig = {\n  address: string;\n  name?: string;\n  symbol?: string;\n  imageUri?: string;\n};\n\ntype TokensToWatch = {\n  [networkId: number]: TokenConfig[];\n};\n\nexport type AddChainParams = {\n  chainId: number;\n  chainName: string;\n  rpcUrls: string[];\n  nativeCurrency: {\n    name: string;\n    symbol: string;\n    decimals: number;\n  };\n  blockExplorerUrls?: string[];\n};\n\ntype Web3ContextProps = {\n  cacheWalletSelection?: boolean;\n  checkNetwork?: boolean;\n  children: React.ReactNode;\n  ethGasStationApiKey?: string;\n  gasPricePollingInterval?: number; //Seconds between gas price polls. Defaults to 0 - Disabled\n  gasPriceSetting?: EthGasStationSettings | EtherchainGasSettings;\n  networkIds?: number[];\n  onboardConfig?: OnboardConfig;\n  spenderAddress?: string;\n  tokensToWatch?: TokensToWatch; // Network-keyed collection of token addresses to watch\n  additionalChainParams?: AddChainParams[];\n};\n\ntype Web3Context = {\n  address?: string;\n  ethBalance?: number;\n  gasPrice: number;\n  isReady: boolean;\n  isMobile: boolean;\n  network?: number;\n  onboard?: OnboardApi;\n  provider?: providers.Web3Provider;\n  wallet?: Wallet;\n  tokens: Tokens;\n  checkIsReady(): Promise<boolean>;\n  refreshGasPrice(): Promise<void>;\n  resetOnboard(): void;\n  signMessage(message: string): Promise<string>;\n  switchNetwork(chainId: number): Promise<void>;\n};\n\nconst Web3Context = React.createContext<Web3Context | undefined>(undefined);\n\nconst Web3Provider = ({\n  children,\n  onboardConfig,\n  networkIds,\n  ethGasStationApiKey,\n  gasPricePollingInterval = 0,\n  gasPriceSetting = 'fast',\n  tokensToWatch,\n  spenderAddress,\n  cacheWalletSelection = true,\n  checkNetwork = (networkIds && networkIds.length > 0) || false,\n  additionalChainParams,\n}: Web3ContextProps) => {\n  const [address, setAddress] = useState<string | undefined>(undefined);\n  const [provider, setProvider] = useState<providers.Web3Provider | undefined>(\n    undefined\n  );\n  const [network, setNetwork] = useState<number | undefined>(undefined);\n  const [ethBalance, setEthBalance] = useState<number | undefined>(undefined);\n  const [wallet, setWallet] = useState<Wallet | undefined>(undefined);\n  const [onboard, setOnboard] = useState<OnboardApi | undefined>(undefined);\n  const [isReady, setIsReady] = useState<boolean>(false);\n  const [tokens, tokensDispatch] = useReducer(tokensReducer, {});\n  const [gasPrice, setGasPrice] = useState(0);\n  const canUseLocalStorage = testLocalStorage();\n\n  // Initialize OnboardJS\n  useEffect(() => {\n    const initializeOnboard = async () => {\n      const checks = [{ checkName: 'accounts' }, { checkName: 'connect' }];\n      if (networkIds && checkNetwork) {\n        checks.push({ checkName: 'network' });\n      }\n\n      try {\n        const onboard = Onboard({\n          ...onboardConfig,\n          networkId: networkIds ? networkIds[0] : 1, //Default to mainnet\n          walletCheck: checks,\n          subscriptions: {\n            address: (address) => {\n              setAddress(address);\n              checkIsReady();\n              onboardConfig?.subscriptions?.address &&\n                onboardConfig?.subscriptions?.address(address);\n            },\n            wallet: (wallet) => {\n              if (wallet.provider) {\n                wallet.name &&\n                  canUseLocalStorage &&\n                  cacheWalletSelection &&\n                  localStorage.setItem('onboard.selectedWallet', wallet.name);\n                setWallet(wallet);\n                setProvider(\n                  new ethers.providers.Web3Provider(wallet.provider, 'any')\n                );\n              } else {\n                setWallet(undefined);\n              }\n              onboardConfig?.subscriptions?.wallet &&\n                onboardConfig.subscriptions.wallet(wallet);\n            },\n            network: (network) => {\n              if (!networkIds || networkIds.includes(network)) {\n                onboard.config({ networkId: network });\n              }\n              wallet &&\n                wallet.provider &&\n                setProvider(\n                  new ethers.providers.Web3Provider(wallet.provider, 'any')\n                );\n              setNetwork(network);\n              checkIsReady();\n              onboardConfig?.subscriptions?.network &&\n                onboardConfig.subscriptions.network(network);\n            },\n            balance: (balance) => {\n              try {\n                const bal = Number(formatEther(balance));\n                !isNaN(bal) ? setEthBalance(bal) : setEthBalance(0);\n              } catch (error) {\n                setEthBalance(0);\n              }\n              onboardConfig?.subscriptions?.balance &&\n                onboardConfig.subscriptions.balance(balance);\n            },\n          },\n        });\n\n        const savedWallet =\n          canUseLocalStorage && localStorage.getItem('onboard.selectedWallet');\n        cacheWalletSelection &&\n          savedWallet &&\n          onboard.walletSelect(savedWallet);\n\n        setOnboard(onboard);\n      } catch (error) {\n        console.log('Error initializing onboard');\n        console.log(error);\n      }\n    };\n\n    initializeOnboard();\n  }, []);\n\n  // Gas Price poller\n  useEffect(() => {\n    let poller: NodeJS.Timeout;\n    if (network === 1 && gasPricePollingInterval > 0) {\n      refreshGasPrice();\n      poller = setInterval(refreshGasPrice, gasPricePollingInterval * 1000);\n    } else {\n      setGasPrice(10);\n    }\n    return () => {\n      if (poller) {\n        clearInterval(poller);\n      }\n    };\n  }, [network]);\n\n  // Token balance and allowance listener\n  // TODO: Allowance check not needed unless target is specificed\n  useEffect(() => {\n    const checkBalanceAndAllowance = async (\n      token: Erc20Detailed,\n      decimals: number\n    ) => {\n      if (address) {\n        const bal = await token.balanceOf(address);\n        const balance = Number(utils.formatUnits(bal, decimals));\n        const balanceBN = new BN(bal.toString()).shiftedBy(-decimals);\n        var spenderAllowance = 0;\n        if (spenderAddress) {\n          spenderAllowance = Number(\n            utils.formatUnits(\n              BigNumber.from(await token.balanceOf(address)),\n              decimals\n            )\n          );\n        }\n\n        tokensDispatch({\n          type: 'updateTokenBalanceAllowance',\n          payload: {\n            id: token.address,\n            spenderAllowance: spenderAllowance,\n            balance: balance,\n            balanceBN,\n          },\n        });\n      }\n    };\n\n    const networkTokens =\n      (tokensToWatch && network && tokensToWatch[network]) || [];\n\n    let tokenContracts: Array<Erc20Detailed> = [];\n    if (provider && address && networkTokens.length > 0) {\n      networkTokens.forEach(async (token) => {\n        const signer = await provider.getSigner();\n        const tokenContract = Erc20DetailedFactory.connect(\n          token.address,\n          signer\n        );\n\n        const newTokenInfo: TokenInfo = {\n          decimals: 0,\n          balance: 0,\n          balanceBN: new BN(0),\n          imageUri: token.imageUri,\n          name: token.name,\n          symbol: token.symbol,\n          spenderAllowance: 0,\n          allowance: tokenContract.allowance,\n          approve: tokenContract.approve,\n          transfer: tokenContract.transfer,\n        };\n\n        if (!token.name) {\n          try {\n            const tokenName = await tokenContract.name();\n            newTokenInfo.name = tokenName;\n          } catch (error) {\n            console.log(\n              'There was an error getting the token name. Does this contract implement ERC20Detailed?'\n            );\n          }\n        }\n        if (!token.symbol) {\n          try {\n            const tokenSymbol = await tokenContract.symbol();\n            newTokenInfo.symbol = tokenSymbol;\n          } catch (error) {\n            console.error(\n              'There was an error getting the token symbol. Does this contract implement ERC20Detailed?'\n            );\n          }\n        }\n\n        try {\n          const tokenDecimals = await tokenContract.decimals();\n          newTokenInfo.decimals = tokenDecimals;\n        } catch (error) {\n          console.error(\n            'There was an error getting the token decimals. Does this contract implement ERC20Detailed?'\n          );\n        }\n\n        tokensDispatch({\n          type: 'addToken',\n          payload: { id: token.address, token: newTokenInfo },\n        });\n\n        checkBalanceAndAllowance(tokenContract, newTokenInfo.decimals);\n\n        // This filter is intentionally left quite loose.\n        const filterTokenApproval = tokenContract.filters.Approval(\n          address,\n          null,\n          null\n        );\n        const filterTokenTransferFrom = tokenContract.filters.Transfer(\n          address,\n          null,\n          null\n        );\n        const filterTokenTransferTo = tokenContract.filters.Transfer(\n          null,\n          address,\n          null\n        );\n\n        tokenContract.on(filterTokenApproval, () =>\n          checkBalanceAndAllowance(tokenContract, newTokenInfo.decimals)\n        );\n        tokenContract.on(filterTokenTransferFrom, () =>\n          checkBalanceAndAllowance(tokenContract, newTokenInfo.decimals)\n        );\n        tokenContract.on(filterTokenTransferTo, () =>\n          checkBalanceAndAllowance(tokenContract, newTokenInfo.decimals)\n        );\n        tokenContracts.push(tokenContract);\n      });\n    }\n    return () => {\n      if (tokenContracts.length > 0) {\n        tokenContracts.forEach((tc) => {\n          tc.removeAllListeners();\n        });\n        tokenContracts = [];\n        tokensDispatch({ type: 'resetTokens' });\n      }\n    };\n  }, [network, provider, address]);\n\n  const checkIsReady = async () => {\n    const isReady = await onboard?.walletCheck();\n    setIsReady(!!isReady);\n    if (!isReady) {\n      setEthBalance(0);\n    }\n    return !!isReady;\n  };\n\n  const signMessage = async (message: string) => {\n    if (!provider) return Promise.reject('The provider is not yet initialized');\n\n    const data = ethers.utils.toUtf8Bytes(message);\n    const signer = await provider.getSigner();\n    const addr = await signer.getAddress();\n    const sig = await provider.send('personal_sign', [\n      ethers.utils.hexlify(data),\n      addr.toLowerCase(),\n    ]);\n    return sig;\n  };\n\n  const resetOnboard = () => {\n    canUseLocalStorage && localStorage.setItem('onboard.selectedWallet', '');\n    setIsReady(false);\n    onboard?.walletReset();\n  };\n\n  // Will attempt to switch networks to the indicated numeric chain Id.\n  // If the wallet does not suport the network, will attempt to add the\n  // network to the wallet as per EIP-3085\n  const switchNetwork = async (chainId: number) => {\n    if (provider) {\n      try {\n        await provider.send('wallet_switchEthereumChain', [\n          { chainId: `0x${chainId.toString(16)}` },\n        ]);\n      } catch (error) {\n        console.error('Error switching network');\n        if (error?.code === 4902) {\n          const newNetworkParams = additionalChainParams?.find(\n            (f) => f.chainId === chainId\n          );\n          if (newNetworkParams) {\n            provider\n              .send('wallet_addEthereumChain', [\n                {\n                  ...newNetworkParams,\n                  chainId: `0x${chainId.toString(16)}`,\n                },\n              ])\n              .catch(() => console.error('Error adding network'));\n          } else {\n            console.error('Network does not exist and no config provided');\n          }\n        } else {\n          console.error(error);\n        }\n      }\n    }\n  };\n\n  const refreshGasPrice = async () => {\n    try {\n      let gasPrice;\n      if (ethGasStationApiKey) {\n        const ethGasStationResponse = await (\n          await fetch(\n            `https://ethgasstation.info/api/ethgasAPI.json?api-key=${ethGasStationApiKey}`\n          )\n        ).json();\n        gasPrice = ethGasStationResponse[gasPriceSetting] / 10;\n      } else {\n        const etherchainResponse = await (\n          await fetch('https://www.etherchain.org/api/gasPriceOracle')\n        ).json();\n        gasPrice = Number(etherchainResponse[gasPriceSetting]);\n      }\n\n      const newGasPrice = !isNaN(Number(gasPrice)) ? Number(gasPrice) : 65;\n      setGasPrice(newGasPrice);\n    } catch (error) {\n      console.log(error);\n      console.log('Using 65 gwei as default');\n      setGasPrice(65);\n    }\n  };\n\n  const onboardState = onboard?.getState();\n\n  return (\n    <Web3Context.Provider\n      value={{\n        address: address,\n        provider,\n        network: network,\n        ethBalance: ethBalance,\n        wallet: wallet,\n        onboard: onboard,\n        isReady: isReady,\n        checkIsReady,\n        resetOnboard,\n        gasPrice,\n        refreshGasPrice,\n        isMobile: !!onboardState?.mobileDevice,\n        tokens: tokens,\n        signMessage,\n        switchNetwork,\n      }}\n    >\n      {children}\n    </Web3Context.Provider>\n  );\n};\n\nconst useWeb3 = () => {\n  const context = React.useContext(Web3Context);\n  if (context === undefined) {\n    throw new Error('useOnboard must be used within a OnboardProvider');\n  }\n  return context;\n};\n\nexport { Web3Provider, useWeb3 };\n"]},"metadata":{},"sourceType":"module"}